(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var jsflow = {};
jsflow.Monitor = require('../out/toplevel/chrome/monitor').ChromeMonitor;

var global = (function() { return this; })();

window.jsflow = new jsflow.Monitor(global);

},{"../out/toplevel/chrome/monitor":70}],2:[function(require,module,exports){
(function (global){
/*
  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*global exports:true, require:true, global:true*/
(function () {
    'use strict';

    var Syntax,
        Precedence,
        BinaryPrecedence,
        SourceNode,
        estraverse,
        esutils,
        base,
        indent,
        json,
        renumber,
        hexadecimal,
        quotes,
        escapeless,
        newline,
        space,
        parentheses,
        semicolons,
        safeConcatenation,
        directive,
        extra,
        parse,
        sourceMap,
        sourceCode,
        preserveBlankLines,
        FORMAT_MINIFY,
        FORMAT_DEFAULTS;

    estraverse = require('estraverse');
    esutils = require('esutils');

    Syntax = estraverse.Syntax;

    // Generation is done by generateExpression.
    function isExpression(node) {
        return CodeGenerator.Expression.hasOwnProperty(node.type);
    }

    // Generation is done by generateStatement.
    function isStatement(node) {
        return CodeGenerator.Statement.hasOwnProperty(node.type);
    }

    Precedence = {
        Sequence: 0,
        Yield: 1,
        Await: 1,
        Assignment: 1,
        Conditional: 2,
        ArrowFunction: 2,
        LogicalOR: 3,
        LogicalAND: 4,
        BitwiseOR: 5,
        BitwiseXOR: 6,
        BitwiseAND: 7,
        Equality: 8,
        Relational: 9,
        BitwiseSHIFT: 10,
        Additive: 11,
        Multiplicative: 12,
        Unary: 13,
        Postfix: 14,
        Call: 15,
        New: 16,
        TaggedTemplate: 17,
        Member: 18,
        Primary: 19
    };

    BinaryPrecedence = {
        '||': Precedence.LogicalOR,
        '&&': Precedence.LogicalAND,
        '|': Precedence.BitwiseOR,
        '^': Precedence.BitwiseXOR,
        '&': Precedence.BitwiseAND,
        '==': Precedence.Equality,
        '!=': Precedence.Equality,
        '===': Precedence.Equality,
        '!==': Precedence.Equality,
        'is': Precedence.Equality,
        'isnt': Precedence.Equality,
        '<': Precedence.Relational,
        '>': Precedence.Relational,
        '<=': Precedence.Relational,
        '>=': Precedence.Relational,
        'in': Precedence.Relational,
        'instanceof': Precedence.Relational,
        '<<': Precedence.BitwiseSHIFT,
        '>>': Precedence.BitwiseSHIFT,
        '>>>': Precedence.BitwiseSHIFT,
        '+': Precedence.Additive,
        '-': Precedence.Additive,
        '*': Precedence.Multiplicative,
        '%': Precedence.Multiplicative,
        '/': Precedence.Multiplicative
    };

    //Flags
    var F_ALLOW_IN = 1,
        F_ALLOW_CALL = 1 << 1,
        F_ALLOW_UNPARATH_NEW = 1 << 2,
        F_FUNC_BODY = 1 << 3,
        F_DIRECTIVE_CTX = 1 << 4,
        F_SEMICOLON_OPT = 1 << 5;

    //Expression flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_ALLOW_CALL
    // F_ALLOW_UNPARATH_NEW
    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
        E_TTF = F_ALLOW_IN | F_ALLOW_CALL,
        E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
        E_TFF = F_ALLOW_IN,
        E_FFT = F_ALLOW_UNPARATH_NEW,
        E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;

    //Statement flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_FUNC_BODY
    // F_DIRECTIVE_CTX
    // F_SEMICOLON_OPT
    var S_TFFF = F_ALLOW_IN,
        S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,
        S_FFFF = 0x00,
        S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,
        S_TTFF = F_ALLOW_IN | F_FUNC_BODY;

    function getDefaultOptions() {
        // default options
        return {
            indent: null,
            base: null,
            parse: null,
            comment: false,
            format: {
                indent: {
                    style: '    ',
                    base: 0,
                    adjustMultilineComment: false
                },
                newline: '\n',
                space: ' ',
                json: false,
                renumber: false,
                hexadecimal: false,
                quotes: 'single',
                escapeless: false,
                compact: false,
                parentheses: true,
                semicolons: true,
                safeConcatenation: false,
                preserveBlankLines: false
            },
            moz: {
                comprehensionExpressionStartsWithAssignment: false,
                starlessGenerator: false
            },
            sourceMap: null,
            sourceMapRoot: null,
            sourceMapWithCode: false,
            directive: false,
            raw: true,
            verbatim: null,
            sourceCode: null
        };
    }

    function stringRepeat(str, num) {
        var result = '';

        for (num |= 0; num > 0; num >>>= 1, str += str) {
            if (num & 1) {
                result += str;
            }
        }

        return result;
    }

    function hasLineTerminator(str) {
        return (/[\r\n]/g).test(str);
    }

    function endsWithLineTerminator(str) {
        var len = str.length;
        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
    }

    function merge(target, override) {
        var key;
        for (key in override) {
            if (override.hasOwnProperty(key)) {
                target[key] = override[key];
            }
        }
        return target;
    }

    function updateDeeply(target, override) {
        var key, val;

        function isHashObject(target) {
            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
        }

        for (key in override) {
            if (override.hasOwnProperty(key)) {
                val = override[key];
                if (isHashObject(val)) {
                    if (isHashObject(target[key])) {
                        updateDeeply(target[key], val);
                    } else {
                        target[key] = updateDeeply({}, val);
                    }
                } else {
                    target[key] = val;
                }
            }
        }
        return target;
    }

    function generateNumber(value) {
        var result, point, temp, exponent, pos;

        if (value !== value) {
            throw new Error('Numeric literal whose value is NaN');
        }
        if (value < 0 || (value === 0 && 1 / value < 0)) {
            throw new Error('Numeric literal whose value is negative');
        }

        if (value === 1 / 0) {
            return json ? 'null' : renumber ? '1e400' : '1e+400';
        }

        result = '' + value;
        if (!renumber || result.length < 3) {
            return result;
        }

        point = result.indexOf('.');
        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {
            point = 0;
            result = result.slice(1);
        }
        temp = result;
        result = result.replace('e+', 'e');
        exponent = 0;
        if ((pos = temp.indexOf('e')) > 0) {
            exponent = +temp.slice(pos + 1);
            temp = temp.slice(0, pos);
        }
        if (point >= 0) {
            exponent -= temp.length - point - 1;
            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
        }
        pos = 0;
        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {
            --pos;
        }
        if (pos !== 0) {
            exponent -= pos;
            temp = temp.slice(0, pos);
        }
        if (exponent !== 0) {
            temp += 'e' + exponent;
        }
        if ((temp.length < result.length ||
                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&
                +temp === value) {
            result = temp;
        }

        return result;
    }

    // Generate valid RegExp expression.
    // This function is based on https://github.com/Constellation/iv Engine

    function escapeRegExpCharacter(ch, previousIsBackslash) {
        // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
        if ((ch & ~1) === 0x2028) {
            return (previousIsBackslash ? 'u' : '\\u') + ((ch === 0x2028) ? '2028' : '2029');
        } else if (ch === 10 || ch === 13) {  // \n, \r
            return (previousIsBackslash ? '' : '\\') + ((ch === 10) ? 'n' : 'r');
        }
        return String.fromCharCode(ch);
    }

    function generateRegExp(reg) {
        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;

        result = reg.toString();

        if (reg.source) {
            // extract flag from toString result
            match = result.match(/\/([^/]*)$/);
            if (!match) {
                return result;
            }

            flags = match[1];
            result = '';

            characterInBrack = false;
            previousIsBackslash = false;
            for (i = 0, iz = reg.source.length; i < iz; ++i) {
                ch = reg.source.charCodeAt(i);

                if (!previousIsBackslash) {
                    if (characterInBrack) {
                        if (ch === 93) {  // ]
                            characterInBrack = false;
                        }
                    } else {
                        if (ch === 47) {  // /
                            result += '\\';
                        } else if (ch === 91) {  // [
                            characterInBrack = true;
                        }
                    }
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    previousIsBackslash = ch === 92;  // \
                } else {
                    // if new RegExp("\\\n') is provided, create /\n/
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    // prevent like /\\[/]/
                    previousIsBackslash = false;
                }
            }

            return '/' + result + '/' + flags;
        }

        return result;
    }

    function escapeAllowedCharacter(code, next) {
        var hex;

        if (code === 0x08  /* \b */) {
            return '\\b';
        }

        if (code === 0x0C  /* \f */) {
            return '\\f';
        }

        if (code === 0x09  /* \t */) {
            return '\\t';
        }

        hex = code.toString(16).toUpperCase();
        if (json || code > 0xFF) {
            return '\\u' + '0000'.slice(hex.length) + hex;
        } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {
            return '\\0';
        } else if (code === 0x000B  /* \v */) { // '\v'
            return '\\x0B';
        } else {
            return '\\x' + '00'.slice(hex.length) + hex;
        }
    }

    function escapeDisallowedCharacter(code) {
        if (code === 0x5C  /* \ */) {
            return '\\\\';
        }

        if (code === 0x0A  /* \n */) {
            return '\\n';
        }

        if (code === 0x0D  /* \r */) {
            return '\\r';
        }

        if (code === 0x2028) {
            return '\\u2028';
        }

        if (code === 0x2029) {
            return '\\u2029';
        }

        throw new Error('Incorrectly classified character');
    }

    function escapeDirective(str) {
        var i, iz, code, quote;

        quote = quotes === 'double' ? '"' : '\'';
        for (i = 0, iz = str.length; i < iz; ++i) {
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) {
                quote = '"';
                break;
            } else if (code === 0x22  /* " */) {
                quote = '\'';
                break;
            } else if (code === 0x5C  /* \ */) {
                ++i;
            }
        }

        return quote + str + quote;
    }

    function escapeString(str) {
        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;

        for (i = 0, len = str.length; i < len; ++i) {
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) {
                ++singleQuotes;
            } else if (code === 0x22  /* " */) {
                ++doubleQuotes;
            } else if (code === 0x2F  /* / */ && json) {
                result += '\\';
            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \ */) {
                result += escapeDisallowedCharacter(code);
                continue;
            } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20  /* SP */ || !json && !escapeless && (code < 0x20  /* SP */ || code > 0x7E  /* ~ */))) {
                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
                continue;
            }
            result += String.fromCharCode(code);
        }

        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));
        quote = single ? '\'' : '"';

        if (!(single ? singleQuotes : doubleQuotes)) {
            return quote + result + quote;
        }

        str = result;
        result = quote;

        for (i = 0, len = str.length; i < len; ++i) {
            code = str.charCodeAt(i);
            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* " */ && !single)) {
                result += '\\';
            }
            result += String.fromCharCode(code);
        }

        return result + quote;
    }

    /**
     * flatten an array to a string, where the array can contain
     * either strings or nested arrays
     */
    function flattenToString(arr) {
        var i, iz, elem, result = '';
        for (i = 0, iz = arr.length; i < iz; ++i) {
            elem = arr[i];
            result += Array.isArray(elem) ? flattenToString(elem) : elem;
        }
        return result;
    }

    /**
     * convert generated to a SourceNode when source maps are enabled.
     */
    function toSourceNodeWhenNeeded(generated, node) {
        if (!sourceMap) {
            // with no source maps, generated is either an
            // array or a string.  if an array, flatten it.
            // if a string, just return it
            if (Array.isArray(generated)) {
                return flattenToString(generated);
            } else {
                return generated;
            }
        }
        if (node == null) {
            if (generated instanceof SourceNode) {
                return generated;
            } else {
                node = {};
            }
        }
        if (node.loc == null) {
            return new SourceNode(null, null, sourceMap, generated, node.name || null);
        }
        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);
    }

    function noEmptySpace() {
        return (space) ? space : ' ';
    }

    function join(left, right) {
        var leftSource,
            rightSource,
            leftCharCode,
            rightCharCode;

        leftSource = toSourceNodeWhenNeeded(left).toString();
        if (leftSource.length === 0) {
            return [right];
        }

        rightSource = toSourceNodeWhenNeeded(right).toString();
        if (rightSource.length === 0) {
            return [left];
        }

        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
        rightCharCode = rightSource.charCodeAt(0);

        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||
            esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) ||
            leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`
            return [left, noEmptySpace(), right];
        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||
                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {
            return [left, right];
        }
        return [left, space, right];
    }

    function addIndent(stmt) {
        return [base, stmt];
    }

    function withIndent(fn) {
        var previousBase;
        previousBase = base;
        base += indent;
        fn(base);
        base = previousBase;
    }

    function calculateSpaces(str) {
        var i;
        for (i = str.length - 1; i >= 0; --i) {
            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {
                break;
            }
        }
        return (str.length - 1) - i;
    }

    function adjustMultilineComment(value, specialBase) {
        var array, i, len, line, j, spaces, previousBase, sn;

        array = value.split(/\r\n|[\r\n]/);
        spaces = Number.MAX_VALUE;

        // first line doesn't have indentation
        for (i = 1, len = array.length; i < len; ++i) {
            line = array[i];
            j = 0;
            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {
                ++j;
            }
            if (spaces > j) {
                spaces = j;
            }
        }

        if (typeof specialBase !== 'undefined') {
            // pattern like
            // {
            //   var t = 20;  /*
            //                 * this is comment
            //                 */
            // }
            previousBase = base;
            if (array[1][spaces] === '*') {
                specialBase += ' ';
            }
            base = specialBase;
        } else {
            if (spaces & 1) {
                // /*
                //  *
                //  */
                // If spaces are odd number, above pattern is considered.
                // We waste 1 space.
                --spaces;
            }
            previousBase = base;
        }

        for (i = 1, len = array.length; i < len; ++i) {
            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
            array[i] = sourceMap ? sn.join('') : sn;
        }

        base = previousBase;

        return array.join('\n');
    }

    function generateComment(comment, specialBase) {
        if (comment.type === 'Line') {
            if (endsWithLineTerminator(comment.value)) {
                return '//' + comment.value;
            } else {
                // Always use LineTerminator
                var result = '//' + comment.value;
                if (!preserveBlankLines) {
                    result += '\n';
                }
                return result;
            }
        }
        if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
        }
        return '/*' + comment.value + '*/';
    }

    function addComments(stmt, result) {
        var i, len, comment, save, tailingToStatement, specialBase, fragment,
            extRange, range, prevRange, prefix, infix, suffix, count;

        if (stmt.leadingComments && stmt.leadingComments.length > 0) {
            save = result;

            if (preserveBlankLines) {
                comment = stmt.leadingComments[0];
                result = [];

                extRange = comment.extendedRange;
                range = comment.range;

                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;
                if (count > 0) {
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
                } else {
                    result.push(prefix);
                    result.push(generateComment(comment));
                }

                prevRange = range;

                for (i = 1, len = stmt.leadingComments.length; i < len; i++) {
                    comment = stmt.leadingComments[i];
                    range = comment.range;

                    infix = sourceCode.substring(prevRange[1], range[0]);
                    count = (infix.match(/\n/g) || []).length;
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));

                    prevRange = range;
                }

                suffix = sourceCode.substring(range[1], extRange[1]);
                count = (suffix.match(/\n/g) || []).length;
                result.push(stringRepeat('\n', count));
            } else {
                comment = stmt.leadingComments[0];
                result = [];
                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
                    result.push('\n');
                }
                result.push(generateComment(comment));
                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result.push('\n');
                }

                for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {
                    comment = stmt.leadingComments[i];
                    fragment = [generateComment(comment)];
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        fragment.push('\n');
                    }
                    result.push(addIndent(fragment));
                }
            }

            result.push(addIndent(save));
        }

        if (stmt.trailingComments) {

            if (preserveBlankLines) {
                comment = stmt.trailingComments[0];
                extRange = comment.extendedRange;
                range = comment.range;

                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;

                if (count > 0) {
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
                } else {
                    result.push(prefix);
                    result.push(generateComment(comment));
                }
            } else {
                tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
                specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));
                for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {
                    comment = stmt.trailingComments[i];
                    if (tailingToStatement) {
                        // We assume target like following script
                        //
                        // var t = 20;  /**
                        //               * This is comment of t
                        //               */
                        if (i === 0) {
                            // first case
                            result = [result, indent];
                        } else {
                            result = [result, specialBase];
                        }
                        result.push(generateComment(comment, specialBase));
                    } else {
                        result = [result, addIndent(generateComment(comment))];
                    }
                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                        result = [result, '\n'];
                    }
                }
            }
        }

        return result;
    }

    function generateBlankLines(start, end, result) {
        var j, newlineCount = 0;

        for (j = start; j < end; j++) {
            if (sourceCode[j] === '\n') {
                newlineCount++;
            }
        }

        for (j = 1; j < newlineCount; j++) {
            result.push(newline);
        }
    }

    function parenthesize(text, current, should) {
        if (current < should) {
            return ['(', text, ')'];
        }
        return text;
    }

    function generateVerbatimString(string) {
        var i, iz, result;
        result = string.split(/\r\n|\n/);
        for (i = 1, iz = result.length; i < iz; i++) {
            result[i] = newline + base + result[i];
        }
        return result;
    }

    function generateVerbatim(expr, precedence) {
        var verbatim, result, prec;
        verbatim = expr[extra.verbatim];

        if (typeof verbatim === 'string') {
            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);
        } else {
            // verbatim is object
            result = generateVerbatimString(verbatim.content);
            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;
            result = parenthesize(result, prec, precedence);
        }

        return toSourceNodeWhenNeeded(result, expr);
    }

    function CodeGenerator() {
    }

    // Helpers.

    CodeGenerator.prototype.maybeBlock = function(stmt, flags) {
        var result, noLeadingComment, that = this;

        noLeadingComment = !extra.comment || !stmt.leadingComments;

        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
            return [space, this.generateStatement(stmt, flags)];
        }

        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
            return ';';
        }

        withIndent(function () {
            result = [
                newline,
                addIndent(that.generateStatement(stmt, flags))
            ];
        });

        return result;
    };

    CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {
        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
            return [result, space];
        }
        if (ends) {
            return [result, base];
        }
        return [result, newline, base];
    };

    function generateIdentifier(node) {
        return toSourceNodeWhenNeeded(node.name, node);
    }

    function generateAsyncPrefix(node, spaceRequired) {
        return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';
    }

    function generateStarSuffix(node) {
        var isGenerator = node.generator && !extra.moz.starlessGenerator;
        return isGenerator ? '*' + space : '';
    }

    function generateMethodPrefix(prop) {
        var func = prop.value, prefix = '';
        if (func.async) {
            prefix += generateAsyncPrefix(func, !prop.computed);
        }
        if (func.generator) {
            // avoid space before method name
            prefix += generateStarSuffix(func) ? '*' : '';
        }
        return prefix;
    }

    CodeGenerator.prototype.generatePattern = function (node, precedence, flags) {
        if (node.type === Syntax.Identifier) {
            return generateIdentifier(node);
        }
        return this.generateExpression(node, precedence, flags);
    };

    CodeGenerator.prototype.generateFunctionParams = function (node) {
        var i, iz, result, hasDefault;

        hasDefault = false;

        if (node.type === Syntax.ArrowFunctionExpression &&
                !node.rest && (!node.defaults || node.defaults.length === 0) &&
                node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
            // arg => { } case
            result = [generateAsyncPrefix(node, true), generateIdentifier(node.params[0])];
        } else {
            result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];
            result.push('(');
            if (node.defaults) {
                hasDefault = true;
            }
            for (i = 0, iz = node.params.length; i < iz; ++i) {
                if (hasDefault && node.defaults[i]) {
                    // Handle default values.
                    result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));
                } else {
                    result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));
                }
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }

            if (node.rest) {
                if (node.params.length) {
                    result.push(',' + space);
                }
                result.push('...');
                result.push(generateIdentifier(node.rest));
            }

            result.push(')');
        }

        return result;
    };

    CodeGenerator.prototype.generateFunctionBody = function (node) {
        var result, expr;

        result = this.generateFunctionParams(node);

        if (node.type === Syntax.ArrowFunctionExpression) {
            result.push(space);
            result.push('=>');
        }

        if (node.expression) {
            result.push(space);
            expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);
            if (expr.toString().charAt(0) === '{') {
                expr = ['(', expr, ')'];
            }
            result.push(expr);
        } else {
            result.push(this.maybeBlock(node.body, S_TTFF));
        }

        return result;
    };

    CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) {
        var result = ['for' + space + (stmt.await ? 'await' + space : '') + '('], that = this;
        withIndent(function () {
            if (stmt.left.type === Syntax.VariableDeclaration) {
                withIndent(function () {
                    result.push(stmt.left.kind + noEmptySpace());
                    result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));
                });
            } else {
                result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));
            }

            result = join(result, operator);
            result = [join(
                result,
                that.generateExpression(stmt.right, Precedence.Sequence, E_TTT)
            ), ')'];
        });
        result.push(this.maybeBlock(stmt.body, flags));
        return result;
    };

    CodeGenerator.prototype.generatePropertyKey = function (expr, computed) {
        var result = [];

        if (computed) {
            result.push('[');
        }

        result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));

        if (computed) {
            result.push(']');
        }

        return result;
    };

    CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) {
        if (Precedence.Assignment < precedence) {
            flags |= F_ALLOW_IN;
        }

        return parenthesize(
            [
                this.generateExpression(left, Precedence.Call, flags),
                space + operator + space,
                this.generateExpression(right, Precedence.Assignment, flags)
            ],
            Precedence.Assignment,
            precedence
        );
    };

    CodeGenerator.prototype.semicolon = function (flags) {
        if (!semicolons && flags & F_SEMICOLON_OPT) {
            return '';
        }
        return ';';
    };

    // Statements.

    CodeGenerator.Statement = {

        BlockStatement: function (stmt, flags) {
            var range, content, result = ['{', newline], that = this;

            withIndent(function () {
                // handle functions without any code
                if (stmt.body.length === 0 && preserveBlankLines) {
                    range = stmt.range;
                    if (range[1] - range[0] > 2) {
                        content = sourceCode.substring(range[0] + 1, range[1] - 1);
                        if (content[0] === '\n') {
                            result = ['{'];
                        }
                        result.push(content);
                    }
                }

                var i, iz, fragment, bodyFlags;
                bodyFlags = S_TFFF;
                if (flags & F_FUNC_BODY) {
                    bodyFlags |= F_DIRECTIVE_CTX;
                }

                for (i = 0, iz = stmt.body.length; i < iz; ++i) {
                    if (preserveBlankLines) {
                        // handle spaces before the first line
                        if (i === 0) {
                            if (stmt.body[0].leadingComments) {
                                range = stmt.body[0].leadingComments[0].extendedRange;
                                content = sourceCode.substring(range[0], range[1]);
                                if (content[0] === '\n') {
                                    result = ['{'];
                                }
                            }
                            if (!stmt.body[0].leadingComments) {
                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);
                            }
                        }

                        // handle spaces between lines
                        if (i > 0) {
                            if (!stmt.body[i - 1].trailingComments  && !stmt.body[i].leadingComments) {
                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                            }
                        }
                    }

                    if (i === iz - 1) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }

                    if (stmt.body[i].leadingComments && preserveBlankLines) {
                        fragment = that.generateStatement(stmt.body[i], bodyFlags);
                    } else {
                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));
                    }

                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        if (preserveBlankLines && i < iz - 1) {
                            // don't add a new line if there are leading coments
                            // in the next statement
                            if (!stmt.body[i + 1].leadingComments) {
                                result.push(newline);
                            }
                        } else {
                            result.push(newline);
                        }
                    }

                    if (preserveBlankLines) {
                        // handle spaces after the last line
                        if (i === iz - 1) {
                            if (!stmt.body[i].trailingComments) {
                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                            }
                        }
                    }
                }
            });

            result.push(addIndent('}'));
            return result;
        },

        BreakStatement: function (stmt, flags) {
            if (stmt.label) {
                return 'break ' + stmt.label.name + this.semicolon(flags);
            }
            return 'break' + this.semicolon(flags);
        },

        ContinueStatement: function (stmt, flags) {
            if (stmt.label) {
                return 'continue ' + stmt.label.name + this.semicolon(flags);
            }
            return 'continue' + this.semicolon(flags);
        },

        ClassBody: function (stmt, flags) {
            var result = [ '{', newline], that = this;

            withIndent(function (indent) {
                var i, iz;

                for (i = 0, iz = stmt.body.length; i < iz; ++i) {
                    result.push(indent);
                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) {
                        result.push(newline);
                    }
                }
            });

            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(base);
            result.push('}');
            return result;
        },

        ClassDeclaration: function (stmt, flags) {
            var result, fragment;
            result  = ['class'];
            if (stmt.id) {
                result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));
            }
            if (stmt.superClass) {
                fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Assignment, E_TTT));
                result = join(result, fragment);
            }
            result.push(space);
            result.push(this.generateStatement(stmt.body, S_TFFT));
            return result;
        },

        DirectiveStatement: function (stmt, flags) {
            if (extra.raw && stmt.raw) {
                return stmt.raw + this.semicolon(flags);
            }
            return escapeDirective(stmt.directive) + this.semicolon(flags);
        },

        DoWhileStatement: function (stmt, flags) {
            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.
            var result = join('do', this.maybeBlock(stmt.body, S_TFFF));
            result = this.maybeBlockSuffix(stmt.body, result);
            return join(result, [
                'while' + space + '(',
                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                ')' + this.semicolon(flags)
            ]);
        },

        CatchClause: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                var guard;

                result = [
                    'catch' + space + '(',
                    that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),
                    ')'
                ];

                if (stmt.guard) {
                    guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);
                    result.splice(2, 0, ' if ', guard);
                }
            });
            result.push(this.maybeBlock(stmt.body, S_TFFF));
            return result;
        },

        DebuggerStatement: function (stmt, flags) {
            return 'debugger' + this.semicolon(flags);
        },

        EmptyStatement: function (stmt, flags) {
            return ';';
        },

        ExportDefaultDeclaration: function (stmt, flags) {
            var result = [ 'export' ], bodyFlags;

            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;

            // export default HoistableDeclaration[Default]
            // export default AssignmentExpression[In] ;
            result = join(result, 'default');
            if (isStatement(stmt.declaration)) {
                result = join(result, this.generateStatement(stmt.declaration, bodyFlags));
            } else {
                result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));
            }
            return result;
        },

        ExportNamedDeclaration: function (stmt, flags) {
            var result = [ 'export' ], bodyFlags, that = this;

            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;

            // export VariableStatement
            // export Declaration[Default]
            if (stmt.declaration) {
                return join(result, this.generateStatement(stmt.declaration, bodyFlags));
            }

            // export ExportClause[NoReference] FromClause ;
            // export ExportClause ;
            if (stmt.specifiers) {
                if (stmt.specifiers.length === 0) {
                    result = join(result, '{' + space + '}');
                } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {
                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));
                } else {
                    result = join(result, '{');
                    withIndent(function (indent) {
                        var i, iz;
                        result.push(newline);
                        for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {
                            result.push(indent);
                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                            if (i + 1 < iz) {
                                result.push(',' + newline);
                            }
                        }
                    });
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                        result.push(newline);
                    }
                    result.push(base + '}');
                }

                if (stmt.source) {
                    result = join(result, [
                        'from' + space,
                        // ModuleSpecifier
                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                        this.semicolon(flags)
                    ]);
                } else {
                    result.push(this.semicolon(flags));
                }
            }
            return result;
        },

        ExportAllDeclaration: function (stmt, flags) {
            // export * FromClause ;
            return [
                'export' + space,
                '*' + space,
                'from' + space,
                // ModuleSpecifier
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
            ];
        },

        ExpressionStatement: function (stmt, flags) {
            var result, fragment;

            function isClassPrefixed(fragment) {
                var code;
                if (fragment.slice(0, 5) !== 'class') {
                    return false;
                }
                code = fragment.charCodeAt(5);
                return code === 0x7B  /* '{' */ || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);
            }

            function isFunctionPrefixed(fragment) {
                var code;
                if (fragment.slice(0, 8) !== 'function') {
                    return false;
                }
                code = fragment.charCodeAt(8);
                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
            }

            function isAsyncPrefixed(fragment) {
                var code, i, iz;
                if (fragment.slice(0, 5) !== 'async') {
                    return false;
                }
                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {
                    return false;
                }
                for (i = 6, iz = fragment.length; i < iz; ++i) {
                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {
                        break;
                    }
                }
                if (i === iz) {
                    return false;
                }
                if (fragment.slice(i, i + 8) !== 'function') {
                    return false;
                }
                code = fragment.charCodeAt(i + 8);
                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
            }

            result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];
            // 12.4 '{', 'function', 'class' is not allowed in this position.
            // wrap expression with parentheses
            fragment = toSourceNodeWhenNeeded(result).toString();
            if (fragment.charCodeAt(0) === 0x7B  /* '{' */ ||  // ObjectExpression
                    isClassPrefixed(fragment) ||
                    isFunctionPrefixed(fragment) ||
                    isAsyncPrefixed(fragment) ||
                    (directive && (flags & F_DIRECTIVE_CTX) && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {
                result = ['(', result, ')' + this.semicolon(flags)];
            } else {
                result.push(this.semicolon(flags));
            }
            return result;
        },

        ImportDeclaration: function (stmt, flags) {
            // ES6: 15.2.1 valid import declarations:
            //     - import ImportClause FromClause ;
            //     - import ModuleSpecifier ;
            var result, cursor, that = this;

            // If no ImportClause is present,
            // this should be `import ModuleSpecifier` so skip `from`
            // ModuleSpecifier is StringLiteral.
            if (stmt.specifiers.length === 0) {
                // import ModuleSpecifier ;
                return [
                    'import',
                    space,
                    // ModuleSpecifier
                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                    this.semicolon(flags)
                ];
            }

            // import ImportClause FromClause ;
            result = [
                'import'
            ];
            cursor = 0;

            // ImportedBinding
            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {
                result = join(result, [
                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                ]);
                ++cursor;
            }

            if (stmt.specifiers[cursor]) {
                if (cursor !== 0) {
                    result.push(',');
                }

                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {
                    // NameSpaceImport
                    result = join(result, [
                            space,
                            this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                    ]);
                } else {
                    // NamedImports
                    result.push(space + '{');

                    if ((stmt.specifiers.length - cursor) === 1) {
                        // import { ... } from "...";
                        result.push(space);
                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));
                        result.push(space + '}' + space);
                    } else {
                        // import {
                        //    ...,
                        //    ...,
                        // } from "...";
                        withIndent(function (indent) {
                            var i, iz;
                            result.push(newline);
                            for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {
                                result.push(indent);
                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                                if (i + 1 < iz) {
                                    result.push(',' + newline);
                                }
                            }
                        });
                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                            result.push(newline);
                        }
                        result.push(base + '}' + space);
                    }
                }
            }

            result = join(result, [
                'from' + space,
                // ModuleSpecifier
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
            ]);
            return result;
        },

        VariableDeclarator: function (stmt, flags) {
            var itemFlags = (flags & F_ALLOW_IN) ? E_TTT : E_FTT;
            if (stmt.init) {
                return [
                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),
                    space,
                    '=',
                    space,
                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)
                ];
            }
            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);
        },

        VariableDeclaration: function (stmt, flags) {
            // VariableDeclarator is typed as Statement,
            // but joined with comma (not LineTerminator).
            // So if comment is attached to target node, we should specialize.
            var result, i, iz, node, bodyFlags, that = this;

            result = [ stmt.kind ];

            bodyFlags = (flags & F_ALLOW_IN) ? S_TFFF : S_FFFF;

            function block() {
                node = stmt.declarations[0];
                if (extra.comment && node.leadingComments) {
                    result.push('\n');
                    result.push(addIndent(that.generateStatement(node, bodyFlags)));
                } else {
                    result.push(noEmptySpace());
                    result.push(that.generateStatement(node, bodyFlags));
                }

                for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {
                    node = stmt.declarations[i];
                    if (extra.comment && node.leadingComments) {
                        result.push(',' + newline);
                        result.push(addIndent(that.generateStatement(node, bodyFlags)));
                    } else {
                        result.push(',' + space);
                        result.push(that.generateStatement(node, bodyFlags));
                    }
                }
            }

            if (stmt.declarations.length > 1) {
                withIndent(block);
            } else {
                block();
            }

            result.push(this.semicolon(flags));

            return result;
        },

        ThrowStatement: function (stmt, flags) {
            return [join(
                'throw',
                this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
            ), this.semicolon(flags)];
        },

        TryStatement: function (stmt, flags) {
            var result, i, iz, guardedHandlers;

            result = ['try', this.maybeBlock(stmt.block, S_TFFF)];
            result = this.maybeBlockSuffix(stmt.block, result);

            if (stmt.handlers) {
                // old interface
                for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {
                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) {
                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);
                    }
                }
            } else {
                guardedHandlers = stmt.guardedHandlers || [];

                for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {
                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) {
                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);
                    }
                }

                // new interface
                if (stmt.handler) {
                    if (Array.isArray(stmt.handler)) {
                        for (i = 0, iz = stmt.handler.length; i < iz; ++i) {
                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));
                            if (stmt.finalizer || i + 1 !== iz) {
                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);
                            }
                        }
                    } else {
                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));
                        if (stmt.finalizer) {
                            result = this.maybeBlockSuffix(stmt.handler.body, result);
                        }
                    }
                }
            }
            if (stmt.finalizer) {
                result = join(result, ['finally', this.maybeBlock(stmt.finalizer, S_TFFF)]);
            }
            return result;
        },

        SwitchStatement: function (stmt, flags) {
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function () {
                result = [
                    'switch' + space + '(',
                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),
                    ')' + space + '{' + newline
                ];
            });
            if (stmt.cases) {
                bodyFlags = S_TFFF;
                for (i = 0, iz = stmt.cases.length; i < iz; ++i) {
                    if (i === iz - 1) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }
                    fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));
                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            }
            result.push(addIndent('}'));
            return result;
        },

        SwitchCase: function (stmt, flags) {
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function () {
                if (stmt.test) {
                    result = [
                        join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),
                        ':'
                    ];
                } else {
                    result = ['default:'];
                }

                i = 0;
                iz = stmt.consequent.length;
                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {
                    fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);
                    result.push(fragment);
                    i = 1;
                }

                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result.push(newline);
                }

                bodyFlags = S_TFFF;
                for (; i < iz; ++i) {
                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }
                    fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));
                    result.push(fragment);
                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            });
            return result;
        },

        IfStatement: function (stmt, flags) {
            var result, bodyFlags, semicolonOptional, that = this;
            withIndent(function () {
                result = [
                    'if' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            semicolonOptional = flags & F_SEMICOLON_OPT;
            bodyFlags = S_TFFF;
            if (semicolonOptional) {
                bodyFlags |= F_SEMICOLON_OPT;
            }
            if (stmt.alternate) {
                result.push(this.maybeBlock(stmt.consequent, S_TFFF));
                result = this.maybeBlockSuffix(stmt.consequent, result);
                if (stmt.alternate.type === Syntax.IfStatement) {
                    result = join(result, ['else ', this.generateStatement(stmt.alternate, bodyFlags)]);
                } else {
                    result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));
                }
            } else {
                result.push(this.maybeBlock(stmt.consequent, bodyFlags));
            }
            return result;
        },

        ForStatement: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                result = ['for' + space + '('];
                if (stmt.init) {
                    if (stmt.init.type === Syntax.VariableDeclaration) {
                        result.push(that.generateStatement(stmt.init, S_FFFF));
                    } else {
                        // F_ALLOW_IN becomes false.
                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));
                        result.push(';');
                    }
                } else {
                    result.push(';');
                }

                if (stmt.test) {
                    result.push(space);
                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));
                    result.push(';');
                } else {
                    result.push(';');
                }

                if (stmt.update) {
                    result.push(space);
                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));
                    result.push(')');
                } else {
                    result.push(')');
                }
            });

            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        },

        ForInStatement: function (stmt, flags) {
            return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },

        ForOfStatement: function (stmt, flags) {
            return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },

        LabeledStatement: function (stmt, flags) {
            return [stmt.label.name + ':', this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)];
        },

        Program: function (stmt, flags) {
            var result, fragment, i, iz, bodyFlags;
            iz = stmt.body.length;
            result = [safeConcatenation && iz > 0 ? '\n' : ''];
            bodyFlags = S_TFTF;
            for (i = 0; i < iz; ++i) {
                if (!safeConcatenation && i === iz - 1) {
                    bodyFlags |= F_SEMICOLON_OPT;
                }

                if (preserveBlankLines) {
                    // handle spaces before the first line
                    if (i === 0) {
                        if (!stmt.body[0].leadingComments) {
                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);
                        }
                    }

                    // handle spaces between lines
                    if (i > 0) {
                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                        }
                    }
                }

                fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));
                result.push(fragment);
                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    if (preserveBlankLines) {
                        if (!stmt.body[i + 1].leadingComments) {
                            result.push(newline);
                        }
                    } else {
                        result.push(newline);
                    }
                }

                if (preserveBlankLines) {
                    // handle spaces after the last line
                    if (i === iz - 1) {
                        if (!stmt.body[i].trailingComments) {
                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                        }
                    }
                }
            }
            return result;
        },

        FunctionDeclaration: function (stmt, flags) {
            return [
                generateAsyncPrefix(stmt, true),
                'function',
                generateStarSuffix(stmt) || noEmptySpace(),
                stmt.id ? generateIdentifier(stmt.id) : '',
                this.generateFunctionBody(stmt)
            ];
        },

        ReturnStatement: function (stmt, flags) {
            if (stmt.argument) {
                return [join(
                    'return',
                    this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
                ), this.semicolon(flags)];
            }
            return ['return' + this.semicolon(flags)];
        },

        WhileStatement: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                result = [
                    'while' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        },

        WithStatement: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                result = [
                    'with' + space + '(',
                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        }

    };

    merge(CodeGenerator.prototype, CodeGenerator.Statement);

    // Expressions.

    CodeGenerator.Expression = {

        SequenceExpression: function (expr, precedence, flags) {
            var result, i, iz;
            if (Precedence.Sequence < precedence) {
                flags |= F_ALLOW_IN;
            }
            result = [];
            for (i = 0, iz = expr.expressions.length; i < iz; ++i) {
                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }
            return parenthesize(result, Precedence.Sequence, precedence);
        },

        AssignmentExpression: function (expr, precedence, flags) {
            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);
        },

        ArrowFunctionExpression: function (expr, precedence, flags) {
            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
        },

        ConditionalExpression: function (expr, precedence, flags) {
            if (Precedence.Conditional < precedence) {
                flags |= F_ALLOW_IN;
            }
            return parenthesize(
                [
                    this.generateExpression(expr.test, Precedence.LogicalOR, flags),
                    space + '?' + space,
                    this.generateExpression(expr.consequent, Precedence.Assignment, flags),
                    space + ':' + space,
                    this.generateExpression(expr.alternate, Precedence.Assignment, flags)
                ],
                Precedence.Conditional,
                precedence
            );
        },

        LogicalExpression: function (expr, precedence, flags) {
            return this.BinaryExpression(expr, precedence, flags);
        },

        BinaryExpression: function (expr, precedence, flags) {
            var result, currentPrecedence, fragment, leftSource;
            currentPrecedence = BinaryPrecedence[expr.operator];

            if (currentPrecedence < precedence) {
                flags |= F_ALLOW_IN;
            }

            fragment = this.generateExpression(expr.left, currentPrecedence, flags);

            leftSource = fragment.toString();

            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {
                result = [fragment, noEmptySpace(), expr.operator];
            } else {
                result = join(fragment, expr.operator);
            }

            fragment = this.generateExpression(expr.right, currentPrecedence + 1, flags);

            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||
            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
                result.push(noEmptySpace());
                result.push(fragment);
            } else {
                result = join(result, fragment);
            }

            if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {
                return ['(', result, ')'];
            }
            return parenthesize(result, currentPrecedence, precedence);
        },

        CallExpression: function (expr, precedence, flags) {
            var result, i, iz;
            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];
            result.push('(');
            for (i = 0, iz = expr['arguments'].length; i < iz; ++i) {
                result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }
            result.push(')');

            if (!(flags & F_ALLOW_CALL)) {
                return ['(', result, ')'];
            }
            return parenthesize(result, Precedence.Call, precedence);
        },

        NewExpression: function (expr, precedence, flags) {
            var result, length, i, iz, itemFlags;
            length = expr['arguments'].length;

            // F_ALLOW_CALL becomes false.
            // F_ALLOW_UNPARATH_NEW may become false.
            itemFlags = (flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0) ? E_TFT : E_TFF;

            result = join(
                'new',
                this.generateExpression(expr.callee, Precedence.New, itemFlags)
            );

            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {
                result.push('(');
                for (i = 0, iz = length; i < iz; ++i) {
                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                    if (i + 1 < iz) {
                        result.push(',' + space);
                    }
                }
                result.push(')');
            }

            return parenthesize(result, Precedence.New, precedence);
        },

        MemberExpression: function (expr, precedence, flags) {
            var result, fragment;

            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [this.generateExpression(expr.object, Precedence.Call, (flags & F_ALLOW_CALL) ? E_TTF : E_TFF)];

            if (expr.computed) {
                result.push('[');
                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));
                result.push(']');
            } else {
                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
                    fragment = toSourceNodeWhenNeeded(result).toString();
                    // When the following conditions are all true,
                    //   1. No floating point
                    //   2. Don't have exponents
                    //   3. The last character is a decimal digit
                    //   4. Not hexadecimal OR octal number literal
                    // we should add a floating point.
                    if (
                            fragment.indexOf('.') < 0 &&
                            !/[eExX]/.test(fragment) &&
                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&
                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'
                            ) {
                        result.push(' ');
                    }
                }
                result.push('.');
                result.push(generateIdentifier(expr.property));
            }

            return parenthesize(result, Precedence.Member, precedence);
        },

        MetaProperty: function (expr, precedence, flags) {
            var result;
            result = [];
            result.push(typeof expr.meta === "string" ? expr.meta : generateIdentifier(expr.meta));
            result.push('.');
            result.push(typeof expr.property === "string" ? expr.property : generateIdentifier(expr.property));
            return parenthesize(result, Precedence.Member, precedence);
        },

        UnaryExpression: function (expr, precedence, flags) {
            var result, fragment, rightCharCode, leftSource, leftCharCode;
            fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);

            if (space === '') {
                result = join(expr.operator, fragment);
            } else {
                result = [expr.operator];
                if (expr.operator.length > 2) {
                    // delete, void, typeof
                    // get `typeof []`, not `typeof[]`
                    result = join(result, fragment);
                } else {
                    // Prevent inserting spaces between operator and argument if it is unnecessary
                    // like, `!cond`
                    leftSource = toSourceNodeWhenNeeded(result).toString();
                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
                    rightCharCode = fragment.toString().charCodeAt(0);

                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||
                            (esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode))) {
                        result.push(noEmptySpace());
                        result.push(fragment);
                    } else {
                        result.push(fragment);
                    }
                }
            }
            return parenthesize(result, Precedence.Unary, precedence);
        },

        YieldExpression: function (expr, precedence, flags) {
            var result;
            if (expr.delegate) {
                result = 'yield*';
            } else {
                result = 'yield';
            }
            if (expr.argument) {
                result = join(
                    result,
                    this.generateExpression(expr.argument, Precedence.Yield, E_TTT)
                );
            }
            return parenthesize(result, Precedence.Yield, precedence);
        },

        AwaitExpression: function (expr, precedence, flags) {
            var result = join(
                expr.all ? 'await*' : 'await',
                this.generateExpression(expr.argument, Precedence.Await, E_TTT)
            );
            return parenthesize(result, Precedence.Await, precedence);
        },

        UpdateExpression: function (expr, precedence, flags) {
            if (expr.prefix) {
                return parenthesize(
                    [
                        expr.operator,
                        this.generateExpression(expr.argument, Precedence.Unary, E_TTT)
                    ],
                    Precedence.Unary,
                    precedence
                );
            }
            return parenthesize(
                [
                    this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),
                    expr.operator
                ],
                Precedence.Postfix,
                precedence
            );
        },

        FunctionExpression: function (expr, precedence, flags) {
            var result = [
                generateAsyncPrefix(expr, true),
                'function'
            ];
            if (expr.id) {
                result.push(generateStarSuffix(expr) || noEmptySpace());
                result.push(generateIdentifier(expr.id));
            } else {
                result.push(generateStarSuffix(expr) || space);
            }
            result.push(this.generateFunctionBody(expr));
            return result;
        },

        ArrayPattern: function (expr, precedence, flags) {
            return this.ArrayExpression(expr, precedence, flags, true);
        },

        ArrayExpression: function (expr, precedence, flags, isPattern) {
            var result, multiline, that = this;
            if (!expr.elements.length) {
                return '[]';
            }
            multiline = isPattern ? false : expr.elements.length > 1;
            result = ['[', multiline ? newline : ''];
            withIndent(function (indent) {
                var i, iz;
                for (i = 0, iz = expr.elements.length; i < iz; ++i) {
                    if (!expr.elements[i]) {
                        if (multiline) {
                            result.push(indent);
                        }
                        if (i + 1 === iz) {
                            result.push(',');
                        }
                    } else {
                        result.push(multiline ? indent : '');
                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));
                    }
                    if (i + 1 < iz) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });
            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push(']');
            return result;
        },

        RestElement: function(expr, precedence, flags) {
            return '...' + this.generatePattern(expr.argument);
        },

        ClassExpression: function (expr, precedence, flags) {
            var result, fragment;
            result = ['class'];
            if (expr.id) {
                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));
            }
            if (expr.superClass) {
                fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Assignment, E_TTT));
                result = join(result, fragment);
            }
            result.push(space);
            result.push(this.generateStatement(expr.body, S_TFFT));
            return result;
        },

        MethodDefinition: function (expr, precedence, flags) {
            var result, fragment;
            if (expr['static']) {
                result = ['static' + space];
            } else {
                result = [];
            }
            if (expr.kind === 'get' || expr.kind === 'set') {
                fragment = [
                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)),
                    this.generateFunctionBody(expr.value)
                ];
            } else {
                fragment = [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }
            return join(result, fragment);
        },

        Property: function (expr, precedence, flags) {
            if (expr.kind === 'get' || expr.kind === 'set') {
                return [
                    expr.kind, noEmptySpace(),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }

            if (expr.shorthand) {
                if (expr.value.type === "AssignmentPattern") {
                    return this.AssignmentPattern(expr.value, Precedence.Sequence, E_TTT);
                }
                return this.generatePropertyKey(expr.key, expr.computed);
            }

            if (expr.method) {
                return [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }

            return [
                this.generatePropertyKey(expr.key, expr.computed),
                ':' + space,
                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)
            ];
        },

        ObjectExpression: function (expr, precedence, flags) {
            var multiline, result, fragment, that = this;

            if (!expr.properties.length) {
                return '{}';
            }
            multiline = expr.properties.length > 1;

            withIndent(function () {
                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);
            });

            if (!multiline) {
                // issues 4
                // Do not transform from
                //   dejavu.Class.declare({
                //       method2: function () {}
                //   });
                // to
                //   dejavu.Class.declare({method2: function () {
                //       }});
                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    return [ '{', space, fragment, space, '}' ];
                }
            }

            withIndent(function (indent) {
                var i, iz;
                result = [ '{', newline, indent, fragment ];

                if (multiline) {
                    result.push(',' + newline);
                    for (i = 1, iz = expr.properties.length; i < iz; ++i) {
                        result.push(indent);
                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                        if (i + 1 < iz) {
                            result.push(',' + newline);
                        }
                    }
                }
            });

            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(base);
            result.push('}');
            return result;
        },

        AssignmentPattern: function(expr, precedence, flags) {
            return this.generateAssignment(expr.left, expr.right, '=', precedence, flags);
        },

        ObjectPattern: function (expr, precedence, flags) {
            var result, i, iz, multiline, property, that = this;
            if (!expr.properties.length) {
                return '{}';
            }

            multiline = false;
            if (expr.properties.length === 1) {
                property = expr.properties[0];
                if (property.value.type !== Syntax.Identifier) {
                    multiline = true;
                }
            } else {
                for (i = 0, iz = expr.properties.length; i < iz; ++i) {
                    property = expr.properties[i];
                    if (!property.shorthand) {
                        multiline = true;
                        break;
                    }
                }
            }
            result = ['{', multiline ? newline : '' ];

            withIndent(function (indent) {
                var i, iz;
                for (i = 0, iz = expr.properties.length; i < iz; ++i) {
                    result.push(multiline ? indent : '');
                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });

            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push('}');
            return result;
        },

        ThisExpression: function (expr, precedence, flags) {
            return 'this';
        },

        Super: function (expr, precedence, flags) {
            return 'super';
        },

        Identifier: function (expr, precedence, flags) {
            return generateIdentifier(expr);
        },

        ImportDefaultSpecifier: function (expr, precedence, flags) {
            return generateIdentifier(expr.id || expr.local);
        },

        ImportNamespaceSpecifier: function (expr, precedence, flags) {
            var result = ['*'];
            var id = expr.id || expr.local;
            if (id) {
                result.push(space + 'as' + noEmptySpace() + generateIdentifier(id));
            }
            return result;
        },

        ImportSpecifier: function (expr, precedence, flags) {
            var imported = expr.imported;
            var result = [ imported.name ];
            var local = expr.local;
            if (local && local.name !== imported.name) {
                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(local));
            }
            return result;
        },

        ExportSpecifier: function (expr, precedence, flags) {
            var local = expr.local;
            var result = [ local.name ];
            var exported = expr.exported;
            if (exported && exported.name !== local.name) {
                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(exported));
            }
            return result;
        },

        Literal: function (expr, precedence, flags) {
            var raw;
            if (expr.hasOwnProperty('raw') && parse && extra.raw) {
                try {
                    raw = parse(expr.raw).body[0].expression;
                    if (raw.type === Syntax.Literal) {
                        if (raw.value === expr.value) {
                            return expr.raw;
                        }
                    }
                } catch (e) {
                    // not use raw property
                }
            }

            if (expr.value === null) {
                return 'null';
            }

            if (typeof expr.value === 'string') {
                return escapeString(expr.value);
            }

            if (typeof expr.value === 'number') {
                return generateNumber(expr.value);
            }

            if (typeof expr.value === 'boolean') {
                return expr.value ? 'true' : 'false';
            }

            if (expr.regex) {
              return '/' + expr.regex.pattern + '/' + expr.regex.flags;
            }
            return generateRegExp(expr.value);
        },

        GeneratorExpression: function (expr, precedence, flags) {
            return this.ComprehensionExpression(expr, precedence, flags);
        },

        ComprehensionExpression: function (expr, precedence, flags) {
            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6

            var result, i, iz, fragment, that = this;
            result = (expr.type === Syntax.GeneratorExpression) ? ['('] : ['['];

            if (extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
                result.push(fragment);
            }

            if (expr.blocks) {
                withIndent(function () {
                    for (i = 0, iz = expr.blocks.length; i < iz; ++i) {
                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);
                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {
                            result = join(result, fragment);
                        } else {
                            result.push(fragment);
                        }
                    }
                });
            }

            if (expr.filter) {
                result = join(result, 'if' + space);
                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);
                result = join(result, [ '(', fragment, ')' ]);
            }

            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);

                result = join(result, fragment);
            }

            result.push((expr.type === Syntax.GeneratorExpression) ? ')' : ']');
            return result;
        },

        ComprehensionBlock: function (expr, precedence, flags) {
            var fragment;
            if (expr.left.type === Syntax.VariableDeclaration) {
                fragment = [
                    expr.left.kind, noEmptySpace(),
                    this.generateStatement(expr.left.declarations[0], S_FFFF)
                ];
            } else {
                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);
            }

            fragment = join(fragment, expr.of ? 'of' : 'in');
            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));

            return [ 'for' + space + '(', fragment, ')' ];
        },

        SpreadElement: function (expr, precedence, flags) {
            return [
                '...',
                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)
            ];
        },

        TaggedTemplateExpression: function (expr, precedence, flags) {
            var itemFlags = E_TTF;
            if (!(flags & F_ALLOW_CALL)) {
                itemFlags = E_TFF;
            }
            var result = [
                this.generateExpression(expr.tag, Precedence.Call, itemFlags),
                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)
            ];
            return parenthesize(result, Precedence.TaggedTemplate, precedence);
        },

        TemplateElement: function (expr, precedence, flags) {
            // Don't use "cooked". Since tagged template can use raw template
            // representation. So if we do so, it breaks the script semantics.
            return expr.value.raw;
        },

        TemplateLiteral: function (expr, precedence, flags) {
            var result, i, iz;
            result = [ '`' ];
            for (i = 0, iz = expr.quasis.length; i < iz; ++i) {
                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));
                if (i + 1 < iz) {
                    result.push('${' + space);
                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));
                    result.push(space + '}');
                }
            }
            result.push('`');
            return result;
        },

        ModuleSpecifier: function (expr, precedence, flags) {
            return this.Literal(expr, precedence, flags);
        }

    };

    merge(CodeGenerator.prototype, CodeGenerator.Expression);

    CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) {
        var result, type;

        type = expr.type || Syntax.Property;

        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
            return generateVerbatim(expr, precedence);
        }

        result = this[type](expr, precedence, flags);


        if (extra.comment) {
            result = addComments(expr, result);
        }
        return toSourceNodeWhenNeeded(result, expr);
    };

    CodeGenerator.prototype.generateStatement = function (stmt, flags) {
        var result,
            fragment;

        result = this[stmt.type](stmt, flags);

        // Attach comments

        if (extra.comment) {
            result = addComments(stmt, result);
        }

        fragment = toSourceNodeWhenNeeded(result).toString();
        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\n') {
            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
        }

        return toSourceNodeWhenNeeded(result, stmt);
    };

    function generateInternal(node) {
        var codegen;

        codegen = new CodeGenerator();
        if (isStatement(node)) {
            return codegen.generateStatement(node, S_TFFF);
        }

        if (isExpression(node)) {
            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);
        }

        throw new Error('Unknown node type: ' + node.type);
    }

    function generate(node, options) {
        var defaultOptions = getDefaultOptions(), result, pair;

        if (options != null) {
            // Obsolete options
            //
            //   `options.indent`
            //   `options.base`
            //
            // Instead of them, we can use `option.format.indent`.
            if (typeof options.indent === 'string') {
                defaultOptions.format.indent.style = options.indent;
            }
            if (typeof options.base === 'number') {
                defaultOptions.format.indent.base = options.base;
            }
            options = updateDeeply(defaultOptions, options);
            indent = options.format.indent.style;
            if (typeof options.base === 'string') {
                base = options.base;
            } else {
                base = stringRepeat(indent, options.format.indent.base);
            }
        } else {
            options = defaultOptions;
            indent = options.format.indent.style;
            base = stringRepeat(indent, options.format.indent.base);
        }
        json = options.format.json;
        renumber = options.format.renumber;
        hexadecimal = json ? false : options.format.hexadecimal;
        quotes = json ? 'double' : options.format.quotes;
        escapeless = options.format.escapeless;
        newline = options.format.newline;
        space = options.format.space;
        if (options.format.compact) {
            newline = space = indent = base = '';
        }
        parentheses = options.format.parentheses;
        semicolons = options.format.semicolons;
        safeConcatenation = options.format.safeConcatenation;
        directive = options.directive;
        parse = json ? null : options.parse;
        sourceMap = options.sourceMap;
        sourceCode = options.sourceCode;
        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;
        extra = options;

        if (sourceMap) {
            if (!exports.browser) {
                // We assume environment is node.js
                // And prevent from including source-map by browserify
                SourceNode = require('source-map').SourceNode;
            } else {
                SourceNode = global.sourceMap.SourceNode;
            }
        }

        result = generateInternal(node);

        if (!sourceMap) {
            pair = {code: result.toString(), map: null};
            return options.sourceMapWithCode ? pair : pair.code;
        }


        pair = result.toStringWithSourceMap({
            file: options.file,
            sourceRoot: options.sourceMapRoot
        });

        if (options.sourceContent) {
            pair.map.setSourceContent(options.sourceMap,
                                      options.sourceContent);
        }

        if (options.sourceMapWithCode) {
            return pair;
        }

        return pair.map.toString();
    }

    FORMAT_MINIFY = {
        indent: {
            style: '',
            base: 0
        },
        renumber: true,
        hexadecimal: true,
        quotes: 'auto',
        escapeless: true,
        compact: true,
        parentheses: false,
        semicolons: false
    };

    FORMAT_DEFAULTS = getDefaultOptions().format;

    exports.version = require('./package.json').version;
    exports.generate = generate;
    exports.attachComments = estraverse.attachComments;
    exports.Precedence = updateDeeply({}, Precedence);
    exports.browser = false;
    exports.FORMAT_MINIFY = FORMAT_MINIFY;
    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
}());
/* vim: set sw=4 ts=4 et tw=80 : */

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./package.json":18,"estraverse":20,"esutils":6,"source-map":17}],3:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    function isExpression(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'ArrayExpression':
            case 'AssignmentExpression':
            case 'BinaryExpression':
            case 'CallExpression':
            case 'ConditionalExpression':
            case 'FunctionExpression':
            case 'Identifier':
            case 'Literal':
            case 'LogicalExpression':
            case 'MemberExpression':
            case 'NewExpression':
            case 'ObjectExpression':
            case 'SequenceExpression':
            case 'ThisExpression':
            case 'UnaryExpression':
            case 'UpdateExpression':
                return true;
        }
        return false;
    }

    function isIterationStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'DoWhileStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'WhileStatement':
                return true;
        }
        return false;
    }

    function isStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'BlockStatement':
            case 'BreakStatement':
            case 'ContinueStatement':
            case 'DebuggerStatement':
            case 'DoWhileStatement':
            case 'EmptyStatement':
            case 'ExpressionStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'IfStatement':
            case 'LabeledStatement':
            case 'ReturnStatement':
            case 'SwitchStatement':
            case 'ThrowStatement':
            case 'TryStatement':
            case 'VariableDeclaration':
            case 'WhileStatement':
            case 'WithStatement':
                return true;
        }
        return false;
    }

    function isSourceElement(node) {
      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
    }

    function trailingStatement(node) {
        switch (node.type) {
        case 'IfStatement':
            if (node.alternate != null) {
                return node.alternate;
            }
            return node.consequent;

        case 'LabeledStatement':
        case 'ForStatement':
        case 'ForInStatement':
        case 'WhileStatement':
        case 'WithStatement':
            return node.body;
        }
        return null;
    }

    function isProblematicIfStatement(node) {
        var current;

        if (node.type !== 'IfStatement') {
            return false;
        }
        if (node.alternate == null) {
            return false;
        }
        current = node.consequent;
        do {
            if (current.type === 'IfStatement') {
                if (current.alternate == null)  {
                    return true;
                }
            }
            current = trailingStatement(current);
        } while (current);

        return false;
    }

    module.exports = {
        isExpression: isExpression,
        isStatement: isStatement,
        isIterationStatement: isIterationStatement,
        isSourceElement: isSourceElement,
        isProblematicIfStatement: isProblematicIfStatement,

        trailingStatement: trailingStatement
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],4:[function(require,module,exports){
/*
  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

    // See `tools/generate-identifier-regex.js`.
    ES5Regex = {
        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
    };

    ES6Regex = {
        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };

    function isDecimalDigit(ch) {
        return 0x30 <= ch && ch <= 0x39;  // 0..9
    }

    function isHexDigit(ch) {
        return 0x30 <= ch && ch <= 0x39 ||  // 0..9
            0x61 <= ch && ch <= 0x66 ||     // a..f
            0x41 <= ch && ch <= 0x46;       // A..F
    }

    function isOctalDigit(ch) {
        return ch >= 0x30 && ch <= 0x37;  // 0..7
    }

    // 7.2 White Space

    NON_ASCII_WHITESPACES = [
        0x1680, 0x180E,
        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
        0x202F, 0x205F,
        0x3000,
        0xFEFF
    ];

    function isWhiteSpace(ch) {
        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
            ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
    }

    // 7.6 Identifier Names and Identifiers

    function fromCodePoint(cp) {
        if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
        var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
        return cu1 + cu2;
    }

    IDENTIFIER_START = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch) {
        IDENTIFIER_START[ch] =
            ch >= 0x61 && ch <= 0x7A ||  // a..z
            ch >= 0x41 && ch <= 0x5A ||  // A..Z
            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
    }

    IDENTIFIER_PART = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch) {
        IDENTIFIER_PART[ch] =
            ch >= 0x61 && ch <= 0x7A ||  // a..z
            ch >= 0x41 && ch <= 0x5A ||  // A..Z
            ch >= 0x30 && ch <= 0x39 ||  // 0..9
            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
    }

    function isIdentifierStartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }

    function isIdentifierPartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }

    function isIdentifierStartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }

    function isIdentifierPartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }

    module.exports = {
        isDecimalDigit: isDecimalDigit,
        isHexDigit: isHexDigit,
        isOctalDigit: isOctalDigit,
        isWhiteSpace: isWhiteSpace,
        isLineTerminator: isLineTerminator,
        isIdentifierStartES5: isIdentifierStartES5,
        isIdentifierPartES5: isIdentifierPartES5,
        isIdentifierStartES6: isIdentifierStartES6,
        isIdentifierPartES6: isIdentifierPartES6
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],5:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var code = require('./code');

    function isStrictModeReservedWordES6(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isKeywordES5(id, strict) {
        // yield should not be treated as keyword under non-strict mode.
        if (!strict && id === 'yield') {
            return false;
        }
        return isKeywordES6(id, strict);
    }

    function isKeywordES6(id, strict) {
        if (strict && isStrictModeReservedWordES6(id)) {
            return true;
        }

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    function isReservedWordES5(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
    }

    function isReservedWordES6(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    function isIdentifierNameES5(id) {
        var i, iz, ch;

        if (id.length === 0) { return false; }

        ch = id.charCodeAt(0);
        if (!code.isIdentifierStartES5(ch)) {
            return false;
        }

        for (i = 1, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (!code.isIdentifierPartES5(ch)) {
                return false;
            }
        }
        return true;
    }

    function decodeUtf16(lead, trail) {
        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
    }

    function isIdentifierNameES6(id) {
        var i, iz, ch, lowCh, check;

        if (id.length === 0) { return false; }

        check = code.isIdentifierStartES6;
        for (i = 0, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (0xD800 <= ch && ch <= 0xDBFF) {
                ++i;
                if (i >= iz) { return false; }
                lowCh = id.charCodeAt(i);
                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
                    return false;
                }
                ch = decodeUtf16(ch, lowCh);
            }
            if (!check(ch)) {
                return false;
            }
            check = code.isIdentifierPartES6;
        }
        return true;
    }

    function isIdentifierES5(id, strict) {
        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
    }

    function isIdentifierES6(id, strict) {
        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
    }

    module.exports = {
        isKeywordES5: isKeywordES5,
        isKeywordES6: isKeywordES6,
        isReservedWordES5: isReservedWordES5,
        isReservedWordES6: isReservedWordES6,
        isRestrictedWord: isRestrictedWord,
        isIdentifierNameES5: isIdentifierNameES5,
        isIdentifierNameES6: isIdentifierNameES6,
        isIdentifierES5: isIdentifierES5,
        isIdentifierES6: isIdentifierES6
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./code":4}],6:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


(function () {
    'use strict';

    exports.ast = require('./ast');
    exports.code = require('./code');
    exports.keyword = require('./keyword');
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./ast":3,"./code":4,"./keyword":5}],7:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;

},{"./util":16}],8:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = require('./base64');

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};

},{"./base64":9}],9:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};

},{}],10:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};

},{}],11:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;

},{"./util":16}],12:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};

},{}],13:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var binarySearch = require('./binary-search');
var ArraySet = require('./array-set').ArraySet;
var base64VLQ = require('./base64-vlq');
var quickSort = require('./quick-sort').quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

},{"./array-set":7,"./base64-vlq":8,"./binary-search":10,"./quick-sort":12,"./util":16}],14:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = require('./base64-vlq');
var util = require('./util');
var ArraySet = require('./array-set').ArraySet;
var MappingList = require('./mapping-list').MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;

},{"./array-set":7,"./base64-vlq":8,"./mapping-list":11,"./util":16}],15:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
var util = require('./util');

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;

},{"./source-map-generator":14,"./util":16}],16:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;

},{}],17:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./lib/source-node').SourceNode;

},{"./lib/source-map-consumer":13,"./lib/source-map-generator":14,"./lib/source-node":15}],18:[function(require,module,exports){
module.exports={
  "_from": "escodegen@^1.8.x",
  "_id": "escodegen@1.11.0",
  "_inBundle": false,
  "_integrity": "sha512-IeMV45ReixHS53K/OmfKAIztN/igDHzTJUhZM3k1jMhIZWjk45SMwAtBsEXiJp3vSPmTcu6CXn7mDvFHRN66fw==",
  "_location": "/escodegen",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "escodegen@^1.8.x",
    "name": "escodegen",
    "escapedName": "escodegen",
    "rawSpec": "^1.8.x",
    "saveSpec": null,
    "fetchSpec": "^1.8.x"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/static-eval"
  ],
  "_resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.11.0.tgz",
  "_shasum": "b27a9389481d5bfd5bec76f7bb1eb3f8f4556589",
  "_spec": "escodegen@^1.8.x",
  "_where": "/data/chalmers/project/jsflow",
  "bin": {
    "esgenerate": "./bin/esgenerate.js",
    "escodegen": "./bin/escodegen.js"
  },
  "bugs": {
    "url": "https://github.com/estools/escodegen/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "esprima": "^3.1.3",
    "estraverse": "^4.2.0",
    "esutils": "^2.0.2",
    "optionator": "^0.8.1",
    "source-map": "~0.6.1"
  },
  "deprecated": false,
  "description": "ECMAScript code generator",
  "devDependencies": {
    "acorn": "^4.0.4",
    "bluebird": "^3.4.7",
    "bower-registry-client": "^1.0.0",
    "chai": "^3.5.0",
    "commonjs-everywhere": "^0.9.7",
    "gulp": "^3.8.10",
    "gulp-eslint": "^3.0.1",
    "gulp-mocha": "^3.0.1",
    "semver": "^5.1.0"
  },
  "engines": {
    "node": ">=4.0"
  },
  "files": [
    "LICENSE.BSD",
    "README.md",
    "bin",
    "escodegen.js",
    "package.json"
  ],
  "homepage": "http://github.com/estools/escodegen",
  "license": "BSD-2-Clause",
  "main": "escodegen.js",
  "maintainers": [
    {
      "name": "Yusuke Suzuki",
      "email": "utatane.tea@gmail.com",
      "url": "http://github.com/Constellation"
    }
  ],
  "name": "escodegen",
  "optionalDependencies": {
    "source-map": "~0.6.1"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/estools/escodegen.git"
  },
  "scripts": {
    "build": "cjsify -a path: tools/entry-point.js > escodegen.browser.js",
    "build-min": "cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js",
    "lint": "gulp lint",
    "release": "node tools/release.js",
    "test": "gulp travis",
    "unit-test": "gulp test"
  },
  "version": "1.11.0"
}

},{}],19:[function(require,module,exports){
/*
  Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.

    /* istanbul ignore next */
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.esprima = {}));
    }
}(this, function (exports) {
    'use strict';

    var Token,
        TokenName,
        FnExprTokens,
        Syntax,
        PlaceHolders,
        Messages,
        Regex,
        source,
        strict,
        index,
        lineNumber,
        lineStart,
        hasLineTerminator,
        lastIndex,
        lastLineNumber,
        lastLineStart,
        startIndex,
        startLineNumber,
        startLineStart,
        scanning,
        length,
        lookahead,
        state,
        extra,
        isBindingElement,
        isAssignmentTarget,
        firstCoverInitializedNameError;

    Token = {
        BooleanLiteral: 1,
        EOF: 2,
        Identifier: 3,
        Keyword: 4,
        NullLiteral: 5,
        NumericLiteral: 6,
        Punctuator: 7,
        StringLiteral: 8,
        RegularExpression: 9,
        Template: 10
    };

    TokenName = {};
    TokenName[Token.BooleanLiteral] = 'Boolean';
    TokenName[Token.EOF] = '<end>';
    TokenName[Token.Identifier] = 'Identifier';
    TokenName[Token.Keyword] = 'Keyword';
    TokenName[Token.NullLiteral] = 'Null';
    TokenName[Token.NumericLiteral] = 'Numeric';
    TokenName[Token.Punctuator] = 'Punctuator';
    TokenName[Token.StringLiteral] = 'String';
    TokenName[Token.RegularExpression] = 'RegularExpression';
    TokenName[Token.Template] = 'Template';

    // A function following one of those tokens is an expression.
    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
                    'return', 'case', 'delete', 'throw', 'void',
                    // assignment operators
                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
                    '&=', '|=', '^=', ',',
                    // binary/unary operators
                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
                    '<=', '<', '>', '!=', '!=='];

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    PlaceHolders = {
        ArrowParameterPlaceHolder: 'ArrowParameterPlaceHolder'
    };

    // Error messages should be identical to V8.
    Messages = {
        UnexpectedToken: 'Unexpected token %0',
        UnexpectedNumber: 'Unexpected number',
        UnexpectedString: 'Unexpected string',
        UnexpectedIdentifier: 'Unexpected identifier',
        UnexpectedReserved: 'Unexpected reserved word',
        UnexpectedTemplate: 'Unexpected quasi %0',
        UnexpectedEOS: 'Unexpected end of input',
        NewlineAfterThrow: 'Illegal newline after throw',
        InvalidRegExp: 'Invalid regular expression',
        UnterminatedRegExp: 'Invalid regular expression: missing /',
        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
        InvalidLHSInForIn: 'Invalid left-hand side in for-in',
        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NoCatchOrFinally: 'Missing catch or finally after try',
        UnknownLabel: 'Undefined label \'%0\'',
        Redeclaration: '%0 \'%1\' has already been declared',
        IllegalContinue: 'Illegal continue statement',
        IllegalBreak: 'Illegal break statement',
        IllegalReturn: 'Illegal return statement',
        StrictModeWith: 'Strict mode code may not include a with statement',
        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
        StrictVarName: 'Variable name may not be eval or arguments in strict mode',
        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
        StrictDelete: 'Delete of an unqualified identifier in strict mode.',
        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictReservedWord: 'Use of future reserved word in strict mode',
        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
        DefaultRestParameter: 'Unexpected token =',
        ObjectPatternAsRestParameter: 'Unexpected token {',
        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
        ConstructorSpecialMethod: 'Class constructor may not be an accessor',
        DuplicateConstructor: 'A class may only have one constructor',
        StaticPrototype: 'Classes may not have static property named prototype',
        MissingFromClause: 'Unexpected token',
        NoAsAfterImportNamespace: 'Unexpected token',
        InvalidModuleSpecifier: 'Unexpected token',
        IllegalImportDeclaration: 'Unexpected token',
        IllegalExportDeclaration: 'Unexpected token',
        DuplicateBinding: 'Duplicate binding %0'
    };

    // See also tools/generate-unicode-regex.js.
    Regex = {
        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,

        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };

    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
        /* istanbul ignore if */
        if (!condition) {
            throw new Error('ASSERT: ' + message);
        }
    }

    function isDecimalDigit(ch) {
        return (ch >= 0x30 && ch <= 0x39);   // 0..9
    }

    function isHexDigit(ch) {
        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
        return '01234567'.indexOf(ch) >= 0;
    }

    function octalToDecimal(ch) {
        // \0 is not octal escape sequence
        var octal = (ch !== '0'), code = '01234567'.indexOf(ch);

        if (index < length && isOctalDigit(source[index])) {
            octal = true;
            code = code * 8 + '01234567'.indexOf(source[index++]);

            // 3 digits are only allowed when string starts
            // with 0, 1, 2, 3
            if ('0123'.indexOf(ch) >= 0 &&
                    index < length &&
                    isOctalDigit(source[index])) {
                code = code * 8 + '01234567'.indexOf(source[index++]);
            }
        }

        return {
            code: code,
            octal: octal
        };
    }

    // ECMA-262 11.2 White Space

    function isWhiteSpace(ch) {
        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
    }

    // ECMA-262 11.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
    }

    // ECMA-262 11.6 Identifier Names and Identifiers

    function fromCodePoint(cp) {
        return (cp < 0x10000) ? String.fromCharCode(cp) :
            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
            String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
    }

    function isIdentifierStart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch >= 0x30 && ch <= 0x39) ||         // 0..9
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch)));
    }

    // ECMA-262 11.6.2.2 Future Reserved Words

    function isFutureReservedWord(id) {
        switch (id) {
        case 'enum':
        case 'export':
        case 'import':
        case 'super':
            return true;
        default:
            return false;
        }
    }

    function isStrictModeReservedWord(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'yield':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    // ECMA-262 11.6.2.1 Keywords

    function isKeyword(id) {
        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') ||
                (id === 'try') || (id === 'let');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    // ECMA-262 11.4 Comments

    function addComment(type, value, start, end, loc) {
        var comment;

        assert(typeof start === 'number', 'Comment must have valid position');

        state.lastCommentStart = start;

        comment = {
            type: type,
            value: value
        };
        if (extra.range) {
            comment.range = [start, end];
        }
        if (extra.loc) {
            comment.loc = loc;
        }
        extra.comments.push(comment);
        if (extra.attachComment) {
            extra.leadingComments.push(comment);
            extra.trailingComments.push(comment);
        }
        if (extra.tokenize) {
            comment.type = comment.type + 'Comment';
            if (extra.delegate) {
                comment = extra.delegate(comment);
            }
            extra.tokens.push(comment);
        }
    }

    function skipSingleLineComment(offset) {
        var start, loc, ch, comment;

        start = index - offset;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart - offset
            }
        };

        while (index < length) {
            ch = source.charCodeAt(index);
            ++index;
            if (isLineTerminator(ch)) {
                hasLineTerminator = true;
                if (extra.comments) {
                    comment = source.slice(start + offset, index - 1);
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart - 1
                    };
                    addComment('Line', comment, start, index - 1, loc);
                }
                if (ch === 13 && source.charCodeAt(index) === 10) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                return;
            }
        }

        if (extra.comments) {
            comment = source.slice(start + offset, index);
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            addComment('Line', comment, start, index, loc);
        }
    }

    function skipMultiLineComment() {
        var start, loc, ch, comment;

        if (extra.comments) {
            start = index - 2;
            loc = {
                start: {
                    line: lineNumber,
                    column: index - lineStart - 2
                }
            };
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (isLineTerminator(ch)) {
                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
                    ++index;
                }
                hasLineTerminator = true;
                ++lineNumber;
                ++index;
                lineStart = index;
            } else if (ch === 0x2A) {
                // Block comment ends with '*/'.
                if (source.charCodeAt(index + 1) === 0x2F) {
                    ++index;
                    ++index;
                    if (extra.comments) {
                        comment = source.slice(start + 2, index - 2);
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        addComment('Block', comment, start, index, loc);
                    }
                    return;
                }
                ++index;
            } else {
                ++index;
            }
        }

        // Ran off the end of the file - the whole thing is a comment
        if (extra.comments) {
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            comment = source.slice(start + 2, index);
            addComment('Block', comment, start, index, loc);
        }
        tolerateUnexpectedToken();
    }

    function skipComment() {
        var ch, start;
        hasLineTerminator = false;

        start = (index === 0);
        while (index < length) {
            ch = source.charCodeAt(index);

            if (isWhiteSpace(ch)) {
                ++index;
            } else if (isLineTerminator(ch)) {
                hasLineTerminator = true;
                ++index;
                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                start = true;
            } else if (ch === 0x2F) { // U+002F is '/'
                ch = source.charCodeAt(index + 1);
                if (ch === 0x2F) {
                    ++index;
                    ++index;
                    skipSingleLineComment(2);
                    start = true;
                } else if (ch === 0x2A) {  // U+002A is '*'
                    ++index;
                    ++index;
                    skipMultiLineComment();
                } else {
                    break;
                }
            } else if (start && ch === 0x2D) { // U+002D is '-'
                // U+003E is '>'
                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
                    // '-->' is a single-line comment
                    index += 3;
                    skipSingleLineComment(3);
                } else {
                    break;
                }
            } else if (ch === 0x3C) { // U+003C is '<'
                if (source.slice(index + 1, index + 4) === '!--') {
                    ++index; // `<`
                    ++index; // `!`
                    ++index; // `-`
                    ++index; // `-`
                    skipSingleLineComment(4);
                } else {
                    break;
                }
            } else {
                break;
            }
        }
    }

    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;

        len = (prefix === 'u') ? 4 : 2;
        for (i = 0; i < len; ++i) {
            if (index < length && isHexDigit(source[index])) {
                ch = source[index++];
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else {
                return '';
            }
        }
        return String.fromCharCode(code);
    }

    function scanUnicodeCodePointEscape() {
        var ch, code;

        ch = source[index];
        code = 0;

        // At least, one hex digit is required.
        if (ch === '}') {
            throwUnexpectedToken();
        }

        while (index < length) {
            ch = source[index++];
            if (!isHexDigit(ch)) {
                break;
            }
            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
        }

        if (code > 0x10FFFF || ch !== '}') {
            throwUnexpectedToken();
        }

        return fromCodePoint(code);
    }

    function codePointAt(i) {
        var cp, first, second;

        cp = source.charCodeAt(i);
        if (cp >= 0xD800 && cp <= 0xDBFF) {
            second = source.charCodeAt(i + 1);
            if (second >= 0xDC00 && second <= 0xDFFF) {
                first = cp;
                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            }
        }

        return cp;
    }

    function getComplexIdentifier() {
        var cp, ch, id;

        cp = codePointAt(index);
        id = fromCodePoint(cp);
        index += id.length;

        // '\u' (U+005C, U+0075) denotes an escaped character.
        if (cp === 0x5C) {
            if (source.charCodeAt(index) !== 0x75) {
                throwUnexpectedToken();
            }
            ++index;
            if (source[index] === '{') {
                ++index;
                ch = scanUnicodeCodePointEscape();
            } else {
                ch = scanHexEscape('u');
                cp = ch.charCodeAt(0);
                if (!ch || ch === '\\' || !isIdentifierStart(cp)) {
                    throwUnexpectedToken();
                }
            }
            id = ch;
        }

        while (index < length) {
            cp = codePointAt(index);
            if (!isIdentifierPart(cp)) {
                break;
            }
            ch = fromCodePoint(cp);
            id += ch;
            index += ch.length;

            // '\u' (U+005C, U+0075) denotes an escaped character.
            if (cp === 0x5C) {
                id = id.substr(0, id.length - 1);
                if (source.charCodeAt(index) !== 0x75) {
                    throwUnexpectedToken();
                }
                ++index;
                if (source[index] === '{') {
                    ++index;
                    ch = scanUnicodeCodePointEscape();
                } else {
                    ch = scanHexEscape('u');
                    cp = ch.charCodeAt(0);
                    if (!ch || ch === '\\' || !isIdentifierPart(cp)) {
                        throwUnexpectedToken();
                    }
                }
                id += ch;
            }
        }

        return id;
    }

    function getIdentifier() {
        var start, ch;

        start = index++;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (ch === 0x5C) {
                // Blackslash (U+005C) marks Unicode escape sequence.
                index = start;
                return getComplexIdentifier();
            } else if (ch >= 0xD800 && ch < 0xDFFF) {
                // Need to handle surrogate pairs.
                index = start;
                return getComplexIdentifier();
            }
            if (isIdentifierPart(ch)) {
                ++index;
            } else {
                break;
            }
        }

        return source.slice(start, index);
    }

    function scanIdentifier() {
        var start, id, type;

        start = index;

        // Backslash (U+005C) starts an escaped character.
        id = (source.charCodeAt(index) === 0x5C) ? getComplexIdentifier() : getIdentifier();

        // There is no keyword or literal with only one character.
        // Thus, it must be an identifier.
        if (id.length === 1) {
            type = Token.Identifier;
        } else if (isKeyword(id)) {
            type = Token.Keyword;
        } else if (id === 'null') {
            type = Token.NullLiteral;
        } else if (id === 'true' || id === 'false') {
            type = Token.BooleanLiteral;
        } else {
            type = Token.Identifier;
        }

        return {
            type: type,
            value: id,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }


    // ECMA-262 11.7 Punctuators

    function scanPunctuator() {
        var token, str;

        token = {
            type: Token.Punctuator,
            value: '',
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: index,
            end: index
        };

        // Check for most common single-character punctuators.
        str = source[index];
        switch (str) {

        case '(':
            if (extra.tokenize) {
                extra.openParenToken = extra.tokenValues.length;
            }
            ++index;
            break;

        case '{':
            if (extra.tokenize) {
                extra.openCurlyToken = extra.tokenValues.length;
            }
            state.curlyStack.push('{');
            ++index;
            break;

        case '.':
            ++index;
            if (source[index] === '.' && source[index + 1] === '.') {
                // Spread operator: ...
                index += 2;
                str = '...';
            }
            break;

        case '}':
            ++index;
            state.curlyStack.pop();
            break;
        case ')':
        case ';':
        case ',':
        case '[':
        case ']':
        case ':':
        case '?':
        case '~':
            ++index;
            break;

        default:
            // 4-character punctuator.
            str = source.substr(index, 4);
            if (str === '>>>=') {
                index += 4;
            } else {

                // 3-character punctuators.
                str = str.substr(0, 3);
                if (str === '===' || str === '!==' || str === '>>>' ||
                    str === '<<=' || str === '>>=') {
                    index += 3;
                } else {

                    // 2-character punctuators.
                    str = str.substr(0, 2);
                    if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
                        str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
                        str === '++' || str === '--' || str === '<<' || str === '>>' ||
                        str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
                        str === '<=' || str === '>=' || str === '=>') {
                        index += 2;
                    } else {

                        // 1-character punctuators.
                        str = source[index];
                        if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                            ++index;
                        }
                    }
                }
            }
        }

        if (index === token.start) {
            throwUnexpectedToken();
        }

        token.end = index;
        token.value = str;
        return token;
    }

    // ECMA-262 11.8.3 Numeric Literals

    function scanHexLiteral(start) {
        var number = '';

        while (index < length) {
            if (!isHexDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            throwUnexpectedToken();
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt('0x' + number, 16),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanBinaryLiteral(start) {
        var ch, number;

        number = '';

        while (index < length) {
            ch = source[index];
            if (ch !== '0' && ch !== '1') {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            // only 0b or 0B
            throwUnexpectedToken();
        }

        if (index < length) {
            ch = source.charCodeAt(index);
            /* istanbul ignore else */
            if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
                throwUnexpectedToken();
            }
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 2),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanOctalLiteral(prefix, start) {
        var number, octal;

        if (isOctalDigit(prefix)) {
            octal = true;
            number = '0' + source[index++];
        } else {
            octal = false;
            ++index;
            number = '';
        }

        while (index < length) {
            if (!isOctalDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (!octal && number.length === 0) {
            // only 0o or 0O
            throwUnexpectedToken();
        }

        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 8),
            octal: octal,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function isImplicitOctalLiteral() {
        var i, ch;

        // Implicit octal, unless there is a non-octal digit.
        // (Annex B.1.1 on Numeric Literals)
        for (i = index + 1; i < length; ++i) {
            ch = source[i];
            if (ch === '8' || ch === '9') {
                return false;
            }
            if (!isOctalDigit(ch)) {
                return true;
            }
        }

        return true;
    }

    function scanNumericLiteral() {
        var number, start, ch;

        ch = source[index];
        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
            'Numeric literal must start with a decimal digit or a decimal point');

        start = index;
        number = '';
        if (ch !== '.') {
            number = source[index++];
            ch = source[index];

            // Hex number starts with '0x'.
            // Octal number starts with '0'.
            // Octal number in ES6 starts with '0o'.
            // Binary number in ES6 starts with '0b'.
            if (number === '0') {
                if (ch === 'x' || ch === 'X') {
                    ++index;
                    return scanHexLiteral(start);
                }
                if (ch === 'b' || ch === 'B') {
                    ++index;
                    return scanBinaryLiteral(start);
                }
                if (ch === 'o' || ch === 'O') {
                    return scanOctalLiteral(ch, start);
                }

                if (isOctalDigit(ch)) {
                    if (isImplicitOctalLiteral()) {
                        return scanOctalLiteral(ch, start);
                    }
                }
            }

            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === '.') {
            number += source[index++];
            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === 'e' || ch === 'E') {
            number += source[index++];

            ch = source[index];
            if (ch === '+' || ch === '-') {
                number += source[index++];
            }
            if (isDecimalDigit(source.charCodeAt(index))) {
                while (isDecimalDigit(source.charCodeAt(index))) {
                    number += source[index++];
                }
            } else {
                throwUnexpectedToken();
            }
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseFloat(number),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.4 String Literals

    function scanStringLiteral() {
        var str = '', quote, start, ch, unescaped, octToDec, octal = false;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        while (index < length) {
            ch = source[index++];

            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            str += scanUnicodeCodePointEscape();
                        } else {
                            unescaped = scanHexEscape(ch);
                            if (!unescaped) {
                                throw throwUnexpectedToken();
                            }
                            str += unescaped;
                        }
                        break;
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\x0B';
                        break;
                    case '8':
                    case '9':
                        str += ch;
                        tolerateUnexpectedToken();
                        break;

                    default:
                        if (isOctalDigit(ch)) {
                            octToDec = octalToDecimal(ch);

                            octal = octToDec.octal || octal;
                            str += String.fromCharCode(octToDec.code);
                        } else {
                            str += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                break;
            } else {
                str += ch;
            }
        }

        if (quote !== '') {
            index = start;
            throwUnexpectedToken();
        }

        return {
            type: Token.StringLiteral,
            value: str,
            octal: octal,
            lineNumber: startLineNumber,
            lineStart: startLineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.6 Template Literal Lexical Components

    function scanTemplate() {
        var cooked = '', ch, start, rawOffset, terminated, head, tail, restore, unescaped;

        terminated = false;
        tail = false;
        start = index;
        head = (source[index] === '`');
        rawOffset = 2;

        ++index;

        while (index < length) {
            ch = source[index++];
            if (ch === '`') {
                rawOffset = 1;
                tail = true;
                terminated = true;
                break;
            } else if (ch === '$') {
                if (source[index] === '{') {
                    state.curlyStack.push('${');
                    ++index;
                    terminated = true;
                    break;
                }
                cooked += ch;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'n':
                        cooked += '\n';
                        break;
                    case 'r':
                        cooked += '\r';
                        break;
                    case 't':
                        cooked += '\t';
                        break;
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            cooked += scanUnicodeCodePointEscape();
                        } else {
                            restore = index;
                            unescaped = scanHexEscape(ch);
                            if (unescaped) {
                                cooked += unescaped;
                            } else {
                                index = restore;
                                cooked += ch;
                            }
                        }
                        break;
                    case 'b':
                        cooked += '\b';
                        break;
                    case 'f':
                        cooked += '\f';
                        break;
                    case 'v':
                        cooked += '\v';
                        break;

                    default:
                        if (ch === '0') {
                            if (isDecimalDigit(source.charCodeAt(index))) {
                                // Illegal: \01 \02 and so on
                                throwError(Messages.TemplateOctalLiteral);
                            }
                            cooked += '\0';
                        } else if (isOctalDigit(ch)) {
                            // Illegal: \1 \2
                            throwError(Messages.TemplateOctalLiteral);
                        } else {
                            cooked += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                ++lineNumber;
                if (ch === '\r' && source[index] === '\n') {
                    ++index;
                }
                lineStart = index;
                cooked += '\n';
            } else {
                cooked += ch;
            }
        }

        if (!terminated) {
            throwUnexpectedToken();
        }

        if (!head) {
            state.curlyStack.pop();
        }

        return {
            type: Token.Template,
            value: {
                cooked: cooked,
                raw: source.slice(start + 1, index - rawOffset)
            },
            head: head,
            tail: tail,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.5 Regular Expression Literals

    function testRegExp(pattern, flags) {
        // The BMP character to use as a replacement for astral symbols when
        // translating an ES6 "u"-flagged pattern to an ES5-compatible
        // approximation.
        // Note: replacing with '\uFFFF' enables false positives in unlikely
        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
        // pattern that would not be detected by this substitution.
        var astralSubstitute = '\uFFFF',
            tmp = pattern;

        if (flags.indexOf('u') >= 0) {
            tmp = tmp
                // Replace every Unicode escape sequence with the equivalent
                // BMP character or a constant ASCII code point in the case of
                // astral symbols. (See the above note on `astralSubstitute`
                // for more information.)
                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
                    var codePoint = parseInt($1 || $2, 16);
                    if (codePoint > 0x10FFFF) {
                        throwUnexpectedToken(null, Messages.InvalidRegExp);
                    }
                    if (codePoint <= 0xFFFF) {
                        return String.fromCharCode(codePoint);
                    }
                    return astralSubstitute;
                })
                // Replace each paired surrogate with a single ASCII symbol to
                // avoid throwing on regular expressions that are only valid in
                // combination with the "u" flag.
                .replace(
                    /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
                    astralSubstitute
                );
        }

        // First, detect invalid regular expressions.
        try {
            RegExp(tmp);
        } catch (e) {
            throwUnexpectedToken(null, Messages.InvalidRegExp);
        }

        // Return a regular expression object for this pattern-flag pair, or
        // `null` in case the current environment doesn't support the flags it
        // uses.
        try {
            return new RegExp(pattern, flags);
        } catch (exception) {
            /* istanbul ignore next */
            return null;
        }
    }

    function scanRegExpBody() {
        var ch, str, classMarker, terminated, body;

        ch = source[index];
        assert(ch === '/', 'Regular expression literal must start with a slash');
        str = source[index++];

        classMarker = false;
        terminated = false;
        while (index < length) {
            ch = source[index++];
            str += ch;
            if (ch === '\\') {
                ch = source[index++];
                // ECMA-262 7.8.5
                if (isLineTerminator(ch.charCodeAt(0))) {
                    throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                }
                str += ch;
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                throwUnexpectedToken(null, Messages.UnterminatedRegExp);
            } else if (classMarker) {
                if (ch === ']') {
                    classMarker = false;
                }
            } else {
                if (ch === '/') {
                    terminated = true;
                    break;
                } else if (ch === '[') {
                    classMarker = true;
                }
            }
        }

        if (!terminated) {
            throwUnexpectedToken(null, Messages.UnterminatedRegExp);
        }

        // Exclude leading and trailing slash.
        body = str.substr(1, str.length - 2);
        return {
            value: body,
            literal: str
        };
    }

    function scanRegExpFlags() {
        var ch, str, flags, restore;

        str = '';
        flags = '';
        while (index < length) {
            ch = source[index];
            if (!isIdentifierPart(ch.charCodeAt(0))) {
                break;
            }

            ++index;
            if (ch === '\\' && index < length) {
                ch = source[index];
                if (ch === 'u') {
                    ++index;
                    restore = index;
                    ch = scanHexEscape('u');
                    if (ch) {
                        flags += ch;
                        for (str += '\\u'; restore < index; ++restore) {
                            str += source[restore];
                        }
                    } else {
                        index = restore;
                        flags += 'u';
                        str += '\\u';
                    }
                    tolerateUnexpectedToken();
                } else {
                    str += '\\';
                    tolerateUnexpectedToken();
                }
            } else {
                flags += ch;
                str += ch;
            }
        }

        return {
            value: flags,
            literal: str
        };
    }

    function scanRegExp() {
        var start, body, flags, value;
        scanning = true;

        lookahead = null;
        skipComment();
        start = index;

        body = scanRegExpBody();
        flags = scanRegExpFlags();
        value = testRegExp(body.value, flags.value);
        scanning = false;
        if (extra.tokenize) {
            return {
                type: Token.RegularExpression,
                value: value,
                regex: {
                    pattern: body.value,
                    flags: flags.value
                },
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        return {
            literal: body.literal + flags.literal,
            value: value,
            regex: {
                pattern: body.value,
                flags: flags.value
            },
            start: start,
            end: index
        };
    }

    function collectRegex() {
        var pos, loc, regex, token;

        skipComment();

        pos = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        regex = scanRegExp();

        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        /* istanbul ignore next */
        if (!extra.tokenize) {
            // Pop the previous token, which is likely '/' or '/='
            if (extra.tokens.length > 0) {
                token = extra.tokens[extra.tokens.length - 1];
                if (token.range[0] === pos && token.type === 'Punctuator') {
                    if (token.value === '/' || token.value === '/=') {
                        extra.tokens.pop();
                    }
                }
            }

            extra.tokens.push({
                type: 'RegularExpression',
                value: regex.literal,
                regex: regex.regex,
                range: [pos, index],
                loc: loc
            });
        }

        return regex;
    }

    function isIdentifierName(token) {
        return token.type === Token.Identifier ||
            token.type === Token.Keyword ||
            token.type === Token.BooleanLiteral ||
            token.type === Token.NullLiteral;
    }

    // Using the following algorithm:
    // https://github.com/mozilla/sweet.js/wiki/design

    function advanceSlash() {
        var regex, previous, check;

        function testKeyword(value) {
            return value && (value.length > 1) && (value[0] >= 'a') && (value[0] <= 'z');
        }

        previous = extra.tokenValues[extra.tokenValues.length - 1];
        regex = (previous !== null);

        switch (previous) {
        case 'this':
        case ']':
            regex = false;
            break;

        case ')':
            check = extra.tokenValues[extra.openParenToken - 1];
            regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');
            break;

        case '}':
            // Dividing a function by anything makes little sense,
            // but we have to check for that.
            regex = false;
            if (testKeyword(extra.tokenValues[extra.openCurlyToken - 3])) {
                // Anonymous function, e.g. function(){} /42
                check = extra.tokenValues[extra.openCurlyToken - 4];
                regex = check ? (FnExprTokens.indexOf(check) < 0) : false;
            } else if (testKeyword(extra.tokenValues[extra.openCurlyToken - 4])) {
                // Named function, e.g. function f(){} /42/
                check = extra.tokenValues[extra.openCurlyToken - 5];
                regex = check ? (FnExprTokens.indexOf(check) < 0) : true;
            }
        }

        return regex ? collectRegex() : scanPunctuator();
    }

    function advance() {
        var cp, token;

        if (index >= length) {
            return {
                type: Token.EOF,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: index,
                end: index
            };
        }

        cp = source.charCodeAt(index);

        if (isIdentifierStart(cp)) {
            token = scanIdentifier();
            if (strict && isStrictModeReservedWord(token.value)) {
                token.type = Token.Keyword;
            }
            return token;
        }

        // Very common: ( and ) and ;
        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
            return scanPunctuator();
        }

        // String literal starts with single quote (U+0027) or double quote (U+0022).
        if (cp === 0x27 || cp === 0x22) {
            return scanStringLiteral();
        }

        // Dot (.) U+002E can also start a floating-point number, hence the need
        // to check the next character.
        if (cp === 0x2E) {
            if (isDecimalDigit(source.charCodeAt(index + 1))) {
                return scanNumericLiteral();
            }
            return scanPunctuator();
        }

        if (isDecimalDigit(cp)) {
            return scanNumericLiteral();
        }

        // Slash (/) U+002F can also start a regex.
        if (extra.tokenize && cp === 0x2F) {
            return advanceSlash();
        }

        // Template literals start with ` (U+0060) for template head
        // or } (U+007D) for template middle or template tail.
        if (cp === 0x60 || (cp === 0x7D && state.curlyStack[state.curlyStack.length - 1] === '${')) {
            return scanTemplate();
        }

        // Possible identifier start in a surrogate pair.
        if (cp >= 0xD800 && cp < 0xDFFF) {
            cp = codePointAt(index);
            if (isIdentifierStart(cp)) {
                return scanIdentifier();
            }
        }

        return scanPunctuator();
    }

    function collectToken() {
        var loc, token, value, entry;

        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        token = advance();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (token.type !== Token.EOF) {
            value = source.slice(token.start, token.end);
            entry = {
                type: TokenName[token.type],
                value: value,
                range: [token.start, token.end],
                loc: loc
            };
            if (token.regex) {
                entry.regex = {
                    pattern: token.regex.pattern,
                    flags: token.regex.flags
                };
            }
            if (extra.tokenValues) {
                extra.tokenValues.push((entry.type === 'Punctuator' || entry.type === 'Keyword') ? entry.value : null);
            }
            if (extra.tokenize) {
                if (!extra.range) {
                    delete entry.range;
                }
                if (!extra.loc) {
                    delete entry.loc;
                }
                if (extra.delegate) {
                    entry = extra.delegate(entry);
                }
            }
            extra.tokens.push(entry);
        }

        return token;
    }

    function lex() {
        var token;
        scanning = true;

        lastIndex = index;
        lastLineNumber = lineNumber;
        lastLineStart = lineStart;

        skipComment();

        token = lookahead;

        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        scanning = false;
        return token;
    }

    function peek() {
        scanning = true;

        skipComment();

        lastIndex = index;
        lastLineNumber = lineNumber;
        lastLineStart = lineStart;

        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        scanning = false;
    }

    function Position() {
        this.line = startLineNumber;
        this.column = startIndex - startLineStart;
    }

    function SourceLocation() {
        this.start = new Position();
        this.end = null;
    }

    function WrappingSourceLocation(startToken) {
        this.start = {
            line: startToken.lineNumber,
            column: startToken.start - startToken.lineStart
        };
        this.end = null;
    }

    function Node() {
        if (extra.range) {
            this.range = [startIndex, 0];
        }
        if (extra.loc) {
            this.loc = new SourceLocation();
        }
    }

    function WrappingNode(startToken) {
        if (extra.range) {
            this.range = [startToken.start, 0];
        }
        if (extra.loc) {
            this.loc = new WrappingSourceLocation(startToken);
        }
    }

    WrappingNode.prototype = Node.prototype = {

        processComment: function () {
            var lastChild,
                innerComments,
                leadingComments,
                trailingComments,
                bottomRight = extra.bottomRightStack,
                i,
                comment,
                last = bottomRight[bottomRight.length - 1];

            if (this.type === Syntax.Program) {
                if (this.body.length > 0) {
                    return;
                }
            }
            /**
             * patch innnerComments for properties empty block
             * `function a() {/** comments **\/}`
             */

            if (this.type === Syntax.BlockStatement && this.body.length === 0) {
                innerComments = [];
                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                    comment = extra.leadingComments[i];
                    if (this.range[1] >= comment.range[1]) {
                        innerComments.unshift(comment);
                        extra.leadingComments.splice(i, 1);
                        extra.trailingComments.splice(i, 1);
                    }
                }
                if (innerComments.length) {
                    this.innerComments = innerComments;
                    //bottomRight.push(this);
                    return;
                }
            }

            if (extra.trailingComments.length > 0) {
                trailingComments = [];
                for (i = extra.trailingComments.length - 1; i >= 0; --i) {
                    comment = extra.trailingComments[i];
                    if (comment.range[0] >= this.range[1]) {
                        trailingComments.unshift(comment);
                        extra.trailingComments.splice(i, 1);
                    }
                }
                extra.trailingComments = [];
            } else {
                if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {
                    trailingComments = last.trailingComments;
                    delete last.trailingComments;
                }
            }

            // Eating the stack.
            while (last && last.range[0] >= this.range[0]) {
                lastChild = bottomRight.pop();
                last = bottomRight[bottomRight.length - 1];
            }

            if (lastChild) {
                if (lastChild.leadingComments) {
                    leadingComments = [];
                    for (i = lastChild.leadingComments.length - 1; i >= 0; --i) {
                        comment = lastChild.leadingComments[i];
                        if (comment.range[1] <= this.range[0]) {
                            leadingComments.unshift(comment);
                            lastChild.leadingComments.splice(i, 1);
                        }
                    }

                    if (!lastChild.leadingComments.length) {
                        lastChild.leadingComments = undefined;
                    }
                }
            } else if (extra.leadingComments.length > 0) {
                leadingComments = [];
                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                    comment = extra.leadingComments[i];
                    if (comment.range[1] <= this.range[0]) {
                        leadingComments.unshift(comment);
                        extra.leadingComments.splice(i, 1);
                    }
                }
            }


            if (leadingComments && leadingComments.length > 0) {
                this.leadingComments = leadingComments;
            }
            if (trailingComments && trailingComments.length > 0) {
                this.trailingComments = trailingComments;
            }

            bottomRight.push(this);
        },

        finish: function () {
            if (extra.range) {
                this.range[1] = lastIndex;
            }
            if (extra.loc) {
                this.loc.end = {
                    line: lastLineNumber,
                    column: lastIndex - lastLineStart
                };
                if (extra.source) {
                    this.loc.source = extra.source;
                }
            }

            if (extra.attachComment) {
                this.processComment();
            }
        },

        finishArrayExpression: function (elements) {
            this.type = Syntax.ArrayExpression;
            this.elements = elements;
            this.finish();
            return this;
        },

        finishArrayPattern: function (elements) {
            this.type = Syntax.ArrayPattern;
            this.elements = elements;
            this.finish();
            return this;
        },

        finishArrowFunctionExpression: function (params, defaults, body, expression) {
            this.type = Syntax.ArrowFunctionExpression;
            this.id = null;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = false;
            this.expression = expression;
            this.finish();
            return this;
        },

        finishAssignmentExpression: function (operator, left, right) {
            this.type = Syntax.AssignmentExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishAssignmentPattern: function (left, right) {
            this.type = Syntax.AssignmentPattern;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishBinaryExpression: function (operator, left, right) {
            this.type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression : Syntax.BinaryExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishBlockStatement: function (body) {
            this.type = Syntax.BlockStatement;
            this.body = body;
            this.finish();
            return this;
        },

        finishBreakStatement: function (label) {
            this.type = Syntax.BreakStatement;
            this.label = label;
            this.finish();
            return this;
        },

        finishCallExpression: function (callee, args) {
            this.type = Syntax.CallExpression;
            this.callee = callee;
            this.arguments = args;
            this.finish();
            return this;
        },

        finishCatchClause: function (param, body) {
            this.type = Syntax.CatchClause;
            this.param = param;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassBody: function (body) {
            this.type = Syntax.ClassBody;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassDeclaration: function (id, superClass, body) {
            this.type = Syntax.ClassDeclaration;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassExpression: function (id, superClass, body) {
            this.type = Syntax.ClassExpression;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
            this.finish();
            return this;
        },

        finishConditionalExpression: function (test, consequent, alternate) {
            this.type = Syntax.ConditionalExpression;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
            this.finish();
            return this;
        },

        finishContinueStatement: function (label) {
            this.type = Syntax.ContinueStatement;
            this.label = label;
            this.finish();
            return this;
        },

        finishDebuggerStatement: function () {
            this.type = Syntax.DebuggerStatement;
            this.finish();
            return this;
        },

        finishDoWhileStatement: function (body, test) {
            this.type = Syntax.DoWhileStatement;
            this.body = body;
            this.test = test;
            this.finish();
            return this;
        },

        finishEmptyStatement: function () {
            this.type = Syntax.EmptyStatement;
            this.finish();
            return this;
        },

        finishExpressionStatement: function (expression) {
            this.type = Syntax.ExpressionStatement;
            this.expression = expression;
            this.finish();
            return this;
        },

        finishForStatement: function (init, test, update, body) {
            this.type = Syntax.ForStatement;
            this.init = init;
            this.test = test;
            this.update = update;
            this.body = body;
            this.finish();
            return this;
        },

        finishForOfStatement: function (left, right, body) {
            this.type = Syntax.ForOfStatement;
            this.left = left;
            this.right = right;
            this.body = body;
            this.finish();
            return this;
        },

        finishForInStatement: function (left, right, body) {
            this.type = Syntax.ForInStatement;
            this.left = left;
            this.right = right;
            this.body = body;
            this.each = false;
            this.finish();
            return this;
        },

        finishFunctionDeclaration: function (id, params, defaults, body, generator) {
            this.type = Syntax.FunctionDeclaration;
            this.id = id;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.finish();
            return this;
        },

        finishFunctionExpression: function (id, params, defaults, body, generator) {
            this.type = Syntax.FunctionExpression;
            this.id = id;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.finish();
            return this;
        },

        finishIdentifier: function (name) {
            this.type = Syntax.Identifier;
            this.name = name;
            this.finish();
            return this;
        },

        finishIfStatement: function (test, consequent, alternate) {
            this.type = Syntax.IfStatement;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
            this.finish();
            return this;
        },

        finishLabeledStatement: function (label, body) {
            this.type = Syntax.LabeledStatement;
            this.label = label;
            this.body = body;
            this.finish();
            return this;
        },

        finishLiteral: function (token) {
            this.type = Syntax.Literal;
            this.value = token.value;
            this.raw = source.slice(token.start, token.end);
            if (token.regex) {
                this.regex = token.regex;
            }
            this.finish();
            return this;
        },

        finishMemberExpression: function (accessor, object, property) {
            this.type = Syntax.MemberExpression;
            this.computed = accessor === '[';
            this.object = object;
            this.property = property;
            this.finish();
            return this;
        },

        finishMetaProperty: function (meta, property) {
            this.type = Syntax.MetaProperty;
            this.meta = meta;
            this.property = property;
            this.finish();
            return this;
        },

        finishNewExpression: function (callee, args) {
            this.type = Syntax.NewExpression;
            this.callee = callee;
            this.arguments = args;
            this.finish();
            return this;
        },

        finishObjectExpression: function (properties) {
            this.type = Syntax.ObjectExpression;
            this.properties = properties;
            this.finish();
            return this;
        },

        finishObjectPattern: function (properties) {
            this.type = Syntax.ObjectPattern;
            this.properties = properties;
            this.finish();
            return this;
        },

        finishPostfixExpression: function (operator, argument) {
            this.type = Syntax.UpdateExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = false;
            this.finish();
            return this;
        },

        finishProgram: function (body, sourceType) {
            this.type = Syntax.Program;
            this.body = body;
            this.sourceType = sourceType;
            this.finish();
            return this;
        },

        finishProperty: function (kind, key, computed, value, method, shorthand) {
            this.type = Syntax.Property;
            this.key = key;
            this.computed = computed;
            this.value = value;
            this.kind = kind;
            this.method = method;
            this.shorthand = shorthand;
            this.finish();
            return this;
        },

        finishRestElement: function (argument) {
            this.type = Syntax.RestElement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishReturnStatement: function (argument) {
            this.type = Syntax.ReturnStatement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishSequenceExpression: function (expressions) {
            this.type = Syntax.SequenceExpression;
            this.expressions = expressions;
            this.finish();
            return this;
        },

        finishSpreadElement: function (argument) {
            this.type = Syntax.SpreadElement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishSwitchCase: function (test, consequent) {
            this.type = Syntax.SwitchCase;
            this.test = test;
            this.consequent = consequent;
            this.finish();
            return this;
        },

        finishSuper: function () {
            this.type = Syntax.Super;
            this.finish();
            return this;
        },

        finishSwitchStatement: function (discriminant, cases) {
            this.type = Syntax.SwitchStatement;
            this.discriminant = discriminant;
            this.cases = cases;
            this.finish();
            return this;
        },

        finishTaggedTemplateExpression: function (tag, quasi) {
            this.type = Syntax.TaggedTemplateExpression;
            this.tag = tag;
            this.quasi = quasi;
            this.finish();
            return this;
        },

        finishTemplateElement: function (value, tail) {
            this.type = Syntax.TemplateElement;
            this.value = value;
            this.tail = tail;
            this.finish();
            return this;
        },

        finishTemplateLiteral: function (quasis, expressions) {
            this.type = Syntax.TemplateLiteral;
            this.quasis = quasis;
            this.expressions = expressions;
            this.finish();
            return this;
        },

        finishThisExpression: function () {
            this.type = Syntax.ThisExpression;
            this.finish();
            return this;
        },

        finishThrowStatement: function (argument) {
            this.type = Syntax.ThrowStatement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishTryStatement: function (block, handler, finalizer) {
            this.type = Syntax.TryStatement;
            this.block = block;
            this.guardedHandlers = [];
            this.handlers = handler ? [handler] : [];
            this.handler = handler;
            this.finalizer = finalizer;
            this.finish();
            return this;
        },

        finishUnaryExpression: function (operator, argument) {
            this.type = (operator === '++' || operator === '--') ? Syntax.UpdateExpression : Syntax.UnaryExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = true;
            this.finish();
            return this;
        },

        finishVariableDeclaration: function (declarations) {
            this.type = Syntax.VariableDeclaration;
            this.declarations = declarations;
            this.kind = 'var';
            this.finish();
            return this;
        },

        finishLexicalDeclaration: function (declarations, kind) {
            this.type = Syntax.VariableDeclaration;
            this.declarations = declarations;
            this.kind = kind;
            this.finish();
            return this;
        },

        finishVariableDeclarator: function (id, init) {
            this.type = Syntax.VariableDeclarator;
            this.id = id;
            this.init = init;
            this.finish();
            return this;
        },

        finishWhileStatement: function (test, body) {
            this.type = Syntax.WhileStatement;
            this.test = test;
            this.body = body;
            this.finish();
            return this;
        },

        finishWithStatement: function (object, body) {
            this.type = Syntax.WithStatement;
            this.object = object;
            this.body = body;
            this.finish();
            return this;
        },

        finishExportSpecifier: function (local, exported) {
            this.type = Syntax.ExportSpecifier;
            this.exported = exported || local;
            this.local = local;
            this.finish();
            return this;
        },

        finishImportDefaultSpecifier: function (local) {
            this.type = Syntax.ImportDefaultSpecifier;
            this.local = local;
            this.finish();
            return this;
        },

        finishImportNamespaceSpecifier: function (local) {
            this.type = Syntax.ImportNamespaceSpecifier;
            this.local = local;
            this.finish();
            return this;
        },

        finishExportNamedDeclaration: function (declaration, specifiers, src) {
            this.type = Syntax.ExportNamedDeclaration;
            this.declaration = declaration;
            this.specifiers = specifiers;
            this.source = src;
            this.finish();
            return this;
        },

        finishExportDefaultDeclaration: function (declaration) {
            this.type = Syntax.ExportDefaultDeclaration;
            this.declaration = declaration;
            this.finish();
            return this;
        },

        finishExportAllDeclaration: function (src) {
            this.type = Syntax.ExportAllDeclaration;
            this.source = src;
            this.finish();
            return this;
        },

        finishImportSpecifier: function (local, imported) {
            this.type = Syntax.ImportSpecifier;
            this.local = local || imported;
            this.imported = imported;
            this.finish();
            return this;
        },

        finishImportDeclaration: function (specifiers, src) {
            this.type = Syntax.ImportDeclaration;
            this.specifiers = specifiers;
            this.source = src;
            this.finish();
            return this;
        },

        finishYieldExpression: function (argument, delegate) {
            this.type = Syntax.YieldExpression;
            this.argument = argument;
            this.delegate = delegate;
            this.finish();
            return this;
        }
    };


    function recordError(error) {
        var e, existing;

        for (e = 0; e < extra.errors.length; e++) {
            existing = extra.errors[e];
            // Prevent duplicated error.
            /* istanbul ignore next */
            if (existing.index === error.index && existing.message === error.message) {
                return;
            }
        }

        extra.errors.push(error);
    }

    function constructError(msg, column) {
        var error = new Error(msg);
        try {
            throw error;
        } catch (base) {
            /* istanbul ignore else */
            if (Object.create && Object.defineProperty) {
                error = Object.create(base);
                Object.defineProperty(error, 'column', { value: column });
            }
        } finally {
            return error;
        }
    }

    function createError(line, pos, description) {
        var msg, column, error;

        msg = 'Line ' + line + ': ' + description;
        column = pos - (scanning ? lineStart : lastLineStart) + 1;
        error = constructError(msg, column);
        error.lineNumber = line;
        error.description = description;
        error.index = pos;
        return error;
    }

    // Throw an exception

    function throwError(messageFormat) {
        var args, msg;

        args = Array.prototype.slice.call(arguments, 1);
        msg = messageFormat.replace(/%(\d)/g,
            function (whole, idx) {
                assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
            }
        );

        throw createError(lastLineNumber, lastIndex, msg);
    }

    function tolerateError(messageFormat) {
        var args, msg, error;

        args = Array.prototype.slice.call(arguments, 1);
        /* istanbul ignore next */
        msg = messageFormat.replace(/%(\d)/g,
            function (whole, idx) {
                assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
            }
        );

        error = createError(lineNumber, lastIndex, msg);
        if (extra.errors) {
            recordError(error);
        } else {
            throw error;
        }
    }

    // Throw an exception because of the token.

    function unexpectedTokenError(token, message) {
        var value, msg = message || Messages.UnexpectedToken;

        if (token) {
            if (!message) {
                msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :
                    (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :
                    (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :
                    (token.type === Token.StringLiteral) ? Messages.UnexpectedString :
                    (token.type === Token.Template) ? Messages.UnexpectedTemplate :
                    Messages.UnexpectedToken;

                if (token.type === Token.Keyword) {
                    if (isFutureReservedWord(token.value)) {
                        msg = Messages.UnexpectedReserved;
                    } else if (strict && isStrictModeReservedWord(token.value)) {
                        msg = Messages.StrictReservedWord;
                    }
                }
            }

            value = (token.type === Token.Template) ? token.value.raw : token.value;
        } else {
            value = 'ILLEGAL';
        }

        msg = msg.replace('%0', value);

        return (token && typeof token.lineNumber === 'number') ?
            createError(token.lineNumber, token.start, msg) :
            createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg);
    }

    function throwUnexpectedToken(token, message) {
        throw unexpectedTokenError(token, message);
    }

    function tolerateUnexpectedToken(token, message) {
        var error = unexpectedTokenError(token, message);
        if (extra.errors) {
            recordError(error);
        } else {
            throw error;
        }
    }

    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.

    function expect(value) {
        var token = lex();
        if (token.type !== Token.Punctuator || token.value !== value) {
            throwUnexpectedToken(token);
        }
    }

    /**
     * @name expectCommaSeparator
     * @description Quietly expect a comma when in tolerant mode, otherwise delegates
     * to <code>expect(value)</code>
     * @since 2.0
     */
    function expectCommaSeparator() {
        var token;

        if (extra.errors) {
            token = lookahead;
            if (token.type === Token.Punctuator && token.value === ',') {
                lex();
            } else if (token.type === Token.Punctuator && token.value === ';') {
                lex();
                tolerateUnexpectedToken(token);
            } else {
                tolerateUnexpectedToken(token, Messages.UnexpectedToken);
            }
        } else {
            expect(',');
        }
    }

    // Expect the next token to match the specified keyword.
    // If not, an exception will be thrown.

    function expectKeyword(keyword) {
        var token = lex();
        if (token.type !== Token.Keyword || token.value !== keyword) {
            throwUnexpectedToken(token);
        }
    }

    // Return true if the next token matches the specified punctuator.

    function match(value) {
        return lookahead.type === Token.Punctuator && lookahead.value === value;
    }

    // Return true if the next token matches the specified keyword

    function matchKeyword(keyword) {
        return lookahead.type === Token.Keyword && lookahead.value === keyword;
    }

    // Return true if the next token matches the specified contextual keyword
    // (where an identifier is sometimes a keyword depending on the context)

    function matchContextualKeyword(keyword) {
        return lookahead.type === Token.Identifier && lookahead.value === keyword;
    }

    // Return true if the next token is an assignment operator

    function matchAssign() {
        var op;

        if (lookahead.type !== Token.Punctuator) {
            return false;
        }
        op = lookahead.value;
        return op === '=' ||
            op === '*=' ||
            op === '/=' ||
            op === '%=' ||
            op === '+=' ||
            op === '-=' ||
            op === '<<=' ||
            op === '>>=' ||
            op === '>>>=' ||
            op === '&=' ||
            op === '^=' ||
            op === '|=';
    }

    function consumeSemicolon() {
        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(startIndex) === 0x3B || match(';')) {
            lex();
            return;
        }

        if (hasLineTerminator) {
            return;
        }

        // FIXME(ikarienator): this is seemingly an issue in the previous location info convention.
        lastIndex = startIndex;
        lastLineNumber = startLineNumber;
        lastLineStart = startLineStart;

        if (lookahead.type !== Token.EOF && !match('}')) {
            throwUnexpectedToken(lookahead);
        }
    }

    // Cover grammar support.
    //
    // When an assignment expression position starts with an left parenthesis, the determination of the type
    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
    //
    // There are three productions that can be parsed in a parentheses pair that needs to be determined
    // after the outermost pair is closed. They are:
    //
    //   1. AssignmentExpression
    //   2. BindingElements
    //   3. AssignmentTargets
    //
    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
    // binding element or assignment target.
    //
    // The three productions have the relationship:
    //
    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
    //
    // with a single exception that CoverInitializedName when used directly in an Expression, generates
    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
    //
    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
    // the CoverInitializedName check is conducted.
    //
    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
    // pattern. The CoverInitializedName check is deferred.
    function isolateCoverGrammar(parser) {
        var oldIsBindingElement = isBindingElement,
            oldIsAssignmentTarget = isAssignmentTarget,
            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
            result;
        isBindingElement = true;
        isAssignmentTarget = true;
        firstCoverInitializedNameError = null;
        result = parser();
        if (firstCoverInitializedNameError !== null) {
            throwUnexpectedToken(firstCoverInitializedNameError);
        }
        isBindingElement = oldIsBindingElement;
        isAssignmentTarget = oldIsAssignmentTarget;
        firstCoverInitializedNameError = oldFirstCoverInitializedNameError;
        return result;
    }

    function inheritCoverGrammar(parser) {
        var oldIsBindingElement = isBindingElement,
            oldIsAssignmentTarget = isAssignmentTarget,
            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
            result;
        isBindingElement = true;
        isAssignmentTarget = true;
        firstCoverInitializedNameError = null;
        result = parser();
        isBindingElement = isBindingElement && oldIsBindingElement;
        isAssignmentTarget = isAssignmentTarget && oldIsAssignmentTarget;
        firstCoverInitializedNameError = oldFirstCoverInitializedNameError || firstCoverInitializedNameError;
        return result;
    }

    // ECMA-262 13.3.3 Destructuring Binding Patterns

    function parseArrayPattern(params, kind) {
        var node = new Node(), elements = [], rest, restNode;
        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else {
                if (match('...')) {
                    restNode = new Node();
                    lex();
                    params.push(lookahead);
                    rest = parseVariableIdentifier(kind);
                    elements.push(restNode.finishRestElement(rest));
                    break;
                } else {
                    elements.push(parsePatternWithDefault(params, kind));
                }
                if (!match(']')) {
                    expect(',');
                }
            }

        }

        expect(']');

        return node.finishArrayPattern(elements);
    }

    function parsePropertyPattern(params, kind) {
        var node = new Node(), key, keyToken, computed = match('['), init;
        if (lookahead.type === Token.Identifier) {
            keyToken = lookahead;
            key = parseVariableIdentifier();
            if (match('=')) {
                params.push(keyToken);
                lex();
                init = parseAssignmentExpression();

                return node.finishProperty(
                    'init', key, false,
                    new WrappingNode(keyToken).finishAssignmentPattern(key, init), false, true);
            } else if (!match(':')) {
                params.push(keyToken);
                return node.finishProperty('init', key, false, key, false, true);
            }
        } else {
            key = parseObjectPropertyKey();
        }
        expect(':');
        init = parsePatternWithDefault(params, kind);
        return node.finishProperty('init', key, computed, init, false, false);
    }

    function parseObjectPattern(params, kind) {
        var node = new Node(), properties = [];

        expect('{');

        while (!match('}')) {
            properties.push(parsePropertyPattern(params, kind));
            if (!match('}')) {
                expect(',');
            }
        }

        lex();

        return node.finishObjectPattern(properties);
    }

    function parsePattern(params, kind) {
        if (match('[')) {
            return parseArrayPattern(params, kind);
        } else if (match('{')) {
            return parseObjectPattern(params, kind);
        } else if (matchKeyword('let')) {
            if (kind === 'const' || kind === 'let') {
                tolerateUnexpectedToken(lookahead, Messages.UnexpectedToken);
            }
        }

        params.push(lookahead);
        return parseVariableIdentifier(kind);
    }

    function parsePatternWithDefault(params, kind) {
        var startToken = lookahead, pattern, previousAllowYield, right;
        pattern = parsePattern(params, kind);
        if (match('=')) {
            lex();
            previousAllowYield = state.allowYield;
            state.allowYield = true;
            right = isolateCoverGrammar(parseAssignmentExpression);
            state.allowYield = previousAllowYield;
            pattern = new WrappingNode(startToken).finishAssignmentPattern(pattern, right);
        }
        return pattern;
    }

    // ECMA-262 12.2.5 Array Initializer

    function parseArrayInitializer() {
        var elements = [], node = new Node(), restSpread;

        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else if (match('...')) {
                restSpread = new Node();
                lex();
                restSpread.finishSpreadElement(inheritCoverGrammar(parseAssignmentExpression));

                if (!match(']')) {
                    isAssignmentTarget = isBindingElement = false;
                    expect(',');
                }
                elements.push(restSpread);
            } else {
                elements.push(inheritCoverGrammar(parseAssignmentExpression));

                if (!match(']')) {
                    expect(',');
                }
            }
        }

        lex();

        return node.finishArrayExpression(elements);
    }

    // ECMA-262 12.2.6 Object Initializer

    function parsePropertyFunction(node, paramInfo, isGenerator) {
        var previousStrict, body;

        isAssignmentTarget = isBindingElement = false;

        previousStrict = strict;
        body = isolateCoverGrammar(parseFunctionSourceElements);

        if (strict && paramInfo.firstRestricted) {
            tolerateUnexpectedToken(paramInfo.firstRestricted, paramInfo.message);
        }
        if (strict && paramInfo.stricted) {
            tolerateUnexpectedToken(paramInfo.stricted, paramInfo.message);
        }

        strict = previousStrict;
        return node.finishFunctionExpression(null, paramInfo.params, paramInfo.defaults, body, isGenerator);
    }

    function parsePropertyMethodFunction() {
        var params, method, node = new Node(),
            previousAllowYield = state.allowYield;

        state.allowYield = false;
        params = parseParams();
        state.allowYield = previousAllowYield;

        state.allowYield = false;
        method = parsePropertyFunction(node, params, false);
        state.allowYield = previousAllowYield;

        return method;
    }

    function parseObjectPropertyKey() {
        var token, node = new Node(), expr;

        token = lex();

        // Note: This function is called only from parseObjectProperty(), where
        // EOF and Punctuator tokens are already filtered out.

        switch (token.type) {
        case Token.StringLiteral:
        case Token.NumericLiteral:
            if (strict && token.octal) {
                tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);
            }
            return node.finishLiteral(token);
        case Token.Identifier:
        case Token.BooleanLiteral:
        case Token.NullLiteral:
        case Token.Keyword:
            return node.finishIdentifier(token.value);
        case Token.Punctuator:
            if (token.value === '[') {
                expr = isolateCoverGrammar(parseAssignmentExpression);
                expect(']');
                return expr;
            }
            break;
        }
        throwUnexpectedToken(token);
    }

    function lookaheadPropertyName() {
        switch (lookahead.type) {
        case Token.Identifier:
        case Token.StringLiteral:
        case Token.BooleanLiteral:
        case Token.NullLiteral:
        case Token.NumericLiteral:
        case Token.Keyword:
            return true;
        case Token.Punctuator:
            return lookahead.value === '[';
        }
        return false;
    }

    // This function is to try to parse a MethodDefinition as defined in 14.3. But in the case of object literals,
    // it might be called at a position where there is in fact a short hand identifier pattern or a data property.
    // This can only be determined after we consumed up to the left parentheses.
    //
    // In order to avoid back tracking, it returns `null` if the position is not a MethodDefinition and the caller
    // is responsible to visit other options.
    function tryParseMethodDefinition(token, key, computed, node) {
        var value, options, methodNode, params,
            previousAllowYield = state.allowYield;

        if (token.type === Token.Identifier) {
            // check for `get` and `set`;

            if (token.value === 'get' && lookaheadPropertyName()) {
                computed = match('[');
                key = parseObjectPropertyKey();
                methodNode = new Node();
                expect('(');
                expect(')');

                state.allowYield = false;
                value = parsePropertyFunction(methodNode, {
                    params: [],
                    defaults: [],
                    stricted: null,
                    firstRestricted: null,
                    message: null
                }, false);
                state.allowYield = previousAllowYield;

                return node.finishProperty('get', key, computed, value, false, false);
            } else if (token.value === 'set' && lookaheadPropertyName()) {
                computed = match('[');
                key = parseObjectPropertyKey();
                methodNode = new Node();
                expect('(');

                options = {
                    params: [],
                    defaultCount: 0,
                    defaults: [],
                    firstRestricted: null,
                    paramSet: {}
                };
                if (match(')')) {
                    tolerateUnexpectedToken(lookahead);
                } else {
                    state.allowYield = false;
                    parseParam(options);
                    state.allowYield = previousAllowYield;
                    if (options.defaultCount === 0) {
                        options.defaults = [];
                    }
                }
                expect(')');

                state.allowYield = false;
                value = parsePropertyFunction(methodNode, options, false);
                state.allowYield = previousAllowYield;

                return node.finishProperty('set', key, computed, value, false, false);
            }
        } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyName()) {
            computed = match('[');
            key = parseObjectPropertyKey();
            methodNode = new Node();

            state.allowYield = true;
            params = parseParams();
            state.allowYield = previousAllowYield;

            state.allowYield = false;
            value = parsePropertyFunction(methodNode, params, true);
            state.allowYield = previousAllowYield;

            return node.finishProperty('init', key, computed, value, true, false);
        }

        if (key && match('(')) {
            value = parsePropertyMethodFunction();
            return node.finishProperty('init', key, computed, value, true, false);
        }

        // Not a MethodDefinition.
        return null;
    }

    function parseObjectProperty(hasProto) {
        var token = lookahead, node = new Node(), computed, key, maybeMethod, proto, value;

        computed = match('[');
        if (match('*')) {
            lex();
        } else {
            key = parseObjectPropertyKey();
        }
        maybeMethod = tryParseMethodDefinition(token, key, computed, node);
        if (maybeMethod) {
            return maybeMethod;
        }

        if (!key) {
            throwUnexpectedToken(lookahead);
        }

        // Check for duplicated __proto__
        if (!computed) {
            proto = (key.type === Syntax.Identifier && key.name === '__proto__') ||
                (key.type === Syntax.Literal && key.value === '__proto__');
            if (hasProto.value && proto) {
                tolerateError(Messages.DuplicateProtoProperty);
            }
            hasProto.value |= proto;
        }

        if (match(':')) {
            lex();
            value = inheritCoverGrammar(parseAssignmentExpression);
            return node.finishProperty('init', key, computed, value, false, false);
        }

        if (token.type === Token.Identifier) {
            if (match('=')) {
                firstCoverInitializedNameError = lookahead;
                lex();
                value = isolateCoverGrammar(parseAssignmentExpression);
                return node.finishProperty('init', key, computed,
                    new WrappingNode(token).finishAssignmentPattern(key, value), false, true);
            }
            return node.finishProperty('init', key, computed, key, false, true);
        }

        throwUnexpectedToken(lookahead);
    }

    function parseObjectInitializer() {
        var properties = [], hasProto = {value: false}, node = new Node();

        expect('{');

        while (!match('}')) {
            properties.push(parseObjectProperty(hasProto));

            if (!match('}')) {
                expectCommaSeparator();
            }
        }

        expect('}');

        return node.finishObjectExpression(properties);
    }

    function reinterpretExpressionAsPattern(expr) {
        var i;
        switch (expr.type) {
        case Syntax.Identifier:
        case Syntax.MemberExpression:
        case Syntax.RestElement:
        case Syntax.AssignmentPattern:
            break;
        case Syntax.SpreadElement:
            expr.type = Syntax.RestElement;
            reinterpretExpressionAsPattern(expr.argument);
            break;
        case Syntax.ArrayExpression:
            expr.type = Syntax.ArrayPattern;
            for (i = 0; i < expr.elements.length; i++) {
                if (expr.elements[i] !== null) {
                    reinterpretExpressionAsPattern(expr.elements[i]);
                }
            }
            break;
        case Syntax.ObjectExpression:
            expr.type = Syntax.ObjectPattern;
            for (i = 0; i < expr.properties.length; i++) {
                reinterpretExpressionAsPattern(expr.properties[i].value);
            }
            break;
        case Syntax.AssignmentExpression:
            expr.type = Syntax.AssignmentPattern;
            reinterpretExpressionAsPattern(expr.left);
            break;
        default:
            // Allow other node type for tolerant parsing.
            break;
        }
    }

    // ECMA-262 12.2.9 Template Literals

    function parseTemplateElement(option) {
        var node, token;

        if (lookahead.type !== Token.Template || (option.head && !lookahead.head)) {
            throwUnexpectedToken();
        }

        node = new Node();
        token = lex();

        return node.finishTemplateElement({ raw: token.value.raw, cooked: token.value.cooked }, token.tail);
    }

    function parseTemplateLiteral() {
        var quasi, quasis, expressions, node = new Node();

        quasi = parseTemplateElement({ head: true });
        quasis = [quasi];
        expressions = [];

        while (!quasi.tail) {
            expressions.push(parseExpression());
            quasi = parseTemplateElement({ head: false });
            quasis.push(quasi);
        }

        return node.finishTemplateLiteral(quasis, expressions);
    }

    // ECMA-262 12.2.10 The Grouping Operator

    function parseGroupExpression() {
        var expr, expressions, startToken, i, params = [];

        expect('(');

        if (match(')')) {
            lex();
            if (!match('=>')) {
                expect('=>');
            }
            return {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: [],
                rawParams: []
            };
        }

        startToken = lookahead;
        if (match('...')) {
            expr = parseRestElement(params);
            expect(')');
            if (!match('=>')) {
                expect('=>');
            }
            return {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: [expr]
            };
        }

        isBindingElement = true;
        expr = inheritCoverGrammar(parseAssignmentExpression);

        if (match(',')) {
            isAssignmentTarget = false;
            expressions = [expr];

            while (startIndex < length) {
                if (!match(',')) {
                    break;
                }
                lex();

                if (match('...')) {
                    if (!isBindingElement) {
                        throwUnexpectedToken(lookahead);
                    }
                    expressions.push(parseRestElement(params));
                    expect(')');
                    if (!match('=>')) {
                        expect('=>');
                    }
                    isBindingElement = false;
                    for (i = 0; i < expressions.length; i++) {
                        reinterpretExpressionAsPattern(expressions[i]);
                    }
                    return {
                        type: PlaceHolders.ArrowParameterPlaceHolder,
                        params: expressions
                    };
                }

                expressions.push(inheritCoverGrammar(parseAssignmentExpression));
            }

            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
        }


        expect(')');

        if (match('=>')) {
            if (expr.type === Syntax.Identifier && expr.name === 'yield') {
                return {
                    type: PlaceHolders.ArrowParameterPlaceHolder,
                    params: [expr]
                };
            }

            if (!isBindingElement) {
                throwUnexpectedToken(lookahead);
            }

            if (expr.type === Syntax.SequenceExpression) {
                for (i = 0; i < expr.expressions.length; i++) {
                    reinterpretExpressionAsPattern(expr.expressions[i]);
                }
            } else {
                reinterpretExpressionAsPattern(expr);
            }

            expr = {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]
            };
        }
        isBindingElement = false;
        return expr;
    }


    // ECMA-262 12.2 Primary Expressions

    function parsePrimaryExpression() {
        var type, token, expr, node;

        if (match('(')) {
            isBindingElement = false;
            return inheritCoverGrammar(parseGroupExpression);
        }

        if (match('[')) {
            return inheritCoverGrammar(parseArrayInitializer);
        }

        if (match('{')) {
            return inheritCoverGrammar(parseObjectInitializer);
        }

        type = lookahead.type;
        node = new Node();

        if (type === Token.Identifier) {
            if (state.sourceType === 'module' && lookahead.value === 'await') {
                tolerateUnexpectedToken(lookahead);
            }
            expr = node.finishIdentifier(lex().value);
        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
            isAssignmentTarget = isBindingElement = false;
            if (strict && lookahead.octal) {
                tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);
            }
            expr = node.finishLiteral(lex());
        } else if (type === Token.Keyword) {
            if (!strict && state.allowYield && matchKeyword('yield')) {
                return parseNonComputedProperty();
            }
            if (!strict && matchKeyword('let')) {
                return node.finishIdentifier(lex().value);
            }
            isAssignmentTarget = isBindingElement = false;
            if (matchKeyword('function')) {
                return parseFunctionExpression();
            }
            if (matchKeyword('this')) {
                lex();
                return node.finishThisExpression();
            }
            if (matchKeyword('class')) {
                return parseClassExpression();
            }
            throwUnexpectedToken(lex());
        } else if (type === Token.BooleanLiteral) {
            isAssignmentTarget = isBindingElement = false;
            token = lex();
            token.value = (token.value === 'true');
            expr = node.finishLiteral(token);
        } else if (type === Token.NullLiteral) {
            isAssignmentTarget = isBindingElement = false;
            token = lex();
            token.value = null;
            expr = node.finishLiteral(token);
        } else if (match('/') || match('/=')) {
            isAssignmentTarget = isBindingElement = false;
            index = startIndex;

            if (typeof extra.tokens !== 'undefined') {
                token = collectRegex();
            } else {
                token = scanRegExp();
            }
            lex();
            expr = node.finishLiteral(token);
        } else if (type === Token.Template) {
            expr = parseTemplateLiteral();
        } else {
            throwUnexpectedToken(lex());
        }

        return expr;
    }

    // ECMA-262 12.3 Left-Hand-Side Expressions

    function parseArguments() {
        var args = [], expr;

        expect('(');

        if (!match(')')) {
            while (startIndex < length) {
                if (match('...')) {
                    expr = new Node();
                    lex();
                    expr.finishSpreadElement(isolateCoverGrammar(parseAssignmentExpression));
                } else {
                    expr = isolateCoverGrammar(parseAssignmentExpression);
                }
                args.push(expr);
                if (match(')')) {
                    break;
                }
                expectCommaSeparator();
            }
        }

        expect(')');

        return args;
    }

    function parseNonComputedProperty() {
        var token, node = new Node();

        token = lex();

        if (!isIdentifierName(token)) {
            throwUnexpectedToken(token);
        }

        return node.finishIdentifier(token.value);
    }

    function parseNonComputedMember() {
        expect('.');

        return parseNonComputedProperty();
    }

    function parseComputedMember() {
        var expr;

        expect('[');

        expr = isolateCoverGrammar(parseExpression);

        expect(']');

        return expr;
    }

    // ECMA-262 12.3.3 The new Operator

    function parseNewExpression() {
        var callee, args, node = new Node();

        expectKeyword('new');

        if (match('.')) {
            lex();
            if (lookahead.type === Token.Identifier && lookahead.value === 'target') {
                if (state.inFunctionBody) {
                    lex();
                    return node.finishMetaProperty('new', 'target');
                }
            }
            throwUnexpectedToken(lookahead);
        }

        callee = isolateCoverGrammar(parseLeftHandSideExpression);
        args = match('(') ? parseArguments() : [];

        isAssignmentTarget = isBindingElement = false;

        return node.finishNewExpression(callee, args);
    }

    // ECMA-262 12.3.4 Function Calls

    function parseLeftHandSideExpressionAllowCall() {
        var quasi, expr, args, property, startToken, previousAllowIn = state.allowIn;

        startToken = lookahead;
        state.allowIn = true;

        if (matchKeyword('super') && state.inFunctionBody) {
            expr = new Node();
            lex();
            expr = expr.finishSuper();
            if (!match('(') && !match('.') && !match('[')) {
                throwUnexpectedToken(lookahead);
            }
        } else {
            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
        }

        for (;;) {
            if (match('.')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseNonComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
            } else if (match('(')) {
                isBindingElement = false;
                isAssignmentTarget = false;
                args = parseArguments();
                expr = new WrappingNode(startToken).finishCallExpression(expr, args);
            } else if (match('[')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
            } else if (lookahead.type === Token.Template && lookahead.head) {
                quasi = parseTemplateLiteral();
                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
            } else {
                break;
            }
        }
        state.allowIn = previousAllowIn;

        return expr;
    }

    // ECMA-262 12.3 Left-Hand-Side Expressions

    function parseLeftHandSideExpression() {
        var quasi, expr, property, startToken;
        assert(state.allowIn, 'callee of new expression always allow in keyword.');

        startToken = lookahead;

        if (matchKeyword('super') && state.inFunctionBody) {
            expr = new Node();
            lex();
            expr = expr.finishSuper();
            if (!match('[') && !match('.')) {
                throwUnexpectedToken(lookahead);
            }
        } else {
            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
        }

        for (;;) {
            if (match('[')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
            } else if (match('.')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseNonComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
            } else if (lookahead.type === Token.Template && lookahead.head) {
                quasi = parseTemplateLiteral();
                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
            } else {
                break;
            }
        }
        return expr;
    }

    // ECMA-262 12.4 Postfix Expressions

    function parsePostfixExpression() {
        var expr, token, startToken = lookahead;

        expr = inheritCoverGrammar(parseLeftHandSideExpressionAllowCall);

        if (!hasLineTerminator && lookahead.type === Token.Punctuator) {
            if (match('++') || match('--')) {
                // ECMA-262 11.3.1, 11.3.2
                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                    tolerateError(Messages.StrictLHSPostfix);
                }

                if (!isAssignmentTarget) {
                    tolerateError(Messages.InvalidLHSInAssignment);
                }

                isAssignmentTarget = isBindingElement = false;

                token = lex();
                expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);
            }
        }

        return expr;
    }

    // ECMA-262 12.5 Unary Operators

    function parseUnaryExpression() {
        var token, expr, startToken;

        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
            expr = parsePostfixExpression();
        } else if (match('++') || match('--')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            // ECMA-262 11.4.4, 11.4.5
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                tolerateError(Messages.StrictLHSPrefix);
            }

            if (!isAssignmentTarget) {
                tolerateError(Messages.InvalidLHSInAssignment);
            }
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            isAssignmentTarget = isBindingElement = false;
        } else if (match('+') || match('-') || match('~') || match('!')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            isAssignmentTarget = isBindingElement = false;
        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                tolerateError(Messages.StrictDelete);
            }
            isAssignmentTarget = isBindingElement = false;
        } else {
            expr = parsePostfixExpression();
        }

        return expr;
    }

    function binaryPrecedence(token, allowIn) {
        var prec = 0;

        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
            return 0;
        }

        switch (token.value) {
        case '||':
            prec = 1;
            break;

        case '&&':
            prec = 2;
            break;

        case '|':
            prec = 3;
            break;

        case '^':
            prec = 4;
            break;

        case '&':
            prec = 5;
            break;

        case '==':
        case '!=':
        case '===':
        case '!==':
            prec = 6;
            break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
            prec = 7;
            break;

        case 'in':
            prec = allowIn ? 7 : 0;
            break;

        case '<<':
        case '>>':
        case '>>>':
            prec = 8;
            break;

        case '+':
        case '-':
            prec = 9;
            break;

        case '*':
        case '/':
        case '%':
            prec = 11;
            break;

        default:
            break;
        }

        return prec;
    }

    // ECMA-262 12.6 Multiplicative Operators
    // ECMA-262 12.7 Additive Operators
    // ECMA-262 12.8 Bitwise Shift Operators
    // ECMA-262 12.9 Relational Operators
    // ECMA-262 12.10 Equality Operators
    // ECMA-262 12.11 Binary Bitwise Operators
    // ECMA-262 12.12 Binary Logical Operators

    function parseBinaryExpression() {
        var marker, markers, expr, token, prec, stack, right, operator, left, i;

        marker = lookahead;
        left = inheritCoverGrammar(parseUnaryExpression);

        token = lookahead;
        prec = binaryPrecedence(token, state.allowIn);
        if (prec === 0) {
            return left;
        }
        isAssignmentTarget = isBindingElement = false;
        token.prec = prec;
        lex();

        markers = [marker, lookahead];
        right = isolateCoverGrammar(parseUnaryExpression);

        stack = [left, token, right];

        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

            // Reduce: make a binary expression from the three topmost entries.
            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                right = stack.pop();
                operator = stack.pop().value;
                left = stack.pop();
                markers.pop();
                expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);
                stack.push(expr);
            }

            // Shift.
            token = lex();
            token.prec = prec;
            stack.push(token);
            markers.push(lookahead);
            expr = isolateCoverGrammar(parseUnaryExpression);
            stack.push(expr);
        }

        // Final reduce to clean-up the stack.
        i = stack.length - 1;
        expr = stack[i];
        markers.pop();
        while (i > 1) {
            expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
            i -= 2;
        }

        return expr;
    }


    // ECMA-262 12.13 Conditional Operator

    function parseConditionalExpression() {
        var expr, previousAllowIn, consequent, alternate, startToken;

        startToken = lookahead;

        expr = inheritCoverGrammar(parseBinaryExpression);
        if (match('?')) {
            lex();
            previousAllowIn = state.allowIn;
            state.allowIn = true;
            consequent = isolateCoverGrammar(parseAssignmentExpression);
            state.allowIn = previousAllowIn;
            expect(':');
            alternate = isolateCoverGrammar(parseAssignmentExpression);

            expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);
            isAssignmentTarget = isBindingElement = false;
        }

        return expr;
    }

    // ECMA-262 14.2 Arrow Function Definitions

    function parseConciseBody() {
        if (match('{')) {
            return parseFunctionSourceElements();
        }
        return isolateCoverGrammar(parseAssignmentExpression);
    }

    function checkPatternParam(options, param) {
        var i;
        switch (param.type) {
        case Syntax.Identifier:
            validateParam(options, param, param.name);
            break;
        case Syntax.RestElement:
            checkPatternParam(options, param.argument);
            break;
        case Syntax.AssignmentPattern:
            checkPatternParam(options, param.left);
            break;
        case Syntax.ArrayPattern:
            for (i = 0; i < param.elements.length; i++) {
                if (param.elements[i] !== null) {
                    checkPatternParam(options, param.elements[i]);
                }
            }
            break;
        case Syntax.YieldExpression:
            break;
        default:
            assert(param.type === Syntax.ObjectPattern, 'Invalid type');
            for (i = 0; i < param.properties.length; i++) {
                checkPatternParam(options, param.properties[i].value);
            }
            break;
        }
    }
    function reinterpretAsCoverFormalsList(expr) {
        var i, len, param, params, defaults, defaultCount, options, token;

        defaults = [];
        defaultCount = 0;
        params = [expr];

        switch (expr.type) {
        case Syntax.Identifier:
            break;
        case PlaceHolders.ArrowParameterPlaceHolder:
            params = expr.params;
            break;
        default:
            return null;
        }

        options = {
            paramSet: {}
        };

        for (i = 0, len = params.length; i < len; i += 1) {
            param = params[i];
            switch (param.type) {
            case Syntax.AssignmentPattern:
                params[i] = param.left;
                if (param.right.type === Syntax.YieldExpression) {
                    if (param.right.argument) {
                        throwUnexpectedToken(lookahead);
                    }
                    param.right.type = Syntax.Identifier;
                    param.right.name = 'yield';
                    delete param.right.argument;
                    delete param.right.delegate;
                }
                defaults.push(param.right);
                ++defaultCount;
                checkPatternParam(options, param.left);
                break;
            default:
                checkPatternParam(options, param);
                params[i] = param;
                defaults.push(null);
                break;
            }
        }

        if (strict || !state.allowYield) {
            for (i = 0, len = params.length; i < len; i += 1) {
                param = params[i];
                if (param.type === Syntax.YieldExpression) {
                    throwUnexpectedToken(lookahead);
                }
            }
        }

        if (options.message === Messages.StrictParamDupe) {
            token = strict ? options.stricted : options.firstRestricted;
            throwUnexpectedToken(token, options.message);
        }

        if (defaultCount === 0) {
            defaults = [];
        }

        return {
            params: params,
            defaults: defaults,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
        };
    }

    function parseArrowFunctionExpression(options, node) {
        var previousStrict, previousAllowYield, body;

        if (hasLineTerminator) {
            tolerateUnexpectedToken(lookahead);
        }
        expect('=>');

        previousStrict = strict;
        previousAllowYield = state.allowYield;
        state.allowYield = true;

        body = parseConciseBody();

        if (strict && options.firstRestricted) {
            throwUnexpectedToken(options.firstRestricted, options.message);
        }
        if (strict && options.stricted) {
            tolerateUnexpectedToken(options.stricted, options.message);
        }

        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);
    }

    // ECMA-262 14.4 Yield expression

    function parseYieldExpression() {
        var argument, expr, delegate, previousAllowYield;

        argument = null;
        expr = new Node();
        delegate = false;

        expectKeyword('yield');

        if (!hasLineTerminator) {
            previousAllowYield = state.allowYield;
            state.allowYield = false;
            delegate = match('*');
            if (delegate) {
                lex();
                argument = parseAssignmentExpression();
            } else {
                if (!match(';') && !match('}') && !match(')') && lookahead.type !== Token.EOF) {
                    argument = parseAssignmentExpression();
                }
            }
            state.allowYield = previousAllowYield;
        }

        return expr.finishYieldExpression(argument, delegate);
    }

    // ECMA-262 12.14 Assignment Operators

    function parseAssignmentExpression() {
        var token, expr, right, list, startToken;

        startToken = lookahead;
        token = lookahead;

        if (!state.allowYield && matchKeyword('yield')) {
            return parseYieldExpression();
        }

        expr = parseConditionalExpression();

        if (expr.type === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {
            isAssignmentTarget = isBindingElement = false;
            list = reinterpretAsCoverFormalsList(expr);

            if (list) {
                firstCoverInitializedNameError = null;
                return parseArrowFunctionExpression(list, new WrappingNode(startToken));
            }

            return expr;
        }

        if (matchAssign()) {
            if (!isAssignmentTarget) {
                tolerateError(Messages.InvalidLHSInAssignment);
            }

            // ECMA-262 12.1.1
            if (strict && expr.type === Syntax.Identifier) {
                if (isRestrictedWord(expr.name)) {
                    tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);
                }
                if (isStrictModeReservedWord(expr.name)) {
                    tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                }
            }

            if (!match('=')) {
                isAssignmentTarget = isBindingElement = false;
            } else {
                reinterpretExpressionAsPattern(expr);
            }

            token = lex();
            right = isolateCoverGrammar(parseAssignmentExpression);
            expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);
            firstCoverInitializedNameError = null;
        }

        return expr;
    }

    // ECMA-262 12.15 Comma Operator

    function parseExpression() {
        var expr, startToken = lookahead, expressions;

        expr = isolateCoverGrammar(parseAssignmentExpression);

        if (match(',')) {
            expressions = [expr];

            while (startIndex < length) {
                if (!match(',')) {
                    break;
                }
                lex();
                expressions.push(isolateCoverGrammar(parseAssignmentExpression));
            }

            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
        }

        return expr;
    }

    // ECMA-262 13.2 Block

    function parseStatementListItem() {
        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'export':
                if (state.sourceType !== 'module') {
                    tolerateUnexpectedToken(lookahead, Messages.IllegalExportDeclaration);
                }
                return parseExportDeclaration();
            case 'import':
                if (state.sourceType !== 'module') {
                    tolerateUnexpectedToken(lookahead, Messages.IllegalImportDeclaration);
                }
                return parseImportDeclaration();
            case 'const':
                return parseLexicalDeclaration({inFor: false});
            case 'function':
                return parseFunctionDeclaration(new Node());
            case 'class':
                return parseClassDeclaration();
            }
        }

        if (matchKeyword('let') && isLexicalDeclaration()) {
            return parseLexicalDeclaration({inFor: false});
        }

        return parseStatement();
    }

    function parseStatementList() {
        var list = [];
        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            list.push(parseStatementListItem());
        }

        return list;
    }

    function parseBlock() {
        var block, node = new Node();

        expect('{');

        block = parseStatementList();

        expect('}');

        return node.finishBlockStatement(block);
    }

    // ECMA-262 13.3.2 Variable Statement

    function parseVariableIdentifier(kind) {
        var token, node = new Node();

        token = lex();

        if (token.type === Token.Keyword && token.value === 'yield') {
            if (strict) {
                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
            } if (!state.allowYield) {
                throwUnexpectedToken(token);
            }
        } else if (token.type !== Token.Identifier) {
            if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {
                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
            } else {
                if (strict || token.value !== 'let' || kind !== 'var') {
                    throwUnexpectedToken(token);
                }
            }
        } else if (state.sourceType === 'module' && token.type === Token.Identifier && token.value === 'await') {
            tolerateUnexpectedToken(token);
        }

        return node.finishIdentifier(token.value);
    }

    function parseVariableDeclaration(options) {
        var init = null, id, node = new Node(), params = [];

        id = parsePattern(params, 'var');

        // ECMA-262 12.2.1
        if (strict && isRestrictedWord(id.name)) {
            tolerateError(Messages.StrictVarName);
        }

        if (match('=')) {
            lex();
            init = isolateCoverGrammar(parseAssignmentExpression);
        } else if (id.type !== Syntax.Identifier && !options.inFor) {
            expect('=');
        }

        return node.finishVariableDeclarator(id, init);
    }

    function parseVariableDeclarationList(options) {
        var opt, list;

        opt = { inFor: options.inFor };
        list = [parseVariableDeclaration(opt)];

        while (match(',')) {
            lex();
            list.push(parseVariableDeclaration(opt));
        }

        return list;
    }

    function parseVariableStatement(node) {
        var declarations;

        expectKeyword('var');

        declarations = parseVariableDeclarationList({ inFor: false });

        consumeSemicolon();

        return node.finishVariableDeclaration(declarations);
    }

    // ECMA-262 13.3.1 Let and Const Declarations

    function parseLexicalBinding(kind, options) {
        var init = null, id, node = new Node(), params = [];

        id = parsePattern(params, kind);

        // ECMA-262 12.2.1
        if (strict && id.type === Syntax.Identifier && isRestrictedWord(id.name)) {
            tolerateError(Messages.StrictVarName);
        }

        if (kind === 'const') {
            if (!matchKeyword('in') && !matchContextualKeyword('of')) {
                expect('=');
                init = isolateCoverGrammar(parseAssignmentExpression);
            }
        } else if ((!options.inFor && id.type !== Syntax.Identifier) || match('=')) {
            expect('=');
            init = isolateCoverGrammar(parseAssignmentExpression);
        }

        return node.finishVariableDeclarator(id, init);
    }

    function parseBindingList(kind, options) {
        var list = [parseLexicalBinding(kind, options)];

        while (match(',')) {
            lex();
            list.push(parseLexicalBinding(kind, options));
        }

        return list;
    }


    function tokenizerState() {
        return {
            index: index,
            lineNumber: lineNumber,
            lineStart: lineStart,
            hasLineTerminator: hasLineTerminator,
            lastIndex: lastIndex,
            lastLineNumber: lastLineNumber,
            lastLineStart: lastLineStart,
            startIndex: startIndex,
            startLineNumber: startLineNumber,
            startLineStart: startLineStart,
            lookahead: lookahead,
            tokenCount: extra.tokens ? extra.tokens.length : 0
        };
    }

    function resetTokenizerState(ts) {
        index = ts.index;
        lineNumber = ts.lineNumber;
        lineStart = ts.lineStart;
        hasLineTerminator = ts.hasLineTerminator;
        lastIndex = ts.lastIndex;
        lastLineNumber = ts.lastLineNumber;
        lastLineStart = ts.lastLineStart;
        startIndex = ts.startIndex;
        startLineNumber = ts.startLineNumber;
        startLineStart = ts.startLineStart;
        lookahead = ts.lookahead;
        if (extra.tokens) {
            extra.tokens.splice(ts.tokenCount, extra.tokens.length);
        }
    }

    function isLexicalDeclaration() {
        var lexical, ts;

        ts = tokenizerState();

        lex();
        lexical = (lookahead.type === Token.Identifier) || match('[') || match('{') ||
            matchKeyword('let') || matchKeyword('yield');

        resetTokenizerState(ts);

        return lexical;
    }

    function parseLexicalDeclaration(options) {
        var kind, declarations, node = new Node();

        kind = lex().value;
        assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');

        declarations = parseBindingList(kind, options);

        consumeSemicolon();

        return node.finishLexicalDeclaration(declarations, kind);
    }

    function parseRestElement(params) {
        var param, node = new Node();

        lex();

        if (match('{')) {
            throwError(Messages.ObjectPatternAsRestParameter);
        }

        params.push(lookahead);

        param = parseVariableIdentifier();

        if (match('=')) {
            throwError(Messages.DefaultRestParameter);
        }

        if (!match(')')) {
            throwError(Messages.ParameterAfterRestParameter);
        }

        return node.finishRestElement(param);
    }

    // ECMA-262 13.4 Empty Statement

    function parseEmptyStatement(node) {
        expect(';');
        return node.finishEmptyStatement();
    }

    // ECMA-262 12.4 Expression Statement

    function parseExpressionStatement(node) {
        var expr = parseExpression();
        consumeSemicolon();
        return node.finishExpressionStatement(expr);
    }

    // ECMA-262 13.6 If statement

    function parseIfStatement(node) {
        var test, consequent, alternate;

        expectKeyword('if');

        expect('(');

        test = parseExpression();

        expect(')');

        consequent = parseStatement();

        if (matchKeyword('else')) {
            lex();
            alternate = parseStatement();
        } else {
            alternate = null;
        }

        return node.finishIfStatement(test, consequent, alternate);
    }

    // ECMA-262 13.7 Iteration Statements

    function parseDoWhileStatement(node) {
        var body, test, oldInIteration;

        expectKeyword('do');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        if (match(';')) {
            lex();
        }

        return node.finishDoWhileStatement(body, test);
    }

    function parseWhileStatement(node) {
        var test, body, oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return node.finishWhileStatement(test, body);
    }

    function parseForStatement(node) {
        var init, forIn, initSeq, initStartToken, test, update, left, right, kind, declarations,
            body, oldInIteration, previousAllowIn = state.allowIn;

        init = test = update = null;
        forIn = true;

        expectKeyword('for');

        expect('(');

        if (match(';')) {
            lex();
        } else {
            if (matchKeyword('var')) {
                init = new Node();
                lex();

                state.allowIn = false;
                declarations = parseVariableDeclarationList({ inFor: true });
                state.allowIn = previousAllowIn;

                if (declarations.length === 1 && matchKeyword('in')) {
                    init = init.finishVariableDeclaration(declarations);
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                    init = init.finishVariableDeclaration(declarations);
                    lex();
                    left = init;
                    right = parseAssignmentExpression();
                    init = null;
                    forIn = false;
                } else {
                    init = init.finishVariableDeclaration(declarations);
                    expect(';');
                }
            } else if (matchKeyword('const') || matchKeyword('let')) {
                init = new Node();
                kind = lex().value;

                if (!strict && lookahead.value === 'in') {
                    init = init.finishIdentifier(kind);
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                } else {
                    state.allowIn = false;
                    declarations = parseBindingList(kind, {inFor: true});
                    state.allowIn = previousAllowIn;

                    if (declarations.length === 1 && declarations[0].init === null && matchKeyword('in')) {
                        init = init.finishLexicalDeclaration(declarations, kind);
                        lex();
                        left = init;
                        right = parseExpression();
                        init = null;
                    } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                        init = init.finishLexicalDeclaration(declarations, kind);
                        lex();
                        left = init;
                        right = parseAssignmentExpression();
                        init = null;
                        forIn = false;
                    } else {
                        consumeSemicolon();
                        init = init.finishLexicalDeclaration(declarations, kind);
                    }
                }
            } else {
                initStartToken = lookahead;
                state.allowIn = false;
                init = inheritCoverGrammar(parseAssignmentExpression);
                state.allowIn = previousAllowIn;

                if (matchKeyword('in')) {
                    if (!isAssignmentTarget) {
                        tolerateError(Messages.InvalidLHSInForIn);
                    }

                    lex();
                    reinterpretExpressionAsPattern(init);
                    left = init;
                    right = parseExpression();
                    init = null;
                } else if (matchContextualKeyword('of')) {
                    if (!isAssignmentTarget) {
                        tolerateError(Messages.InvalidLHSInForLoop);
                    }

                    lex();
                    reinterpretExpressionAsPattern(init);
                    left = init;
                    right = parseAssignmentExpression();
                    init = null;
                    forIn = false;
                } else {
                    if (match(',')) {
                        initSeq = [init];
                        while (match(',')) {
                            lex();
                            initSeq.push(isolateCoverGrammar(parseAssignmentExpression));
                        }
                        init = new WrappingNode(initStartToken).finishSequenceExpression(initSeq);
                    }
                    expect(';');
                }
            }
        }

        if (typeof left === 'undefined') {

            if (!match(';')) {
                test = parseExpression();
            }
            expect(';');

            if (!match(')')) {
                update = parseExpression();
            }
        }

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = isolateCoverGrammar(parseStatement);

        state.inIteration = oldInIteration;

        return (typeof left === 'undefined') ?
                node.finishForStatement(init, test, update, body) :
                forIn ? node.finishForInStatement(left, right, body) :
                    node.finishForOfStatement(left, right, body);
    }

    // ECMA-262 13.8 The continue statement

    function parseContinueStatement(node) {
        var label = null, key;

        expectKeyword('continue');

        // Optimize the most common form: 'continue;'.
        if (source.charCodeAt(startIndex) === 0x3B) {
            lex();

            if (!state.inIteration) {
                throwError(Messages.IllegalContinue);
            }

            return node.finishContinueStatement(null);
        }

        if (hasLineTerminator) {
            if (!state.inIteration) {
                throwError(Messages.IllegalContinue);
            }

            return node.finishContinueStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !state.inIteration) {
            throwError(Messages.IllegalContinue);
        }

        return node.finishContinueStatement(label);
    }

    // ECMA-262 13.9 The break statement

    function parseBreakStatement(node) {
        var label = null, key;

        expectKeyword('break');

        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(lastIndex) === 0x3B) {
            lex();

            if (!(state.inIteration || state.inSwitch)) {
                throwError(Messages.IllegalBreak);
            }

            return node.finishBreakStatement(null);
        }

        if (hasLineTerminator) {
            if (!(state.inIteration || state.inSwitch)) {
                throwError(Messages.IllegalBreak);
            }
        } else if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !(state.inIteration || state.inSwitch)) {
            throwError(Messages.IllegalBreak);
        }

        return node.finishBreakStatement(label);
    }

    // ECMA-262 13.10 The return statement

    function parseReturnStatement(node) {
        var argument = null;

        expectKeyword('return');

        if (!state.inFunctionBody) {
            tolerateError(Messages.IllegalReturn);
        }

        // 'return' followed by a space and an identifier is very common.
        if (source.charCodeAt(lastIndex) === 0x20) {
            if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {
                argument = parseExpression();
                consumeSemicolon();
                return node.finishReturnStatement(argument);
            }
        }

        if (hasLineTerminator) {
            // HACK
            return node.finishReturnStatement(null);
        }

        if (!match(';')) {
            if (!match('}') && lookahead.type !== Token.EOF) {
                argument = parseExpression();
            }
        }

        consumeSemicolon();

        return node.finishReturnStatement(argument);
    }

    // ECMA-262 13.11 The with statement

    function parseWithStatement(node) {
        var object, body;

        if (strict) {
            tolerateError(Messages.StrictModeWith);
        }

        expectKeyword('with');

        expect('(');

        object = parseExpression();

        expect(')');

        body = parseStatement();

        return node.finishWithStatement(object, body);
    }

    // ECMA-262 13.12 The switch statement

    function parseSwitchCase() {
        var test, consequent = [], statement, node = new Node();

        if (matchKeyword('default')) {
            lex();
            test = null;
        } else {
            expectKeyword('case');
            test = parseExpression();
        }
        expect(':');

        while (startIndex < length) {
            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                break;
            }
            statement = parseStatementListItem();
            consequent.push(statement);
        }

        return node.finishSwitchCase(test, consequent);
    }

    function parseSwitchStatement(node) {
        var discriminant, cases, clause, oldInSwitch, defaultFound;

        expectKeyword('switch');

        expect('(');

        discriminant = parseExpression();

        expect(')');

        expect('{');

        cases = [];

        if (match('}')) {
            lex();
            return node.finishSwitchStatement(discriminant, cases);
        }

        oldInSwitch = state.inSwitch;
        state.inSwitch = true;
        defaultFound = false;

        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            clause = parseSwitchCase();
            if (clause.test === null) {
                if (defaultFound) {
                    throwError(Messages.MultipleDefaultsInSwitch);
                }
                defaultFound = true;
            }
            cases.push(clause);
        }

        state.inSwitch = oldInSwitch;

        expect('}');

        return node.finishSwitchStatement(discriminant, cases);
    }

    // ECMA-262 13.14 The throw statement

    function parseThrowStatement(node) {
        var argument;

        expectKeyword('throw');

        if (hasLineTerminator) {
            throwError(Messages.NewlineAfterThrow);
        }

        argument = parseExpression();

        consumeSemicolon();

        return node.finishThrowStatement(argument);
    }

    // ECMA-262 13.15 The try statement

    function parseCatchClause() {
        var param, params = [], paramMap = {}, key, i, body, node = new Node();

        expectKeyword('catch');

        expect('(');
        if (match(')')) {
            throwUnexpectedToken(lookahead);
        }

        param = parsePattern(params);
        for (i = 0; i < params.length; i++) {
            key = '$' + params[i].value;
            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
                tolerateError(Messages.DuplicateBinding, params[i].value);
            }
            paramMap[key] = true;
        }

        // ECMA-262 12.14.1
        if (strict && isRestrictedWord(param.name)) {
            tolerateError(Messages.StrictCatchVariable);
        }

        expect(')');
        body = parseBlock();
        return node.finishCatchClause(param, body);
    }

    function parseTryStatement(node) {
        var block, handler = null, finalizer = null;

        expectKeyword('try');

        block = parseBlock();

        if (matchKeyword('catch')) {
            handler = parseCatchClause();
        }

        if (matchKeyword('finally')) {
            lex();
            finalizer = parseBlock();
        }

        if (!handler && !finalizer) {
            throwError(Messages.NoCatchOrFinally);
        }

        return node.finishTryStatement(block, handler, finalizer);
    }

    // ECMA-262 13.16 The debugger statement

    function parseDebuggerStatement(node) {
        expectKeyword('debugger');

        consumeSemicolon();

        return node.finishDebuggerStatement();
    }

    // 13 Statements

    function parseStatement() {
        var type = lookahead.type,
            expr,
            labeledBody,
            key,
            node;

        if (type === Token.EOF) {
            throwUnexpectedToken(lookahead);
        }

        if (type === Token.Punctuator && lookahead.value === '{') {
            return parseBlock();
        }
        isAssignmentTarget = isBindingElement = true;
        node = new Node();

        if (type === Token.Punctuator) {
            switch (lookahead.value) {
            case ';':
                return parseEmptyStatement(node);
            case '(':
                return parseExpressionStatement(node);
            default:
                break;
            }
        } else if (type === Token.Keyword) {
            switch (lookahead.value) {
            case 'break':
                return parseBreakStatement(node);
            case 'continue':
                return parseContinueStatement(node);
            case 'debugger':
                return parseDebuggerStatement(node);
            case 'do':
                return parseDoWhileStatement(node);
            case 'for':
                return parseForStatement(node);
            case 'function':
                return parseFunctionDeclaration(node);
            case 'if':
                return parseIfStatement(node);
            case 'return':
                return parseReturnStatement(node);
            case 'switch':
                return parseSwitchStatement(node);
            case 'throw':
                return parseThrowStatement(node);
            case 'try':
                return parseTryStatement(node);
            case 'var':
                return parseVariableStatement(node);
            case 'while':
                return parseWhileStatement(node);
            case 'with':
                return parseWithStatement(node);
            default:
                break;
            }
        }

        expr = parseExpression();

        // ECMA-262 12.12 Labelled Statements
        if ((expr.type === Syntax.Identifier) && match(':')) {
            lex();

            key = '$' + expr.name;
            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.Redeclaration, 'Label', expr.name);
            }

            state.labelSet[key] = true;
            labeledBody = parseStatement();
            delete state.labelSet[key];
            return node.finishLabeledStatement(expr, labeledBody);
        }

        consumeSemicolon();

        return node.finishExpressionStatement(expr);
    }

    // ECMA-262 14.1 Function Definition

    function parseFunctionSourceElements() {
        var statement, body = [], token, directive, firstRestricted,
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody,
            node = new Node();

        expect('{');

        while (startIndex < length) {
            if (lookahead.type !== Token.StringLiteral) {
                break;
            }
            token = lookahead;

            statement = parseStatementListItem();
            body.push(statement);
            if (statement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;

        state.labelSet = {};
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = true;

        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            body.push(parseStatementListItem());
        }

        expect('}');

        state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;

        return node.finishBlockStatement(body);
    }

    function validateParam(options, param, name) {
        var key = '$' + name;
        if (strict) {
            if (isRestrictedWord(name)) {
                options.stricted = param;
                options.message = Messages.StrictParamName;
            }
            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = Messages.StrictParamDupe;
            }
        } else if (!options.firstRestricted) {
            if (isRestrictedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictParamName;
            } else if (isStrictModeReservedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictReservedWord;
            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = Messages.StrictParamDupe;
            }
        }
        options.paramSet[key] = true;
    }

    function parseParam(options) {
        var token, param, params = [], i, def;

        token = lookahead;
        if (token.value === '...') {
            param = parseRestElement(params);
            validateParam(options, param.argument, param.argument.name);
            options.params.push(param);
            options.defaults.push(null);
            return false;
        }

        param = parsePatternWithDefault(params);
        for (i = 0; i < params.length; i++) {
            validateParam(options, params[i], params[i].value);
        }

        if (param.type === Syntax.AssignmentPattern) {
            def = param.right;
            param = param.left;
            ++options.defaultCount;
        }

        options.params.push(param);
        options.defaults.push(def);

        return !match(')');
    }

    function parseParams(firstRestricted) {
        var options;

        options = {
            params: [],
            defaultCount: 0,
            defaults: [],
            firstRestricted: firstRestricted
        };

        expect('(');

        if (!match(')')) {
            options.paramSet = {};
            while (startIndex < length) {
                if (!parseParam(options)) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        if (options.defaultCount === 0) {
            options.defaults = [];
        }

        return {
            params: options.params,
            defaults: options.defaults,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
        };
    }

    function parseFunctionDeclaration(node, identifierIsOptional) {
        var id = null, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict,
            isGenerator, previousAllowYield;

        previousAllowYield = state.allowYield;

        expectKeyword('function');

        isGenerator = match('*');
        if (isGenerator) {
            lex();
        }

        if (!identifierIsOptional || !match('(')) {
            token = lookahead;
            id = parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        state.allowYield = !isGenerator;
        tmp = parseParams(firstRestricted);
        params = tmp.params;
        defaults = tmp.defaults;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }


        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwUnexpectedToken(firstRestricted, message);
        }
        if (strict && stricted) {
            tolerateUnexpectedToken(stricted, message);
        }

        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishFunctionDeclaration(id, params, defaults, body, isGenerator);
    }

    function parseFunctionExpression() {
        var token, id = null, stricted, firstRestricted, message, tmp,
            params = [], defaults = [], body, previousStrict, node = new Node(),
            isGenerator, previousAllowYield;

        previousAllowYield = state.allowYield;

        expectKeyword('function');

        isGenerator = match('*');
        if (isGenerator) {
            lex();
        }

        state.allowYield = !isGenerator;
        if (!match('(')) {
            token = lookahead;
            id = (!strict && !isGenerator && matchKeyword('yield')) ? parseNonComputedProperty() : parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        defaults = tmp.defaults;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwUnexpectedToken(firstRestricted, message);
        }
        if (strict && stricted) {
            tolerateUnexpectedToken(stricted, message);
        }
        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishFunctionExpression(id, params, defaults, body, isGenerator);
    }

    // ECMA-262 14.5 Class Definitions

    function parseClassBody() {
        var classBody, token, isStatic, hasConstructor = false, body, method, computed, key;

        classBody = new Node();

        expect('{');
        body = [];
        while (!match('}')) {
            if (match(';')) {
                lex();
            } else {
                method = new Node();
                token = lookahead;
                isStatic = false;
                computed = match('[');
                if (match('*')) {
                    lex();
                } else {
                    key = parseObjectPropertyKey();
                    if (key.name === 'static' && (lookaheadPropertyName() || match('*'))) {
                        token = lookahead;
                        isStatic = true;
                        computed = match('[');
                        if (match('*')) {
                            lex();
                        } else {
                            key = parseObjectPropertyKey();
                        }
                    }
                }
                method = tryParseMethodDefinition(token, key, computed, method);
                if (method) {
                    method['static'] = isStatic; // jscs:ignore requireDotNotation
                    if (method.kind === 'init') {
                        method.kind = 'method';
                    }
                    if (!isStatic) {
                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'constructor') {
                            if (method.kind !== 'method' || !method.method || method.value.generator) {
                                throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);
                            }
                            if (hasConstructor) {
                                throwUnexpectedToken(token, Messages.DuplicateConstructor);
                            } else {
                                hasConstructor = true;
                            }
                            method.kind = 'constructor';
                        }
                    } else {
                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'prototype') {
                            throwUnexpectedToken(token, Messages.StaticPrototype);
                        }
                    }
                    method.type = Syntax.MethodDefinition;
                    delete method.method;
                    delete method.shorthand;
                    body.push(method);
                } else {
                    throwUnexpectedToken(lookahead);
                }
            }
        }
        lex();
        return classBody.finishClassBody(body);
    }

    function parseClassDeclaration(identifierIsOptional) {
        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
        strict = true;

        expectKeyword('class');

        if (!identifierIsOptional || lookahead.type === Token.Identifier) {
            id = parseVariableIdentifier();
        }

        if (matchKeyword('extends')) {
            lex();
            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
        }
        classBody = parseClassBody();
        strict = previousStrict;

        return classNode.finishClassDeclaration(id, superClass, classBody);
    }

    function parseClassExpression() {
        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
        strict = true;

        expectKeyword('class');

        if (lookahead.type === Token.Identifier) {
            id = parseVariableIdentifier();
        }

        if (matchKeyword('extends')) {
            lex();
            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
        }
        classBody = parseClassBody();
        strict = previousStrict;

        return classNode.finishClassExpression(id, superClass, classBody);
    }

    // ECMA-262 15.2 Modules

    function parseModuleSpecifier() {
        var node = new Node();

        if (lookahead.type !== Token.StringLiteral) {
            throwError(Messages.InvalidModuleSpecifier);
        }
        return node.finishLiteral(lex());
    }

    // ECMA-262 15.2.3 Exports

    function parseExportSpecifier() {
        var exported, local, node = new Node(), def;
        if (matchKeyword('default')) {
            // export {default} from 'something';
            def = new Node();
            lex();
            local = def.finishIdentifier('default');
        } else {
            local = parseVariableIdentifier();
        }
        if (matchContextualKeyword('as')) {
            lex();
            exported = parseNonComputedProperty();
        }
        return node.finishExportSpecifier(local, exported);
    }

    function parseExportNamedDeclaration(node) {
        var declaration = null,
            isExportFromIdentifier,
            src = null, specifiers = [];

        // non-default export
        if (lookahead.type === Token.Keyword) {
            // covers:
            // export var f = 1;
            switch (lookahead.value) {
                case 'let':
                case 'const':
                    declaration = parseLexicalDeclaration({inFor: false});
                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
                case 'var':
                case 'class':
                case 'function':
                    declaration = parseStatementListItem();
                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
            }
        }

        expect('{');
        while (!match('}')) {
            isExportFromIdentifier = isExportFromIdentifier || matchKeyword('default');
            specifiers.push(parseExportSpecifier());
            if (!match('}')) {
                expect(',');
                if (match('}')) {
                    break;
                }
            }
        }
        expect('}');

        if (matchContextualKeyword('from')) {
            // covering:
            // export {default} from 'foo';
            // export {foo} from 'foo';
            lex();
            src = parseModuleSpecifier();
            consumeSemicolon();
        } else if (isExportFromIdentifier) {
            // covering:
            // export {default}; // missing fromClause
            throwError(lookahead.value ?
                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
        } else {
            // cover
            // export {foo};
            consumeSemicolon();
        }
        return node.finishExportNamedDeclaration(declaration, specifiers, src);
    }

    function parseExportDefaultDeclaration(node) {
        var declaration = null,
            expression = null;

        // covers:
        // export default ...
        expectKeyword('default');

        if (matchKeyword('function')) {
            // covers:
            // export default function foo () {}
            // export default function () {}
            declaration = parseFunctionDeclaration(new Node(), true);
            return node.finishExportDefaultDeclaration(declaration);
        }
        if (matchKeyword('class')) {
            declaration = parseClassDeclaration(true);
            return node.finishExportDefaultDeclaration(declaration);
        }

        if (matchContextualKeyword('from')) {
            throwError(Messages.UnexpectedToken, lookahead.value);
        }

        // covers:
        // export default {};
        // export default [];
        // export default (1 + 2);
        if (match('{')) {
            expression = parseObjectInitializer();
        } else if (match('[')) {
            expression = parseArrayInitializer();
        } else {
            expression = parseAssignmentExpression();
        }
        consumeSemicolon();
        return node.finishExportDefaultDeclaration(expression);
    }

    function parseExportAllDeclaration(node) {
        var src;

        // covers:
        // export * from 'foo';
        expect('*');
        if (!matchContextualKeyword('from')) {
            throwError(lookahead.value ?
                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
        }
        lex();
        src = parseModuleSpecifier();
        consumeSemicolon();

        return node.finishExportAllDeclaration(src);
    }

    function parseExportDeclaration() {
        var node = new Node();
        if (state.inFunctionBody) {
            throwError(Messages.IllegalExportDeclaration);
        }

        expectKeyword('export');

        if (matchKeyword('default')) {
            return parseExportDefaultDeclaration(node);
        }
        if (match('*')) {
            return parseExportAllDeclaration(node);
        }
        return parseExportNamedDeclaration(node);
    }

    // ECMA-262 15.2.2 Imports

    function parseImportSpecifier() {
        // import {<foo as bar>} ...;
        var local, imported, node = new Node();

        imported = parseNonComputedProperty();
        if (matchContextualKeyword('as')) {
            lex();
            local = parseVariableIdentifier();
        }

        return node.finishImportSpecifier(local, imported);
    }

    function parseNamedImports() {
        var specifiers = [];
        // {foo, bar as bas}
        expect('{');
        while (!match('}')) {
            specifiers.push(parseImportSpecifier());
            if (!match('}')) {
                expect(',');
                if (match('}')) {
                    break;
                }
            }
        }
        expect('}');
        return specifiers;
    }

    function parseImportDefaultSpecifier() {
        // import <foo> ...;
        var local, node = new Node();

        local = parseNonComputedProperty();

        return node.finishImportDefaultSpecifier(local);
    }

    function parseImportNamespaceSpecifier() {
        // import <* as foo> ...;
        var local, node = new Node();

        expect('*');
        if (!matchContextualKeyword('as')) {
            throwError(Messages.NoAsAfterImportNamespace);
        }
        lex();
        local = parseNonComputedProperty();

        return node.finishImportNamespaceSpecifier(local);
    }

    function parseImportDeclaration() {
        var specifiers = [], src, node = new Node();

        if (state.inFunctionBody) {
            throwError(Messages.IllegalImportDeclaration);
        }

        expectKeyword('import');

        if (lookahead.type === Token.StringLiteral) {
            // import 'foo';
            src = parseModuleSpecifier();
        } else {

            if (match('{')) {
                // import {bar}
                specifiers = specifiers.concat(parseNamedImports());
            } else if (match('*')) {
                // import * as foo
                specifiers.push(parseImportNamespaceSpecifier());
            } else if (isIdentifierName(lookahead) && !matchKeyword('default')) {
                // import foo
                specifiers.push(parseImportDefaultSpecifier());
                if (match(',')) {
                    lex();
                    if (match('*')) {
                        // import foo, * as foo
                        specifiers.push(parseImportNamespaceSpecifier());
                    } else if (match('{')) {
                        // import foo, {bar}
                        specifiers = specifiers.concat(parseNamedImports());
                    } else {
                        throwUnexpectedToken(lookahead);
                    }
                }
            } else {
                throwUnexpectedToken(lex());
            }

            if (!matchContextualKeyword('from')) {
                throwError(lookahead.value ?
                        Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
            }
            lex();
            src = parseModuleSpecifier();
        }

        consumeSemicolon();
        return node.finishImportDeclaration(specifiers, src);
    }

    // ECMA-262 15.1 Scripts

    function parseScriptBody() {
        var statement, body = [], token, directive, firstRestricted;

        while (startIndex < length) {
            token = lookahead;
            if (token.type !== Token.StringLiteral) {
                break;
            }

            statement = parseStatementListItem();
            body.push(statement);
            if (statement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        while (startIndex < length) {
            statement = parseStatementListItem();
            /* istanbul ignore if */
            if (typeof statement === 'undefined') {
                break;
            }
            body.push(statement);
        }
        return body;
    }

    function parseProgram() {
        var body, node;

        peek();
        node = new Node();

        body = parseScriptBody();
        return node.finishProgram(body, state.sourceType);
    }

    function filterTokenLocation() {
        var i, entry, token, tokens = [];

        for (i = 0; i < extra.tokens.length; ++i) {
            entry = extra.tokens[i];
            token = {
                type: entry.type,
                value: entry.value
            };
            if (entry.regex) {
                token.regex = {
                    pattern: entry.regex.pattern,
                    flags: entry.regex.flags
                };
            }
            if (extra.range) {
                token.range = entry.range;
            }
            if (extra.loc) {
                token.loc = entry.loc;
            }
            tokens.push(token);
        }

        extra.tokens = tokens;
    }

    function tokenize(code, options, delegate) {
        var toString,
            tokens;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            allowYield: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1,
            curlyStack: []
        };

        extra = {};

        // Options matching.
        options = options || {};

        // Of course we collect tokens here.
        options.tokens = true;
        extra.tokens = [];
        extra.tokenValues = [];
        extra.tokenize = true;
        extra.delegate = delegate;

        // The following two fields are necessary to compute the Regex tokens.
        extra.openParenToken = -1;
        extra.openCurlyToken = -1;

        extra.range = (typeof options.range === 'boolean') && options.range;
        extra.loc = (typeof options.loc === 'boolean') && options.loc;

        if (typeof options.comment === 'boolean' && options.comment) {
            extra.comments = [];
        }
        if (typeof options.tolerant === 'boolean' && options.tolerant) {
            extra.errors = [];
        }

        try {
            peek();
            if (lookahead.type === Token.EOF) {
                return extra.tokens;
            }

            lex();
            while (lookahead.type !== Token.EOF) {
                try {
                    lex();
                } catch (lexError) {
                    if (extra.errors) {
                        recordError(lexError);
                        // We have to break on the first error
                        // to avoid infinite loops.
                        break;
                    } else {
                        throw lexError;
                    }
                }
            }

            tokens = extra.tokens;
            if (typeof extra.errors !== 'undefined') {
                tokens.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }
        return tokens;
    }

    function parse(code, options) {
        var program, toString;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            allowYield: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1,
            curlyStack: [],
            sourceType: 'script'
        };
        strict = false;

        extra = {};
        if (typeof options !== 'undefined') {
            extra.range = (typeof options.range === 'boolean') && options.range;
            extra.loc = (typeof options.loc === 'boolean') && options.loc;
            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

            if (extra.loc && options.source !== null && options.source !== undefined) {
                extra.source = toString(options.source);
            }

            if (typeof options.tokens === 'boolean' && options.tokens) {
                extra.tokens = [];
            }
            if (typeof options.comment === 'boolean' && options.comment) {
                extra.comments = [];
            }
            if (typeof options.tolerant === 'boolean' && options.tolerant) {
                extra.errors = [];
            }
            if (extra.attachComment) {
                extra.range = true;
                extra.comments = [];
                extra.bottomRightStack = [];
                extra.trailingComments = [];
                extra.leadingComments = [];
            }
            if (options.sourceType === 'module') {
                // very restrictive condition for now
                state.sourceType = options.sourceType;
                strict = true;
            }
        }

        try {
            program = parseProgram();
            if (typeof extra.comments !== 'undefined') {
                program.comments = extra.comments;
            }
            if (typeof extra.tokens !== 'undefined') {
                filterTokenLocation();
                program.tokens = extra.tokens;
            }
            if (typeof extra.errors !== 'undefined') {
                program.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }

        return program;
    }

    // Sync with *.json manifests.
    exports.version = '2.7.3';

    exports.tokenize = tokenize;

    exports.parse = parse;

    // Deep copy.
    /* istanbul ignore next */
    exports.Syntax = (function () {
        var name, types = {};

        if (typeof Object.create === 'function') {
            types = Object.create(null);
        }

        for (name in Syntax) {
            if (Syntax.hasOwnProperty(name)) {
                types[name] = Syntax[name];
            }
        }

        if (typeof Object.freeze === 'function') {
            Object.freeze(types);
        }

        return types;
    }());

}));
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],20:[function(require,module,exports){
/*
  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*jslint vars:false, bitwise:true*/
/*jshint indent:4*/
/*global exports:true*/
(function clone(exports) {
    'use strict';

    var Syntax,
        isArray,
        VisitorOption,
        VisitorKeys,
        objectCreate,
        objectKeys,
        BREAK,
        SKIP,
        REMOVE;

    function ignoreJSHintError() { }

    isArray = Array.isArray;
    if (!isArray) {
        isArray = function isArray(array) {
            return Object.prototype.toString.call(array) === '[object Array]';
        };
    }

    function deepCopy(obj) {
        var ret = {}, key, val;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                val = obj[key];
                if (typeof val === 'object' && val !== null) {
                    ret[key] = deepCopy(val);
                } else {
                    ret[key] = val;
                }
            }
        }
        return ret;
    }

    function shallowCopy(obj) {
        var ret = {}, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }
    ignoreJSHintError(shallowCopy);

    // based on LLVM libc++ upper_bound / lower_bound
    // MIT License

    function upperBound(array, func) {
        var diff, len, i, current;

        len = array.length;
        i = 0;

        while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                len = diff;
            } else {
                i = current + 1;
                len -= diff + 1;
            }
        }
        return i;
    }

    function lowerBound(array, func) {
        var diff, len, i, current;

        len = array.length;
        i = 0;

        while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                i = current + 1;
                len -= diff + 1;
            } else {
                len = diff;
            }
        }
        return i;
    }
    ignoreJSHintError(lowerBound);

    objectCreate = Object.create || (function () {
        function F() { }

        return function (o) {
            F.prototype = o;
            return new F();
        };
    })();

    objectKeys = Object.keys || function (o) {
        var keys = [], key;
        for (key in o) {
            keys.push(key);
        }
        return keys;
    };

    function extend(to, from) {
        var keys = objectKeys(from), key, i, len;
        for (i = 0, len = keys.length; i < len; i += 1) {
            key = keys[i];
            to[key] = from[key];
        }
        return to;
    }

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.
        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    VisitorKeys = {
        AssignmentExpression: ['left', 'right'],
        AssignmentPattern: ['left', 'right'],
        ArrayExpression: ['elements'],
        ArrayPattern: ['elements'],
        ArrowFunctionExpression: ['params', 'body'],
        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.
        BlockStatement: ['body'],
        BinaryExpression: ['left', 'right'],
        BreakStatement: ['label'],
        CallExpression: ['callee', 'arguments'],
        CatchClause: ['param', 'body'],
        ClassBody: ['body'],
        ClassDeclaration: ['id', 'superClass', 'body'],
        ClassExpression: ['id', 'superClass', 'body'],
        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.
        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
        ConditionalExpression: ['test', 'consequent', 'alternate'],
        ContinueStatement: ['label'],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: ['body', 'test'],
        EmptyStatement: [],
        ExportAllDeclaration: ['source'],
        ExportDefaultDeclaration: ['declaration'],
        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],
        ExportSpecifier: ['exported', 'local'],
        ExpressionStatement: ['expression'],
        ForStatement: ['init', 'test', 'update', 'body'],
        ForInStatement: ['left', 'right', 'body'],
        ForOfStatement: ['left', 'right', 'body'],
        FunctionDeclaration: ['id', 'params', 'body'],
        FunctionExpression: ['id', 'params', 'body'],
        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
        Identifier: [],
        IfStatement: ['test', 'consequent', 'alternate'],
        ImportDeclaration: ['specifiers', 'source'],
        ImportDefaultSpecifier: ['local'],
        ImportNamespaceSpecifier: ['local'],
        ImportSpecifier: ['imported', 'local'],
        Literal: [],
        LabeledStatement: ['label', 'body'],
        LogicalExpression: ['left', 'right'],
        MemberExpression: ['object', 'property'],
        MetaProperty: ['meta', 'property'],
        MethodDefinition: ['key', 'value'],
        ModuleSpecifier: [],
        NewExpression: ['callee', 'arguments'],
        ObjectExpression: ['properties'],
        ObjectPattern: ['properties'],
        Program: ['body'],
        Property: ['key', 'value'],
        RestElement: [ 'argument' ],
        ReturnStatement: ['argument'],
        SequenceExpression: ['expressions'],
        SpreadElement: ['argument'],
        Super: [],
        SwitchStatement: ['discriminant', 'cases'],
        SwitchCase: ['test', 'consequent'],
        TaggedTemplateExpression: ['tag', 'quasi'],
        TemplateElement: [],
        TemplateLiteral: ['quasis', 'expressions'],
        ThisExpression: [],
        ThrowStatement: ['argument'],
        TryStatement: ['block', 'handler', 'finalizer'],
        UnaryExpression: ['argument'],
        UpdateExpression: ['argument'],
        VariableDeclaration: ['declarations'],
        VariableDeclarator: ['id', 'init'],
        WhileStatement: ['test', 'body'],
        WithStatement: ['object', 'body'],
        YieldExpression: ['argument']
    };

    // unique id
    BREAK = {};
    SKIP = {};
    REMOVE = {};

    VisitorOption = {
        Break: BREAK,
        Skip: SKIP,
        Remove: REMOVE
    };

    function Reference(parent, key) {
        this.parent = parent;
        this.key = key;
    }

    Reference.prototype.replace = function replace(node) {
        this.parent[this.key] = node;
    };

    Reference.prototype.remove = function remove() {
        if (isArray(this.parent)) {
            this.parent.splice(this.key, 1);
            return true;
        } else {
            this.replace(null);
            return false;
        }
    };

    function Element(node, path, wrap, ref) {
        this.node = node;
        this.path = path;
        this.wrap = wrap;
        this.ref = ref;
    }

    function Controller() { }

    // API:
    // return property path array from root to current node
    Controller.prototype.path = function path() {
        var i, iz, j, jz, result, element;

        function addToPath(result, path) {
            if (isArray(path)) {
                for (j = 0, jz = path.length; j < jz; ++j) {
                    result.push(path[j]);
                }
            } else {
                result.push(path);
            }
        }

        // root node
        if (!this.__current.path) {
            return null;
        }

        // first node is sentinel, second node is root element
        result = [];
        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
            element = this.__leavelist[i];
            addToPath(result, element.path);
        }
        addToPath(result, this.__current.path);
        return result;
    };

    // API:
    // return type of current node
    Controller.prototype.type = function () {
        var node = this.current();
        return node.type || this.__current.wrap;
    };

    // API:
    // return array of parent elements
    Controller.prototype.parents = function parents() {
        var i, iz, result;

        // first node is sentinel
        result = [];
        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
            result.push(this.__leavelist[i].node);
        }

        return result;
    };

    // API:
    // return current node
    Controller.prototype.current = function current() {
        return this.__current.node;
    };

    Controller.prototype.__execute = function __execute(callback, element) {
        var previous, result;

        result = undefined;

        previous  = this.__current;
        this.__current = element;
        this.__state = null;
        if (callback) {
            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
        }
        this.__current = previous;

        return result;
    };

    // API:
    // notify control skip / break
    Controller.prototype.notify = function notify(flag) {
        this.__state = flag;
    };

    // API:
    // skip child nodes of current node
    Controller.prototype.skip = function () {
        this.notify(SKIP);
    };

    // API:
    // break traversals
    Controller.prototype['break'] = function () {
        this.notify(BREAK);
    };

    // API:
    // remove node
    Controller.prototype.remove = function () {
        this.notify(REMOVE);
    };

    Controller.prototype.__initialize = function(root, visitor) {
        this.visitor = visitor;
        this.root = root;
        this.__worklist = [];
        this.__leavelist = [];
        this.__current = null;
        this.__state = null;
        this.__fallback = null;
        if (visitor.fallback === 'iteration') {
            this.__fallback = objectKeys;
        } else if (typeof visitor.fallback === 'function') {
            this.__fallback = visitor.fallback;
        }

        this.__keys = VisitorKeys;
        if (visitor.keys) {
            this.__keys = extend(objectCreate(this.__keys), visitor.keys);
        }
    };

    function isNode(node) {
        if (node == null) {
            return false;
        }
        return typeof node === 'object' && typeof node.type === 'string';
    }

    function isProperty(nodeType, key) {
        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
    }

    Controller.prototype.traverse = function traverse(root, visitor) {
        var worklist,
            leavelist,
            element,
            node,
            nodeType,
            ret,
            key,
            current,
            current2,
            candidates,
            candidate,
            sentinel;

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        worklist.push(new Element(root, null, null, null));
        leavelist.push(new Element(null, null, null, null));

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                ret = this.__execute(visitor.leave, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }
                continue;
            }

            if (element.node) {

                ret = this.__execute(visitor.enter, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }

                worklist.push(sentinel);
                leavelist.push(element);

                if (this.__state === SKIP || ret === SKIP) {
                    continue;
                }

                node = element.node;
                nodeType = node.type || element.wrap;
                candidates = this.__keys[nodeType];
                if (!candidates) {
                    if (this.__fallback) {
                        candidates = this.__fallback(node);
                    } else {
                        throw new Error('Unknown node type ' + nodeType + '.');
                    }
                }

                current = candidates.length;
                while ((current -= 1) >= 0) {
                    key = candidates[current];
                    candidate = node[key];
                    if (!candidate) {
                        continue;
                    }

                    if (isArray(candidate)) {
                        current2 = candidate.length;
                        while ((current2 -= 1) >= 0) {
                            if (!candidate[current2]) {
                                continue;
                            }
                            if (isProperty(nodeType, candidates[current])) {
                                element = new Element(candidate[current2], [key, current2], 'Property', null);
                            } else if (isNode(candidate[current2])) {
                                element = new Element(candidate[current2], [key, current2], null, null);
                            } else {
                                continue;
                            }
                            worklist.push(element);
                        }
                    } else if (isNode(candidate)) {
                        worklist.push(new Element(candidate, key, null, null));
                    }
                }
            }
        }
    };

    Controller.prototype.replace = function replace(root, visitor) {
        var worklist,
            leavelist,
            node,
            nodeType,
            target,
            element,
            current,
            current2,
            candidates,
            candidate,
            sentinel,
            outer,
            key;

        function removeElem(element) {
            var i,
                key,
                nextElem,
                parent;

            if (element.ref.remove()) {
                // When the reference is an element of an array.
                key = element.ref.key;
                parent = element.ref.parent;

                // If removed from array, then decrease following items' keys.
                i = worklist.length;
                while (i--) {
                    nextElem = worklist[i];
                    if (nextElem.ref && nextElem.ref.parent === parent) {
                        if  (nextElem.ref.key < key) {
                            break;
                        }
                        --nextElem.ref.key;
                    }
                }
            }
        }

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        outer = {
            root: root
        };
        element = new Element(root, null, null, new Reference(outer, 'root'));
        worklist.push(element);
        leavelist.push(element);

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                target = this.__execute(visitor.leave, element);

                // node may be replaced with null,
                // so distinguish between undefined and null in this place
                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                    // replace
                    element.ref.replace(target);
                }

                if (this.__state === REMOVE || target === REMOVE) {
                    removeElem(element);
                }

                if (this.__state === BREAK || target === BREAK) {
                    return outer.root;
                }
                continue;
            }

            target = this.__execute(visitor.enter, element);

            // node may be replaced with null,
            // so distinguish between undefined and null in this place
            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                // replace
                element.ref.replace(target);
                element.node = target;
            }

            if (this.__state === REMOVE || target === REMOVE) {
                removeElem(element);
                element.node = null;
            }

            if (this.__state === BREAK || target === BREAK) {
                return outer.root;
            }

            // node may be null
            node = element.node;
            if (!node) {
                continue;
            }

            worklist.push(sentinel);
            leavelist.push(element);

            if (this.__state === SKIP || target === SKIP) {
                continue;
            }

            nodeType = node.type || element.wrap;
            candidates = this.__keys[nodeType];
            if (!candidates) {
                if (this.__fallback) {
                    candidates = this.__fallback(node);
                } else {
                    throw new Error('Unknown node type ' + nodeType + '.');
                }
            }

            current = candidates.length;
            while ((current -= 1) >= 0) {
                key = candidates[current];
                candidate = node[key];
                if (!candidate) {
                    continue;
                }

                if (isArray(candidate)) {
                    current2 = candidate.length;
                    while ((current2 -= 1) >= 0) {
                        if (!candidate[current2]) {
                            continue;
                        }
                        if (isProperty(nodeType, candidates[current])) {
                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));
                        } else if (isNode(candidate[current2])) {
                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
                        } else {
                            continue;
                        }
                        worklist.push(element);
                    }
                } else if (isNode(candidate)) {
                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));
                }
            }
        }

        return outer.root;
    };

    function traverse(root, visitor) {
        var controller = new Controller();
        return controller.traverse(root, visitor);
    }

    function replace(root, visitor) {
        var controller = new Controller();
        return controller.replace(root, visitor);
    }

    function extendCommentRange(comment, tokens) {
        var target;

        target = upperBound(tokens, function search(token) {
            return token.range[0] > comment.range[0];
        });

        comment.extendedRange = [comment.range[0], comment.range[1]];

        if (target !== tokens.length) {
            comment.extendedRange[1] = tokens[target].range[0];
        }

        target -= 1;
        if (target >= 0) {
            comment.extendedRange[0] = tokens[target].range[1];
        }

        return comment;
    }

    function attachComments(tree, providedComments, tokens) {
        // At first, we should calculate extended comment ranges.
        var comments = [], comment, len, i, cursor;

        if (!tree.range) {
            throw new Error('attachComments needs range information');
        }

        // tokens array is empty, we attach comments to tree as 'leadingComments'
        if (!tokens.length) {
            if (providedComments.length) {
                for (i = 0, len = providedComments.length; i < len; i += 1) {
                    comment = deepCopy(providedComments[i]);
                    comment.extendedRange = [0, tree.range[0]];
                    comments.push(comment);
                }
                tree.leadingComments = comments;
            }
            return tree;
        }

        for (i = 0, len = providedComments.length; i < len; i += 1) {
            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
        }

        // This is based on John Freeman's implementation.
        cursor = 0;
        traverse(tree, {
            enter: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (comment.extendedRange[1] > node.range[0]) {
                        break;
                    }

                    if (comment.extendedRange[1] === node.range[0]) {
                        if (!node.leadingComments) {
                            node.leadingComments = [];
                        }
                        node.leadingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        cursor = 0;
        traverse(tree, {
            leave: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (node.range[1] < comment.extendedRange[0]) {
                        break;
                    }

                    if (node.range[1] === comment.extendedRange[0]) {
                        if (!node.trailingComments) {
                            node.trailingComments = [];
                        }
                        node.trailingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        return tree;
    }

    exports.version = require('./package.json').version;
    exports.Syntax = Syntax;
    exports.traverse = traverse;
    exports.replace = replace;
    exports.attachComments = attachComments;
    exports.VisitorKeys = VisitorKeys;
    exports.VisitorOption = VisitorOption;
    exports.Controller = Controller;
    exports.cloneEnvironment = function () { return clone({}); };

    return exports;
}(exports));
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./package.json":21}],21:[function(require,module,exports){
module.exports={
  "_from": "estraverse@^4.1.x",
  "_id": "estraverse@4.2.0",
  "_inBundle": false,
  "_integrity": "sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=",
  "_location": "/estraverse",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "estraverse@^4.1.x",
    "name": "estraverse",
    "escapedName": "estraverse",
    "rawSpec": "^4.1.x",
    "saveSpec": null,
    "fetchSpec": "^4.1.x"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz",
  "_shasum": "0dee3fed31fcd469618ce7342099fc1afa0bdb13",
  "_spec": "estraverse@^4.1.x",
  "_where": "/data/chalmers/project/jsflow",
  "bugs": {
    "url": "https://github.com/estools/estraverse/issues"
  },
  "bundleDependencies": false,
  "deprecated": false,
  "description": "ECMAScript JS AST traversal functions",
  "devDependencies": {
    "babel-preset-es2015": "^6.3.13",
    "babel-register": "^6.3.13",
    "chai": "^2.1.1",
    "espree": "^1.11.0",
    "gulp": "^3.8.10",
    "gulp-bump": "^0.2.2",
    "gulp-filter": "^2.0.0",
    "gulp-git": "^1.0.1",
    "gulp-tag-version": "^1.2.1",
    "jshint": "^2.5.6",
    "mocha": "^2.1.0"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/estools/estraverse",
  "license": "BSD-2-Clause",
  "main": "estraverse.js",
  "maintainers": [
    {
      "name": "Yusuke Suzuki",
      "email": "utatane.tea@gmail.com",
      "url": "http://github.com/Constellation"
    }
  ],
  "name": "estraverse",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/estools/estraverse.git"
  },
  "scripts": {
    "lint": "jshint estraverse.js",
    "test": "npm run-script lint && npm run-script unit-test",
    "unit-test": "mocha --compilers js:babel-register"
  },
  "version": "4.2.0"
}

},{}],22:[function(require,module,exports){
(function (global){
//     Underscore.js 1.9.1
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define == 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}());

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],23:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var constants = require("../constants");
var function_1 = require("../function");
var label_1 = require("../label");
var ecma_1 = require("../ecma");
var ArrayObject_1 = require("../Objects/ArrayObject");
var HasInstance_1 = require("../HasInstance");
// ------------------------------------------------------------
// 15.4.3
var ArrayConstructor = /** @class */ (function (_super) {
    __extends(ArrayConstructor, _super);
    function ArrayConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    ArrayConstructor.prototype.Setup = function () {
        this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, label_1.bot);
        ecma_1.DefineFFF(this, constants.length, 1);
        ecma_1.DefineFFF(this, constants.prototype, monitor.instances.ArrayPrototype);
        ecma_1.DefineTFT(this, constants.isArray, new function_1.BuiltinFunctionObject(isArray, 1, Array.isArray));
    };
    ArrayConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    // ------------------------------------------------------------
    ArrayConstructor.prototype.Call = function (thisArg, args) {
        return this.Construct(args);
    };
    // ------------------------------------------------------------
    ArrayConstructor.prototype.Construct = function (args) {
        var array;
        var len = args.length;
        if (len === 0 || len >= 2) {
            array = ArrayObject_1.ArrayObject.fromValueArray(args, label_1.bot);
        }
        else {
            var arg = args[0];
            if (typeof arg.value === 'number') {
                array = new ArrayObject_1.ArrayObject();
                array.properties.length = arg.value;
                array.labels.length = {
                    value: arg.label,
                    existence: label_1.bot
                };
            }
            else {
                array = ArrayObject_1.ArrayObject.fromValueArray(args, label_1.bot);
            }
        }
        return new values_1.Value(array, label_1.bot);
    };
    return ArrayConstructor;
}(ecma_1.Ecma));
exports.ArrayConstructor = ArrayConstructor;
// ------------------------------------------------------------
// isArray, 15.4.3.1
var isArray = function (thisArg, args) {
    var arg = args[0] || new values_1.Value(undefined, label_1.bot);
    if (arg.value === null || typeof arg.value !== 'object') {
        return new values_1.Value(false, arg.label);
    }
    return new values_1.Value(arg.value.Class === 'Array', arg.label);
};

},{"../HasInstance":37,"../Objects/ArrayObject":38,"../constants":50,"../ecma":53,"../function":57,"../label":60,"../values":75}],24:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var constants = require("../constants");
var HasInstance_1 = require("../HasInstance");
var ecma_1 = require("../ecma");
var label_1 = require("../label");
var BooleanObject_1 = require("../Objects/BooleanObject");
var ToBoolean_1 = require("../Conversion/ToBoolean");
// ------------------------------------------------------------
// 15.6.2 -----------------------------------------------------
var BooleanConstructor = /** @class */ (function (_super) {
    __extends(BooleanConstructor, _super);
    function BooleanConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    BooleanConstructor.prototype.Setup = function () {
        this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, label_1.bot);
        ecma_1.DefineFFF(this, constants.length, 1); //REMOVE ?
        ecma_1.DefineFFF(this, constants.prototype, monitor.instances.BooleanPrototype);
    };
    BooleanConstructor.prototype.HasInstance = function (V) {
        HasInstance_1.HasInstance.call(this, V);
    };
    // 15.6.1.1
    BooleanConstructor.prototype.Call = function (thisArg, args) {
        var arg0 = args[0] ? args[0] : new values_1.Value(undefined, label_1.bot);
        return ToBoolean_1.ToBoolean(arg0);
    };
    // 15.6.2.1
    BooleanConstructor.prototype.Construct = function (args) {
        var arg0 = args[0] ? args[0] : new values_1.Value(undefined, label_1.bot);
        var b = ToBoolean_1.ToBoolean(arg0);
        var obj = new BooleanObject_1.BooleanObject(b.value, b.label);
        return new values_1.Value(obj, label_1.bot);
    };
    return BooleanConstructor;
}(ecma_1.Ecma));
exports.BooleanConstructor = BooleanConstructor;

},{"../Conversion/ToBoolean":28,"../HasInstance":37,"../Objects/BooleanObject":39,"../constants":50,"../ecma":53,"../label":60,"../values":75}],25:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var values_1 = require("../values");
var ecma_1 = require("../ecma");
var constants = require("../constants");
var FunctionObject_1 = require("../Objects/FunctionObject");
var HasInstance_1 = require("../HasInstance");
var esprima = require("esprima");
var ToString_1 = require("../Conversion/ToString");
// ------------------------------------------------------------
// Function Constructor, 15.3.2 (15.3.1, 15.3.1.1)
var FunctionConstructor = /** @class */ (function (_super) {
    __extends(FunctionConstructor, _super);
    function FunctionConstructor(host) {
        var _this = _super.call(this) || this;
        // Properties, 15.3.3.
        _this.Class = 'Function';
        _this.host = host;
        _this.Extensible = true;
        return _this;
    }
    FunctionConstructor.prototype.Setup = function () {
        // 15.3.3.1 
        ecma_1.DefineFFF(this, constants.prototype, monitor.instances.FunctionPrototype);
        this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, label_1.bot);
        // 15.3.3.2 
        ecma_1.DefineFFF(this, constants.length, 1);
    };
    // ---
    FunctionConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    // 15.3.1
    FunctionConstructor.prototype.Call = function (thisArg, args) {
        return this.Construct(args);
    };
    // 15.3.2
    FunctionConstructor.prototype.Construct = function (args) {
        var argCount = args.length;
        var P = '';
        var body;
        var label = label_1.bot;
        if (argCount === 0) {
            body = new values_1.Value('', label_1.bot);
        }
        else if (argCount === 1) {
            body = args[0];
        }
        else {
            var firstArg = ToString_1.ToString(args[0]);
            label = label_1.lub(label, firstArg.label);
            P = firstArg.value;
            for (var i = 1; i < argCount - 1; i++) {
                var nextArg = ToString_1.ToString(args[i]);
                label = label_1.lub(label, firstArg.label);
                P += ', ' + nextArg.value;
            }
            body = args[argCount - 1];
        }
        body = ToString_1.ToString(body);
        label = label_1.lub(label, body.label);
        P = '(function (' + P + ') { ' + body.value + '});';
        var prog;
        try {
            prog = esprima.parse(P, { loc: true, source: 'Function' });
        }
        catch (e) {
            monitor.Throw(monitor.modules.error.SyntaxErrorObject, e.message, label);
        }
        // parsing returns a program --- we are interested in function declaration
        var func = prog.body[0].expression;
        var F = new FunctionObject_1.FunctionObject(func.params, func.body, new values_1.Value(monitor.instances.globalEnvironment, label_1.bot));
        // For pretty printing
        F.Source = func;
        return new values_1.Value(F, label);
    };
    return FunctionConstructor;
}(ecma_1.Ecma));
exports.FunctionConstructor = FunctionConstructor;

},{"../Conversion/ToString":34,"../HasInstance":37,"../Objects/FunctionObject":40,"../constants":50,"../ecma":53,"../label":60,"../values":75,"esprima":19}],26:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var values_1 = require("../values");
var ecma_1 = require("../ecma");
var constants = require("../constants");
var HasInstance_1 = require("../HasInstance");
var NumberObject_1 = require("../Objects/NumberObject");
var ToNumber_1 = require("../Conversion/ToNumber");
// ------------------------------------------------------------
// The Number Constructor, 15.7.2
var NumberConstructor = /** @class */ (function (_super) {
    __extends(NumberConstructor, _super);
    function NumberConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        // not mandated by standard
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    NumberConstructor.prototype.Setup = function () {
        this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, label_1.bot);
        ecma_1.DefineFFF(this, constants.prototype, monitor.instances.NumberPrototype);
        ecma_1.DefineFFF(this, constants.length, 1);
        ecma_1.DefineFFF(this, constants.MAX_VALUE, this.host.MAX_VALUE);
        ecma_1.DefineFFF(this, constants.MIN_VALUE, this.host.MIN_VALUE);
        ecma_1.DefineFFF(this, constants.NaN, this.host.NaN);
        ecma_1.DefineFFF(this, constants.NEGATIVE_INFINITY, this.host.NEGATIVE_INFINITY);
        ecma_1.DefineFFF(this, constants.POSITIVE_INFINITY, this.host.POSITIVE_INFINITY);
    };
    NumberConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance(V);
    };
    // 15.7.1.1
    NumberConstructor.prototype.Call = function (thisArg, args) {
        if (!args[0]) {
            return new values_1.Value(0, label_1.bot);
        }
        return ToNumber_1.ToNumber(args[0]);
    };
    // 15.7.2.1
    NumberConstructor.prototype.Construct = function (args) {
        var arg0 = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(0, label_1.bot);
        var res = new NumberObject_1.NumberObject(arg0.value, arg0.label);
        return new values_1.Value(res, label_1.bot);
    };
    return NumberConstructor;
}(ecma_1.Ecma));
exports.NumberConstructor = NumberConstructor;

},{"../Conversion/ToNumber":31,"../HasInstance":37,"../Objects/NumberObject":41,"../constants":50,"../ecma":53,"../label":60,"../values":75}],27:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var values_1 = require("../values");
var ecma_1 = require("../ecma");
var constants = require("../constants");
var function_1 = require("../function");
var ObjectObject_1 = require("../Objects/ObjectObject");
var ArrayObject_1 = require("../Objects/ArrayObject");
var ToBoolean_1 = require("../Conversion/ToBoolean");
var HasInstance_1 = require("../HasInstance");
var ToString_1 = require("../Conversion/ToString");
var ToObject_1 = require("../Conversion/ToObject");
// ------------------------------------------------------------
// Object Constructor, 15.2.3
var ObjectConstructor = /** @class */ (function (_super) {
    __extends(ObjectConstructor, _super);
    function ObjectConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.host = host;
        return _this;
    }
    ObjectConstructor.prototype.Setup = function () {
        ecma_1.DefineFFF(this, constants.length, 1);
        // 15.2.3
        this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, label_1.bot);
        // 15.2.3.1
        ecma_1.DefineFFF(this, constants.prototype, monitor.instances.ObjectPrototype);
        ecma_1.DefineTFT(this, constants.getPrototypeOf, new function_1.BuiltinFunctionObject(getPrototypeOf, 1, Object.getPrototypeOf));
        ecma_1.DefineTFT(this, constants.getOwnPropertyDescriptor, new function_1.BuiltinFunctionObject(getOwnPropertyDescriptor, 2, Object.getOwnPropertyDescriptor));
        ecma_1.DefineTFT(this, constants.getOwnPropertyNames, new function_1.BuiltinFunctionObject(getOwnPropertyNames, 1, Object.getOwnPropertyNames));
        ecma_1.DefineTFT(this, constants.create, new function_1.BuiltinFunctionObject(create, 2, Object.create));
        ecma_1.DefineTFT(this, constants.defineProperty, new function_1.BuiltinFunctionObject(defineProperty, 3, Object.defineProperty));
        ecma_1.DefineTFT(this, constants.defineProperties, new function_1.BuiltinFunctionObject(defineProperties, 2, Object.defineProperties));
        ecma_1.DefineTFT(this, constants.seal, new function_1.BuiltinFunctionObject(seal, 1, Object.seal));
        ecma_1.DefineTFT(this, constants.freeze, new function_1.BuiltinFunctionObject(freeze, 1, Object.freeze));
        ecma_1.DefineTFT(this, constants.preventExtensions, new function_1.BuiltinFunctionObject(preventExtensions, 1, Object.preventExtensions));
        ecma_1.DefineTFT(this, constants.isSealed, new function_1.BuiltinFunctionObject(isSealed, 1, Object.isSealed));
        ecma_1.DefineTFT(this, constants.isFrozen, new function_1.BuiltinFunctionObject(isFrozen, 1, Object.isFrozen));
        ecma_1.DefineTFT(this, constants.isExtensible, new function_1.BuiltinFunctionObject(isExtensible, 1, Object.isExtensible));
        ecma_1.DefineTFT(this, constants.keys, new function_1.BuiltinFunctionObject(keys, 1, Object.keys));
    };
    ObjectConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(V);
    };
    // ------------------------------------------------------------
    // 15.2.1.1
    ObjectConstructor.prototype.Call = function (thisArg, args) {
        var arg0 = args[0] || new values_1.Value(undefined, label_1.bot);
        var res;
        monitor.context.pushPC(arg0.label);
        if (arg0.value === undefined || arg0.value === null) {
            res = this.Construct(args);
            res.raise(arg0.label);
            monitor.context.popPC();
            return res;
        }
        res = ToObject_1.ToObject(arg0);
        monitor.context.popPC();
        return res;
    };
    // ------------------------------------------------------------
    // 15.2.2.1
    ObjectConstructor.prototype.Construct = function (args) {
        var arg0 = args[0] || new values_1.Value(undefined, label_1.bot);
        monitor.context.pushPC(arg0.label);
        var res;
        if (arg0.value === undefined || arg0.value === null) {
            var o = new ObjectObject_1.ObjectObject();
            res = new values_1.Value(o, arg0.label);
            monitor.context.popPC();
            return res;
        }
        if (typeof arg0.value === 'object') {
            res = new values_1.Value(arg0.value, arg0.label);
            monitor.context.popPC();
            return res;
        }
        res = ToObject_1.ToObject(arg0);
        monitor.context.popPC();
        return res;
    };
    return ObjectConstructor;
}(ecma_1.Ecma));
exports.ObjectConstructor = ObjectConstructor;
// ------------------------------------------------------------
function assertObject(arg, callee) {
    if (typeof arg.value !== 'object') {
        monitor.context.pushPC(arg.label);
        monitor.Throw(monitor.modules.error.TypeErrorObject, callee + ' called on non-object', arg.label);
    }
}
// ------------------------------------------------------------
// 15.2.3.2
function getPrototypeOf(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.getPrototypeOf');
    var proto = O.value.Prototype;
    return new values_1.Value(proto.value, label_1.lub(proto.label, O.label));
}
// ------------------------------------------------------------
// 15.2.3.3
var getOwnPropertyDescriptor = function (thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    var P = args[1] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.getOwnPropertyDescriptor');
    var name = ToString_1.ToString(P);
    var desc = O.GetOwnProperty(name);
    if (desc.value === undefined) {
        return desc;
    }
    var obj = new ObjectObject_1.ObjectObject();
    if (ecma_1.IsDataDescriptor(desc.value)) {
        obj.DefineOwnProperty(constants.value, {
            value: desc.value.value,
            writable: true, enumerable: true, configurable: true,
            label: desc.value.label
        }, false);
        obj.DefineOwnProperty(constants.writable, {
            value: desc.value.writable,
            writable: true, enumerable: true, configurable: true,
            label: desc.value.label
        }, false);
    }
    else {
        var get = desc.value.get ? desc.value.get.actualFunction : desc.value.get;
        obj.DefineOwnProperty(constants.get, {
            value: get,
            writable: true, enumerable: true, configurable: true,
            label: desc.value.label
        }, false);
        var set = desc.value.set ? desc.value.set.actualFunction : desc.value.set;
        obj.DefineOwnProperty(constants.set, {
            value: set,
            writable: true, enumerable: true, configurable: true,
            label: desc.value.label
        }, false);
    }
    obj.DefineOwnProperty(constants.enumerable, {
        value: desc.value.enumerable,
        writable: true, enumerable: true, configurable: true,
        label: desc.value.label
    }, false);
    obj.DefineOwnProperty(constants.configurable, {
        value: desc.value.configurable,
        writable: true, enumerable: true, configurable: true,
        label: desc.value.label
    }, false);
    return new values_1.Value(obj, desc.label);
};
// ------------------------------------------------------------
// 15.2.3.4
function getOwnPropertyNames(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.getOwnPropertyNames');
    var propertyNames = O.value.getOwnPropertyNames(O.label);
    var array = ArrayObject_1.ArrayObject.fromPropertyArray(propertyNames, O.value.struct);
    return new values_1.Value(array, label_1.bot);
}
// ------------------------------------------------------------
// 15.2.3.5
function create(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    var Properties = args[1] || new values_1.Value(undefined, label_1.bot);
    if (O.value !== null) {
        assertObject(O, 'Object.create');
    }
    var obj = new ObjectObject_1.ObjectObject();
    obj.Prototype = O;
    var objValue = new values_1.Value(obj, label_1.bot);
    if (Properties.value !== undefined) {
        defineProperties(thisArg, [objValue, Properties]);
    }
    return objValue;
}
// ------------------------------------------------------------
function ToPropertyDescriptor(Obj) {
    assertObject(Obj, 'Object.ToPropertyDescriptor');
    var c = monitor.context;
    var lbl = new label_1.Label();
    var desc = {};
    var b;
    var x;
    var propertyName;
    // enumerable
    propertyName = constants.enumerable;
    b = Obj.HasProperty(propertyName);
    lbl.lub(b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = ToBoolean_1.ToBoolean(Obj.Get(propertyName));
        c.popPC();
        lbl.lub(x.label);
        desc[propertyName.value] = x.value;
    }
    // configurable
    propertyName = constants.configurable;
    b = Obj.HasProperty(propertyName);
    lbl.lub(b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = ToBoolean_1.ToBoolean(Obj.Get(propertyName));
        c.popPC();
        lbl.lub(x.label);
        desc[propertyName.value] = x.value;
    }
    // value
    propertyName = constants.value;
    b = Obj.HasProperty(propertyName);
    lbl.lub(b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = Obj.Get(propertyName);
        c.popPC();
        lbl.lub(x.label);
        desc[propertyName.value] = x.value;
    }
    // writable
    propertyName = constants.writable;
    b = Obj.HasProperty(propertyName);
    lbl.lub(b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = ToBoolean_1.ToBoolean(Obj.Get(propertyName));
        c.popPC();
        lbl.lub(x.label);
        desc[propertyName.value] = x.value;
    }
    // get
    propertyName = constants.get;
    b = Obj.HasProperty(propertyName);
    lbl.lub(b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = Obj.Get(propertyName);
        c.popPC();
        lbl.lub(x.label);
        desc[propertyName.value] = x.value;
    }
    // set
    propertyName = constants.set;
    b = Obj.HasProperty(propertyName);
    lbl.lub(b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = Obj.Get(propertyName);
        c.popPC();
        lbl.lub(x.label);
        desc[propertyName.value] = x.value;
    }
    desc.label = lbl;
    return desc;
}
// ------------------------------------------------------------
// 15.2.3.6
function defineProperty(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    var P = args[1] || new values_1.Value(undefined, label_1.bot);
    var Attributes = args[2] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.defineProperty');
    var name = ToString_1.ToString(P);
    var desc = ToPropertyDescriptor(Attributes);
    O.DefineOwnProperty(name, desc, true);
    return O;
}
// ------------------------------------------------------------
// 15.2.3.7
function defineProperties(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    var Properties = args[1] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.defineProperties');
    var props = ToObject_1.ToObject(Properties);
    var names = props.value.getOwnEnumerablePropertyNames(props.label);
    var descriptors = [];
    for (var i = 0, len = names.length; i < len; i++) {
        var P_1 = names[i];
        var descObject = props.Get(P_1);
        var desc = ToPropertyDescriptor(descObject);
        descriptors.push(P_1);
        descriptors.push(desc);
    }
    for (var i = 0, len = descriptors.length; i < len; i = i + 2) {
        var P = descriptors[i];
        var desc = descriptors[i + 1];
        O.DefineOwnProperty(P, desc, true);
    }
    return O;
}
// ------------------------------------------------------------
// 15.2.3.8
function seal(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.defineProperties');
    var context = label_1.lub(monitor.context.effectivePC, O.label);
    monitor.assert(label_1.le(context, O.value.struct), 'Object.seal: context label ' + context + ' not below structural label ' + O.value.struct + ' of object');
    var labels = O.value.labels;
    for (var x in labels) {
        if (Object.hasOwnProperty.call(labels, x)) {
            monitor.assert(label_1.le(context, labels[x].value), 'Object.seal: context label ' + context + ' not below label ' + labels[x].value + ' of ' + x);
        }
    }
    Object.seal(O.value.properties);
    O.value.Extensible = false;
    return O;
}
// ------------------------------------------------------------
// 15.2.3.9
function freeze(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.freeze');
    var context = label_1.lub(monitor.context.effectivePC, O.label);
    monitor.assert(label_1.le(context, O.value.struct), 'Object.freeze: context label ' + context + ' not below structural label ' + O.value.struct + ' of object');
    var labels = O.value.labels;
    var properties = O.value.properties;
    for (var x in properties) {
        if (Object.hasOwnProperty.call(properties, x)) {
            var desc = Object.getOwnPropertyDescriptor(properties, x);
            if (desc.enumerable) {
                monitor.assert(label_1.le(context, labels[x].value), 'Object.freeze: context label ' + context + ' not below label ' + labels[x].value + ' of ' + x);
            }
        }
    }
    Object.freeze(O.value.properties);
    O.value.Extensible = false;
    return O;
}
// ------------------------------------------------------------
// 15.2.3.10
function preventExtensions(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.preventExtensions');
    var context = label_1.lub(monitor.context.effectivePC, O.label);
    monitor.assert(label_1.le(context, O.value.struct), 'Object.preventExtensions: context label ' + context + ' not below structural label ' + O.value.struct + ' of object');
    Object.preventExtensions(O.value.properties);
    O.value.Extensible = false;
    return O;
}
// ------------------------------------------------------------
// 15.2.3.11
function isSealed(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.isSealed');
    var result = Object.isSealed(O.value.properties);
    return new values_1.Value(result, label_1.lub(O.label, O.value.struct));
}
// ------------------------------------------------------------
// 15.2.3.12
function isFrozen(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.isFrozen');
    var result = Object.isFrozen(O.value.properties);
    return new values_1.Value(result, label_1.lub(O.label, O.value.struct));
}
// ------------------------------------------------------------
// 15.2.3.13
function isExtensible(thisAr, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.isExtensible');
    var result = Object.isExtensible(O.value.properties);
    return new values_1.Value(result, label_1.lub(O.label, O.value.struct));
}
// ------------------------------------------------------------
// 15.2.3.14
function keys(thisArg, args) {
    var O = args[0] || new values_1.Value(undefined, label_1.bot);
    assertObject(O, 'Object.keys');
    var enumerable = O.value.getOwnEnumerablePropertyNames(O.label);
    var array = ArrayObject_1.ArrayObject.fromPropertyArray(enumerable, O.value.struct);
    return new values_1.Value(array, label_1.bot);
}

},{"../Conversion/ToBoolean":28,"../Conversion/ToObject":32,"../Conversion/ToString":34,"../HasInstance":37,"../Objects/ArrayObject":38,"../Objects/ObjectObject":42,"../constants":50,"../ecma":53,"../function":57,"../label":60,"../values":75}],28:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
// -------------------------------------------------------------
// ToBoolean, 9.2
function ToBoolean(x) {
    return new values_1.Value(Boolean(x.value), x.label);
}
exports.ToBoolean = ToBoolean;

},{"../values":75}],29:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var ToNumber_1 = require("./ToNumber");
// -------------------------------------------------------------
// ToInt32, 9.5
function ToInt32(x) {
    return ToNumber_1.ToNumber(x);
}
exports.ToInt32 = ToInt32;

},{"./ToNumber":31}],30:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var ToNumber_1 = require("./ToNumber");
// -------------------------------------------------------------
// ToInteger, 9.4
//        Using ToNumber to capture the ToPrimitive
//        and rely on the internal conversion at the point of use
//        should suffice.
function ToInteger(x) {
    var number = ToNumber_1.ToNumber(x);
    var sign = function (n) {
        if (n > 0) {
            return 1;
        }
        else if (n < 0) {
            return -1;
        }
        return 0;
    };
    if (isNaN(number.value)) {
        return new values_1.Value(0, number.label);
    }
    else if (number.value === 0 ||
        number.value === Number.POSITIVE_INFINITY ||
        number.value === Number.NEGATIVE_INFINITY) {
        return number;
    }
    else {
        return new values_1.Value(sign(number.value) * Math.floor(Math.abs(number.value)), number.label);
    }
}
exports.ToInteger = ToInteger;

},{"../values":75,"./ToNumber":31}],31:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var ToPrimitive_1 = require("./ToPrimitive");
// -------------------------------------------------------------
// ToNumber, 9.3
function ToNumber(x) {
    if (typeof x.value !== 'object') {
        return new values_1.Value(Number(x.value), x.label);
    }
    monitor.context.pushPC(x.label);
    var primValue = ToPrimitive_1.ToPrimitive(x, 'number');
    monitor.context.popPC();
    return new values_1.Value(Number(primValue.value), primValue.label);
}
exports.ToNumber = ToNumber;

},{"../values":75,"./ToPrimitive":33}],32:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var label_1 = require("../label");
var BooleanObject_1 = require("../Objects/BooleanObject");
var NumberObject_1 = require("../Objects/NumberObject");
// -------------------------------------------------------------
// ToObject, 9.9
function ToObject(x) {
    // null or undefined, hence ==
    if (x.value === null || x.value === undefined) {
        monitor.context.pushPC(x.label);
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'cannot convert ' + String(x.value) + ' to object', label_1.bot);
    }
    var res = new values_1.Value(x.value, x.label);
    monitor.context.pushPC(x.label);
    switch (typeof x.value) {
        case 'boolean':
            res.value = new BooleanObject_1.BooleanObject(x.value, x.label);
            break;
        case 'number':
            res.value = new NumberObject_1.NumberObject(x.value, x.label);
            break;
        case 'string':
            res.value = new monitor.modules.string.StringObject(x.value, x.label);
            break;
    }
    monitor.context.popPC();
    return res;
}
exports.ToObject = ToObject;

},{"../Objects/BooleanObject":39,"../Objects/NumberObject":41,"../label":60,"../values":75}],33:[function(require,module,exports){
// -------------------------------------------------------------
// ToPrimitive, 9.1  
Object.defineProperty(exports, "__esModule", { value: true });
function ToPrimitive(x, PreferredType) {
    if (x.value === null || typeof x.value !== 'object') {
        return x;
    }
    // will run int the context of x due to value lifting
    var res = x.DefaultValue(PreferredType);
    return res;
}
exports.ToPrimitive = ToPrimitive;

},{}],34:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var ToPrimitive_1 = require("./ToPrimitive");
// -------------------------------------------------------------
// ToString, 9.8
function ToString(x) {
    if (typeof x.value !== 'object')
        return new values_1.Value(String(x.value), x.label);
    monitor.context.pushPC(x.label);
    var primValue = ToPrimitive_1.ToPrimitive(x, 'string');
    monitor.context.popPC();
    return new values_1.Value(String(primValue.value), primValue.label);
}
exports.ToString = ToString;

},{"../values":75,"./ToPrimitive":33}],35:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var ToNumber_1 = require("./ToNumber");
// -------------------------------------------------------------
// ToUInt16, 9.7
function ToUInt16(x) {
    var sign = function (n) {
        if (n > 0) {
            return 1;
        }
        else if (n < 0) {
            return -1;
        }
        return 0;
    };
    var number = ToNumber_1.ToNumber(x);
    if (isNaN(number.value) ||
        number.value === 0 ||
        number.value === Number.POSITIVE_INFINITY ||
        number.value === Number.NEGATIVE_INFINITY) {
        return new values_1.Value(0, number.label);
    }
    var posInt = sign(number.value) * Math.floor(Math.abs(number.value));
    var int16bit = posInt % Math.pow(2, 16);
    return new values_1.Value(int16bit, number.label);
}
exports.ToUInt16 = ToUInt16;

},{"../values":75,"./ToNumber":31}],36:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var ToNumber_1 = require("./ToNumber");
// -------------------------------------------------------------
// ToUInt32, 9.6
function ToUInt32(x) {
    return ToNumber_1.ToNumber(x);
}
exports.ToUInt32 = ToUInt32;

},{"./ToNumber":31}],37:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("./label");
var values_1 = require("./values");
var constants = require("./constants");
// ------------------------------------------------------------
function HasInstance(V) {
    var F = this;
    if (typeof V.value !== 'object')
        return new values_1.Value(false, V.label);
    var l = V.label;
    var O = F.Get(constants.prototype);
    if (typeof O.value !== 'object') {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'HasInstance', label_1.bot);
    }
    while (V.value !== null) {
        V = V.value.Prototype;
        l = label_1.lub(l, V.label);
        if (O.value === V.value)
            return new values_1.Value(true, l);
    }
    return new values_1.Value(false, l);
}
exports.HasInstance = HasInstance;

},{"./constants":50,"./label":60,"./values":75}],38:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var _ = require("underscore");
var ecma_1 = require("../ecma");
var label_1 = require("../label");
// ------------------------------------------------------------
// 15.4.2.1, and 15.4.2.2
var ArrayObject = /** @class */ (function (_super) {
    __extends(ArrayObject, _super);
    function ArrayObject(struct) {
        var _this = _super.call(this) || this;
        _this.Class = 'Array';
        _this.Prototype = new values_1.Value(monitor.instances.ArrayPrototype, label_1.bot);
        _this.Extensible = true;
        _this.properties = [];
        _this.labels = {};
        struct = struct || label_1.bot;
        _this.labels.length = {
            value: struct,
            existence: label_1.bot
        };
        _this.struct = struct;
        return _this;
    }
    // ---
    ArrayObject.fromValueArray = function (values, struct) {
        var array = new ArrayObject(struct);
        for (var i = 0, len = values.length; i < len; i++) {
            var value = values[i];
            array.properties[i] = value.value;
            array.labels[i] = {
                value: value.label,
                existence: label_1.bot
            };
        }
        return array;
    };
    // ---
    ArrayObject.fromPropertyArray = function (values, struct) {
        var array = new ArrayObject(struct);
        for (var i = 0, len = values.length; i < len; i++) {
            var value = values[i];
            array.properties[i] = value.value;
            array.labels[i] = {
                value: value.label,
                existence: value.label
            };
        }
        return array;
    };
    // ---
    ArrayObject.fromArray = function (values, label, existence) {
        var array = new ArrayObject(existence);
        for (var i = 0, len = values.length; i < len; i++) {
            array.properties[i] = values[i];
            array.labels[i] = {
                value: label,
                existence: existence
            };
        }
        return array;
    };
    // ---
    ArrayObject.prototype.toString = function () {
        return this.properties.toString();
    };
    // ---
    ArrayObject.prototype.DefineOwnProperty = function (s, desc, Throw) {
        var c = monitor.context;
        /* Instead of lengthContext = lub(c.effectivePC, s.label), push s.label to
           pc-stack, and use pc (to make taintMode easier) */
        c.pcStack.push(s.label);
        if (!label_1.le(c.effectivePC, this.labels.length.value)) {
            var msgt = _.template('Array.prototype.DefineOwnProperty: write context <%=wc%> not below length label <%=ll%>');
            monitor.securityError(msgt({ wc: lengthContext, ll: this.labels.length.value }));
            // For observable flows
            this.labels.length.value.lub(lengthContext);
        }
        c.pcStack.pop();
        return ecma_1.Ecma.prototype.DefineOwnProperty.call(this, s, desc, Throw);
    };
    return ArrayObject;
}(ecma_1.Ecma));
exports.ArrayObject = ArrayObject;

},{"../ecma":53,"../label":60,"../values":75,"underscore":22}],39:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var ecma_1 = require("../ecma");
var label_1 = require("../label");
// ------------------------------------------------------------
// Boolean Object, 15.6.5
var BooleanObject = /** @class */ (function (_super) {
    __extends(BooleanObject, _super);
    function BooleanObject(val, lbl) {
        var _this = _super.call(this) || this;
        _this.Class = 'Boolean';
        _this.PrimitiveValue = new Boolean(val);
        _this.PrimitiveLabel = lbl;
        _this.Extensible = true;
        _this.Prototype = new values_1.Value(monitor.instances.BooleanPrototype, label_1.bot);
        return _this;
    }
    return BooleanObject;
}(ecma_1.Ecma));
exports.BooleanObject = BooleanObject;

},{"../ecma":53,"../label":60,"../values":75}],40:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var values_1 = require("../values");
var ecma_1 = require("../ecma");
var constants = require("../constants");
var function_1 = require("../function");
var ObjectObject_1 = require("../Objects/ObjectObject");
var HasInstance_1 = require("../HasInstance");
// ------------------------------------------------------------
// Function objects, 13.2
var FunctionObject = /** @class */ (function (_super) {
    __extends(FunctionObject, _super);
    function FunctionObject(parms, code, scope) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, label_1.bot);
        _this.Scope = scope;
        _this.FormalParameters = parms ? parms : { length: 0 };
        _this.Code = code;
        _this.Extensible = true;
        ecma_1.DefineFFT(_this, constants.length, _this.FormalParameters.length);
        // NOTE: will be updated when called and since we piggyback properties on native properties
        // defining as FFF will cause future updates to fail. Thus we define it as TFT even though
        // this violates the standard.
        ecma_1.DefineTFT(_this, constants.arguments, null);
        ecma_1.DefineFFF(_this, constants.caller, null);
        var proto = new ObjectObject_1.ObjectObject();
        ecma_1.DefineTFT(proto, constants.constructor, _this);
        ecma_1.DefineTFF(_this, constants.prototype, proto);
        return _this;
    }
    // ---
    FunctionObject.prototype.AsyncCall = function (thisArg, args) {
        // step 1, as in 10.4.3 embodied in enterFunctionCode
        var funcCtx = function_1.enterFunctionCode(this, thisArg, args);
        // for stack trace
        funcCtx.owner = this.Name;
        monitor.contextStack.push(funcCtx);
        var ip = funcCtx.workList.top();
        var res;
        if (this.Code) {
            ip.then(this.Code);
            ip.then(AsyncCallEnd);
        }
        else {
            ip.then(AsyncCallEnd);
        }
    };
    // ---
    // 13.2.1 
    FunctionObject.prototype.Call = function (thisArg, args) {
        // step 1, as in 10.4.3 embodied in enterFunctionCode
        var funcCtx = function_1.enterFunctionCode(this, thisArg, args);
        // for stack trace
        funcCtx.owner = this.Name;
        var res;
        monitor.contextStack.push(funcCtx);
        if (this.Code) {
            res = monitor.modules.exec.execute(this.Code, false);
        }
        if (funcCtx.result.value) {
            funcCtx.result.value.raise(funcCtx.labels.ret);
        }
        monitor.contextStack.pop();
        // copy out the inner exception level
        monitor.context.labels.exc = label_1.lub(monitor.context.labels.exc, funcCtx.labels.exc);
        switch (res.type) {
            case 'throw':
                throw res.value;
            case 'return':
                return res.value;
        }
        return new values_1.Value(undefined, funcCtx.labels.ret);
    };
    // ---
    FunctionObject.prototype.AsyncConstruct = function (args) {
        var obj = new ecma_1.Ecma();
        obj.Class = 'Object';
        obj.Extensible = true;
        var proto = this.Get(constants.prototype);
        if (typeof proto.value !== 'object') {
            proto.value = new values_1.Value(monitor.instances.ObjectPrototype, label_1.bot);
        }
        obj.Prototype = proto;
        var ip = monitor.context.workList.top();
        this.AsyncCall(new values_1.Value(obj, label_1.bot), args);
        ip.then(AsyncConstructEnd, { object: obj });
        return ip;
    };
    // ---
    // ---
    // 13.2.2
    FunctionObject.prototype.Construct = function (args) {
        var obj = new ecma_1.Ecma();
        obj.Class = 'Object';
        obj.Extensible = true;
        var proto = this.Get(constants.prototype);
        if (typeof proto.value !== 'object') {
            proto.value = new values_1.Value(monitor.instances.ObjectPrototype, label_1.bot);
        }
        obj.Prototype = proto;
        var result = this.Call(new values_1.Value(obj, label_1.bot), args);
        if (result.value !== 'object') {
            result = new values_1.Value(obj, label_1.bot);
        }
        return result;
    };
    FunctionObject.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    FunctionObject.prototype.toString = function () {
        if (this.Source) {
            return pp.pretty(this.Source);
        }
        else if (this.host) {
            return this.host.toString();
        }
        else {
            return 'host undefined for ' + this.Class;
        }
    };
    return FunctionObject;
}(ecma_1.Ecma));
exports.FunctionObject = FunctionObject;
// ---
function AsyncCallEnd() {
    var callContext = monitor.context;
    monitor.contextStack.pop();
    var callerContext = monitor.context;
    var result = callContext.result;
    var retlabel = callContext.labels.ret;
    if (result.type !== 'normal' && result.value) {
        result.value.raise(retlabel);
    }
    else {
        result.value = new values_1.Value(undefined, retlabel);
    }
    // copy out the inner exception level
    callerContext.labels.exc = label_1.lub(callerContext.labels.exc, callContext.labels.exc);
    callerContext.valueStack.push(result);
}
exports.AsyncCallEnd = AsyncCallEnd;
AsyncCallEnd.runfor = { 'return': true, 'throw': true };
function AsyncConstructEnd() {
    var retval = monitor.context.valueStack.peek();
    if (typeof retval.value.value !== 'object') {
        retval.value = new values_1.Value(this.object, label_1.bot);
    }
}
exports.AsyncConstructEnd = AsyncConstructEnd;
AsyncConstructEnd.runfor = { 'return': true, 'throw': true };

},{"../HasInstance":37,"../Objects/ObjectObject":42,"../constants":50,"../ecma":53,"../function":57,"../label":60,"../values":75}],41:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var values_1 = require("../values");
var ecma_1 = require("../ecma");
// ------------------------------------------------------------
// Number Object, 15.7.5
var NumberObject = /** @class */ (function (_super) {
    __extends(NumberObject, _super);
    function NumberObject(val, lbl) {
        var _this = _super.call(this) || this;
        _this.Class = 'Number';
        _this.PrimitiveValue = new Number(val);
        _this.PrimitiveLabel = lbl;
        _this.Extensible = true;
        _this.Prototype = new values_1.Value(monitor.instances.NumberPrototype, label_1.bot);
        return _this;
    }
    return NumberObject;
}(ecma_1.Ecma));
exports.NumberObject = NumberObject;

},{"../ecma":53,"../label":60,"../values":75}],42:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var values_1 = require("../values");
var ecma_1 = require("../ecma");
// ------------------------------------------------------------
// Object objects, 15.2.2.1
var ObjectObject = /** @class */ (function (_super) {
    __extends(ObjectObject, _super);
    function ObjectObject() {
        var _this = _super.call(this) || this;
        _this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, label_1.bot);
        _this.Class = 'Object';
        _this.Extensible = true;
        return _this;
        // this.host      = {};
    }
    return ObjectObject;
}(ecma_1.Ecma));
exports.ObjectObject = ObjectObject;
// ---
ObjectObject.prototype.toString = function () {
    var properties = [];
    for (x in this.properties) {
        if (this.properties.hasOwnProperty(x)) {
            properties.push(x + ': ' + this.properties[x]);
        }
    }
    return '{' + properties.join(', ') + '}';
};
// ------------------------------------------------------------

},{"../ecma":53,"../label":60,"../values":75}],43:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var constants = require("../constants");
var function_1 = require("../function");
var label_1 = require("../label");
var ecma_1 = require("../ecma");
var ArrayObject_1 = require("../Objects/ArrayObject");
var ToBoolean_1 = require("../Conversion/ToBoolean");
var ToInteger_1 = require("../Conversion/ToInteger");
var ToString_1 = require("../Conversion/ToString");
var ToObject_1 = require("../Conversion/ToObject");
var IsCallable_1 = require("../Utility/IsCallable");
var ToUInt32_1 = require("../Conversion/ToUInt32");
// ------------------------------------------------------------
// 15.4.4
var ArrayPrototype = /** @class */ (function (_super) {
    __extends(ArrayPrototype, _super);
    function ArrayPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Array';
        _this.host = host;
        return _this;
    }
    ArrayPrototype.prototype.Setup = function () {
        this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, label_1.bot);
        ecma_1.Define(this, constants.length, 0, { writable: true });
        ecma_1.DefineTFT(this, constants.constructor, monitor.instances.ArrayConstructor);
        ecma_1.DefineTFT(this, constants.toString, new function_1.BuiltinFunctionObject(toString, 0, Array.prototype.toString));
        ecma_1.DefineTFT(this, constants.toLocaleString, new function_1.BuiltinFunctionObject(toLocaleString, 0, Array.prototype.toLocaleString));
        ecma_1.DefineTFT(this, constants.concat, new function_1.BuiltinFunctionObject(concat, 1, Array.prototype.concat));
        ecma_1.DefineTFT(this, constants.join, new function_1.BuiltinFunctionObject(join, 1, Array.prototype.join));
        ecma_1.DefineTFT(this, constants.pop, new function_1.BuiltinFunctionObject(pop, 0, Array.prototype.pop));
        ecma_1.DefineTFT(this, constants.push, new function_1.BuiltinFunctionObject(push, 1, Array.prototype.push));
        ecma_1.DefineTFT(this, constants.reverse, new function_1.BuiltinFunctionObject(reverse, 0, Array.prototype.reverse));
        ecma_1.DefineTFT(this, constants.shift, new function_1.BuiltinFunctionObject(shift, 0, Array.prototype.shift));
        ecma_1.DefineTFT(this, constants.slice, new function_1.BuiltinFunctionObject(slice, 2, Array.prototype.slice));
        ecma_1.DefineTFT(this, constants.sort, new function_1.BuiltinFunctionObject(sort, 1, Array.prototype.sort));
        ecma_1.DefineTFT(this, constants.splice, new function_1.BuiltinFunctionObject(splice, 2, Array.prototype.splice));
        ecma_1.DefineTFT(this, constants.unshift, new function_1.BuiltinFunctionObject(unshift, 1, Array.prototype.unshift));
        ecma_1.DefineTFT(this, constants.indexOf, new function_1.BuiltinFunctionObject(indexOf, 1, Array.prototype.indexOf));
        ecma_1.DefineTFT(this, constants.lastIndexOf, new function_1.BuiltinFunctionObject(lastIndexOf, 1, Array.prototype.lastIndexOf));
        ecma_1.DefineTFT(this, constants.every, new function_1.BuiltinFunctionObject(every, 1, Array.prototype.every));
        ecma_1.DefineTFT(this, constants.some, new function_1.BuiltinFunctionObject(some, 1, Array.prototype.some));
        ecma_1.DefineTFT(this, constants.forEach, new function_1.BuiltinFunctionObject(forEach, 1, Array.prototype.forEach));
        ecma_1.DefineTFT(this, constants.map, new function_1.BuiltinFunctionObject(map, 1, Array.prototype.map));
        ecma_1.DefineTFT(this, constants.filter, new function_1.BuiltinFunctionObject(filter, 1, Array.prototype.filter));
        ecma_1.DefineTFT(this, constants.reduce, new function_1.BuiltinFunctionObject(reduce, 1, Array.prototype.reduce));
        ecma_1.DefineTFT(this, constants.reduceRight, new function_1.BuiltinFunctionObject(reduceRight, 1, Array.prototype.reduceRight));
    };
    return ArrayPrototype;
}(ecma_1.Ecma));
exports.ArrayPrototype = ArrayPrototype;
// ------------------------------------------------------------
// toString, 15.4.4.2
var toString = function (thisArg, args) {
    var array = ToObject_1.ToObject(thisArg);
    var func = array.Get(constants.join);
    if (!IsCallable_1.IsCallable(func).value) {
        func = monitor.instances.ObjectPrototype.Get(constants.toString);
    }
    return func.value.Call(array, []);
};
// ------------------------------------------------------------
// toLocaleString, 15.4.4.3
var toLocaleString = function (thisArg) {
    var array, arrayLen, len, separator, firstElement, R, elementObj, func, k, S, nextElement;
    array = ToObject_1.ToObject(thisArg);
    arrayLen = array.Get(new values_1.Value("length", label_1.bot));
    len = ToUInt32_1.ToUInt32(arrayLen);
    separator = ',';
    var label = label_1.lub(monitor.context.effectivePC, array.label);
    if (len.value === 0) {
        return new values_1.Value("", label);
    }
    firstElement = array.Get(new values_1.Value("0", label_1.bot));
    if (firstElement.value === undefined || firstElement.value === null) {
        R = new values_1.Value("", label);
    }
    else {
        elementObj = ToObject_1.ToObject(firstElement);
        func = elementObj.Get(new values_1.Value("toLocaleString", label_1.bot));
        if (IsCallable_1.IsCallable(func).value === false) {
            monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.toLocaleString: not a function', label_1.bot);
        }
        R = func.value.Call(elementObj, []);
    }
    k = 1;
    while (k < len.value) {
        S = R.value.concat(separator);
        nextElement = array.Get(new values_1.Value('' + k, label_1.bot));
        if (nextElement.value === undefined || firstElement.value === null) {
            R = new values_1.Value("", label);
        }
        else {
            elementObj = ToObject_1.ToObject(nextElement);
            func = elementObj.Get(new values_1.Value("toLocaleString", label_1.bot));
            if (IsCallable_1.IsCallable(func).value === false) {
                monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.toLocaleString: not a function', label_1.bot);
            }
            R = func.value.Call(elementObj, []);
        }
        R = new values_1.Value(S.concat(R.value), R.label);
        k++;
    }
    R.raise(label);
    return R;
};
// ------------------------------------------------------------
// concat, 15.4.4.4
var concat = function (thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var A = new ArrayObject_1.ArrayObject();
    var n = 0;
    var c = monitor.context;
    var label = new label_1.Label();
    function aux(E) {
        c.pushPC(E.label);
        label.lub(E.label);
        if (E.value && E.value.Class === 'Array') {
            var k = 0;
            var len = E.Get(constants.length);
            label.lub(len.label);
            monitor.context.pushPC(len.label);
            while (k < len.value) {
                var _k = new values_1.Value(k, label_1.bot);
                var exists = E.HasProperty(_k);
                if (exists.value) {
                    monitor.context.pushPC(exists.label);
                    var subElement = E.Get(_k);
                    A.DefineOwnProperty(new values_1.Value(n, label), {
                        value: subElement.value,
                        label: subElement.label,
                        writable: true,
                        enumerable: true,
                        configurable: true
                    }, false);
                    monitor.context.popPC();
                }
                n++;
                k++;
            }
            monitor.context.popPC();
        }
        else {
            A.DefineOwnProperty(new values_1.Value(n, label), {
                value: E.value,
                label: E.label,
                writable: true,
                enumerable: true,
                configurable: true
            }, false);
            n++;
        }
        c.popPC();
    }
    aux(O);
    for (var i = 0, len = args.length; i < len; i++) {
        aux(args[i]);
    }
    // This is a fix they added in ECMA-262 v6 standard, but browsers used it
    // in ECMA-262 v5 as well.
    A.Put(new values_1.Value("length", label_1.bot), new values_1.Value(n, label_1.bot));
    return new values_1.Value(A, label_1.bot);
};
// ------------------------------------------------------------
// join, 15.4.4.5
function join(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var len = ToUInt32_1.ToUInt32(O.Get(constants.length));
    var separator = args[0];
    if (separator) {
        if (separator.value === undefined) {
            separator.value = ',';
        }
        separator = ToString_1.ToString(separator);
    }
    else {
        separator = new values_1.Value(undefined, label_1.bot);
    }
    var label = label_1.lub(len.label, separator.label);
    var arr = [];
    for (var i = 0; i < len.value; i++) {
        var v = O.Get(new values_1.Value(i, label_1.bot));
        var y;
        if (v.value === undefined || v.value === null) {
            y = new values_1.Value('', v.label);
        }
        else {
            y = ToString_1.ToString(v);
        }
        arr[i] = y.value;
        label = label_1.lub(label, y.label);
    }
    var res = arr.join(separator.value);
    return new values_1.Value(res, label);
}
;
// ------------------------------------------------------------
// pop, 15.4.4.6
function pop(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var len = ToUInt32_1.ToUInt32(O.Get(constants.length));
    if (len.value === 0) {
        O.Put(constants.length, len, true);
        return new values_1.Value(undefined, len.label);
    }
    var indx = new values_1.Value(len.value - 1, len.label);
    var element = O.Get(indx);
    O.Delete(indx, true);
    O.Put(constants.length, indx, true);
    return element;
}
;
// ------------------------------------------------------------
// push, 15.4.4.7
function push(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var n = ToUInt32_1.ToUInt32(O.Get(constants.length));
    for (var i = 0, len = args.length; i < len; i++) {
        var E = args[i];
        O.Put(n, E);
        n.value++;
    }
    O.Put(constants.length, n, true);
    return n;
}
// ------------------------------------------------------------
// reverse, 15.4.4.8
function reverse(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var len = ToUInt32_1.ToUInt32(O.Get(constants.length));
    var P = len;
    len = len.value;
    var middle = Math.floor(len / 2);
    var lower = 0;
    var c = monitor.context;
    while (lower !== middle && lower > -2) {
        var upper = len - lower - 1;
        P.value = lower;
        var lowerValue = O.Get(P);
        P.value = upper;
        var upperValue = O.Get(P);
        P.value = lower;
        var lowerExists = O.HasProperty(P);
        P.value = upper;
        var upperExists = O.HasProperty(P);
        c.pushPC(label_1.lub(lowerExists.label, upperExists.label));
        if (lowerExists.value && upperExists.value) {
            P.value = lower;
            O.Put(P, upperValue, true);
            P.value = upper;
            O.Put(P, lowerValue, true);
        }
        else if (!lowerExists.value && upperExists.value) {
            P.value = lower;
            O.Put(P, upperValue, true);
            P.value = upper;
            O.Delete(P, true);
        }
        else if (lowerExists.value && !upperExists.value) {
            P.value = lower;
            O.Delete(P, true);
            P.value = upper;
            O.Put(P, lowerValue, true);
        }
        c.popPC();
        lower++;
    }
    return O;
}
// ------------------------------------------------------------
// shift, 15.4.4.9
function shift(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    if (len.value === 0) {
        monitor.context.pushPC(len.label);
        O.Put(constants.length, len, true);
        monitor.context.popPC();
        return new values_1.Value(undefined, len.label);
    }
    var first = O.Get(new values_1.Value(0, label_1.bot));
    var k = 1;
    monitor.context.pushPC(len.label);
    while (k < len.value) {
        var from = k;
        var _from = new values_1.Value(from, len.label);
        var to = k - 1;
        var _to = new values_1.Value(to, len.label);
        var fromPresent = O.HasProperty(_from);
        if (fromPresent.value) {
            monitor.context.pushPC(fromPresent.label);
            var fromVal = O.Get(_from);
            O.Put(_to, fromVal, true);
            monitor.context.popPC();
        }
        else {
            O.Delete(_to, true);
        }
        k++;
    }
    monitor.context.popPC();
    len.value--;
    O.Delete(len, true);
    O.Put(constants.length, len, true);
    return first;
}
;
// ------------------------------------------------------------
// slice, 15.4.4.10
function slice(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var A = new ArrayObject_1.ArrayObject();
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var start = args[0] ? args[0] : new values_1.Value(undefined, label_1.bot);
    var end = args[1] ? args[1] : new values_1.Value(undefined, label_1.bot);
    var relativeStart = ToInteger_1.ToInteger(start);
    var k = new values_1.Value(0, label_1.lub(len.label, relativeStart.label));
    if (relativeStart.value < 0) {
        k.value = Math.max(len.value + relativeStart.value, 0);
    }
    else {
        k.value = Math.min(relativeStart.value, len.value);
    }
    var relativeEnd;
    if (end.value === undefined) {
        relativeEnd = len;
    }
    else {
        relativeEnd = ToInteger_1.ToInteger(end);
    }
    var _final = new values_1.Value(0, label_1.lub(len.label, relativeStart.label));
    if (relativeEnd.value < 0) {
        _final.value = Math.max(len.value + relativeEnd.value, 0);
    }
    else {
        _final.value = Math.min(relativeEnd.value, len.value);
    }
    var n = 0;
    monitor.context.pushPC(label_1.lub(k.label, _final.label));
    while (k.value < _final.value) {
        var Pk = ToString_1.ToString(k);
        var kPresent = O.HasProperty(Pk);
        if (kPresent.value) {
            var kValue = O.Get(Pk);
            A.DefineOwnProperty(new values_1.Value(n, label_1.bot), {
                value: kValue.value,
                label: kValue.label,
                writable: true,
                enumerable: true,
                configurable: true
            }, false);
        }
        k.value++;
        n++;
    }
    monitor.context.popPC();
    return new values_1.Value(A, label_1.bot);
}
;
// ------------------------------------------------------------
// sort, 15.4.4.11
var sort = function (thisArg, args) {
    var comparefun = args[0] || new values_1.Value(undefined, label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var label = new label_1.Label();
    label.lub(O.label, len.label);
    var c = monitor.context;
    c.pushPC(len.label);
    var array = [];
    var k = new values_1.Value(0, len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc.lub(kPresent.label);
        label.lub(kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            kValue.raise(label);
            array[k.value] = kValue;
        }
        k.value++;
    }
    var isCallable = IsCallable_1.IsCallable(comparefun);
    c.labels.pc.lub(isCallable.label);
    if (comparefun.value !== undefined && !isCallable.value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.sort: not a function', label_1.bot);
    }
    var comparefunWrapper;
    if (comparefun.value) {
        comparefunWrapper = function (x, y) {
            if (x.value === undefined) {
                label.lub(x.label);
                return 1;
            }
            if (y.value === undefined) {
                label.lub(y.label);
                return -1;
            }
            var result = comparefun.Call(new values_1.Value(undefined, label_1.bot), [x, y]);
            c.labels.pc.lub(result.label, x.label, y.label);
            label.lub(result.label, x.label, y.label);
            return result.value;
        };
    }
    else {
        comparefunWrapper = function (x, y) {
            if (x.value === undefined) {
                label.lub(x.label);
                return 1;
            }
            if (y.value === undefined) {
                label.lub(y.label);
                return -1;
            }
            var xString = ToString_1.ToString(x);
            var yString = ToString_1.ToString(y);
            c.labels.pc.lub(xString.label, yString.label);
            label.lub(xString.label, yString.label);
            if (xString.value < yString.value) {
                return -1;
            }
            if (xString.value > yString.value) {
                return 1;
            }
            return 0;
        };
    }
    array = array.sort(comparefunWrapper);
    for (var i = 0, len = array.length; i < len; i++) {
        var v = array[i];
        if (v) {
            O.Put(new values_1.Value(i, label), v, true);
        }
        else {
            O.Delete(new values_1.Value(i, label), true);
        }
    }
    c.popPC();
    return O;
};
// ------------------------------------------------------------
// splice, 15.4.4.12
function splice(thisArg, args) {
    var start = args[0] || new values_1.Value(undefined, label_1.bot);
    var deleteCount = args[1] || new values_1.Value(undefined, label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var A = new ArrayObject_1.ArrayObject();
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var relativeStart = ToInteger_1.ToInteger(start);
    var actualStart = new values_1.Value(null, label_1.lub(len.label, relativeStart.label));
    if (relativeStart.value < 0) {
        actualStart.value = Math.max((len.value + relativeStart.value), 0);
    }
    else {
        actualStart.value = Math.min(relativeStart.value, len.value);
    }
    deleteCount = ToInteger_1.ToInteger(deleteCount);
    var actualDeleteCount = new values_1.Value(null, label_1.lub(deleteCount.label, actualStart.label));
    actualDeleteCount.value = Math.min(Math.max(deleteCount.value, 0), len.value - actualStart.value);
    var k = 0;
    monitor.context.pushPC(actualDeleteCount.label);
    while (k < actualDeleteCount.value) {
        var from = new values_1.Value(actualStart.value + k, actualStart.label);
        var fromPresent = O.HasProperty(from);
        monitor.context.pushPC(fromPresent.label);
        if (fromPresent.value) {
            var fromValue = O.Get(from);
            A.DefineOwnProperty(new values_1.Value(k, actualDeleteCount.label), {
                value: fromValue.value,
                label: fromValue.label,
                writable: true,
                enumberable: true,
                configurable: true
            });
        }
        monitor.context.popPC();
        k++;
    }
    monitor.context.popPC();
    var items = [];
    for (var i = 0; i < args.length - 2; i++) {
        items[i] = args[i + 2];
    }
    var itemCount = items.length;
    if (itemCount < actualDeleteCount.value) {
        var k = actualStart.value;
        monitor.context.pushPC(actualStart.label);
        while (k < len.value - actualDeleteCount.value) {
            var from = new values_1.Value(k + actualDeleteCount.value, label_1.lub(actualStart.label, actualDeleteCount.label));
            var to = new values_1.Value(k + itemCount, actualStart.label);
            var fromPresent = O.HasProperty(from);
            monitor.context.pushPC(fromPresent.label);
            if (fromPresent.value) {
                var fromValue = O.Get(from);
                O.Put(to, fromValue, true);
            }
            else {
                O.Delete(to, true);
            }
            k++;
            monitor.context.popPC();
        }
        monitor.context.popPC();
        k = len.value;
        monitor.context.pushPC(label_1.lub(len.label, actualDeleteCount.label));
        while (k > (len.value - actualDeleteCount.value + itemCount)) {
            O.Delete(new values_1.Value(k, len.label));
            k--;
        }
        monitor.context.popPC();
    }
    else if (itemCount > actualDeleteCount.value) {
        var k = len.value - actualDeleteCount.value;
        monitor.context.pushPC(label_1.lub(len.label, actualDeleteCount.label));
        while (k > actualStart.value) {
            var from = new values_1.Value(k + actualDeleteCount.value - 1, actualDeleteCount.label);
            var to = new values_1.Value(k + itemCount - 1, label_1.bot);
            var fromPresent = O.HasProperty(from);
            if (fromPresent.value) {
                var fromValue = O.Get(from);
                O.Put(to, fromValue, true);
            }
            else {
                O.Delete(to, true);
            }
            k--;
        }
        monitor.context.popPC();
    }
    k = actualStart.value;
    for (var i = 0; i < items.length; i++) {
        O.Put(new values_1.Value(k + i, actualStart.label), items[i], true);
    }
    O.Put(constants.length, new values_1.Value(len.value - actualDeleteCount.value + itemCount, label_1.lub(len.label, actualDeleteCount.label)), true);
    return new values_1.Value(A, label_1.bot);
}
;
// ------------------------------------------------------------
// unshift, 15.4.4.13
function unshift(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var argCount = args.length;
    var k = len.value;
    monitor.context.pushPC(len.label);
    while (k > 0) {
        var from = new values_1.Value(k - 1, len.label);
        var to = new values_1.Value(k + argCount - 1, len.label);
        var fromPresent = O.HasProperty(from);
        monitor.context.pushPC(fromPresent.label);
        if (fromPresent.value) {
            var fromValue = O.Get(from);
            O.Put(to, fromValue, true);
        }
        else {
            O.Delete(to, true);
        }
        monitor.context.popPC();
        k--;
    }
    monitor.context.popPC();
    var j = 0;
    var items = args;
    for (; j < argCount; j++) {
        var E = items[j];
        O.Put(new values_1.Value(j, label_1.bot), E, true);
    }
    O.Put(constants.length, new values_1.Value(len.value + argCount, len.label));
    return new values_1.Value(len.value + argCount, len.label);
}
;
// ------------------------------------------------------------
// indexOf, 15.4.4.14
function indexOf(thisArg, args) {
    var searchElement = args[0] || new values_1.Value(undefined, label_1.bot);
    var fromIndex = args[1];
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    if (len.value === 0) {
        return new values_1.Value(-1, len.label);
    }
    var label = new label_1.Label();
    c.pushPC(len.label);
    label.lub(len.label);
    var n = fromIndex ? ToInteger_1.ToInteger(fromIndex) : new values_1.Value(0, label_1.bot);
    c.labels.pc.lub(n.label);
    label.lub(n.label);
    if (n.value >= len.value) {
        c.popPC();
        return new values_1.Value(-1, label);
    }
    var k;
    if (n.value >= 0) {
        k = n;
    }
    else {
        k = new values_1.Value(len.value - Math.abs(n.value), label_1.lub(len.label, n.label));
        if (k.value < 0) {
            k.value = 0;
        }
    }
    while (k.value < len.value) {
        var kString = ToString_1.ToString(k);
        var kPresent = O.HasProperty(kString);
        c.labels.pc.lub(kPresent.label);
        label.lub(kPresent.label);
        if (kPresent.value) {
            var elementK = O.Get(kString);
            c.labels.pc.lub(elementK.label);
            label.lub(elementK.label);
            var same = searchElement.value === elementK.value;
            if (same) {
                k.label = label;
                c.popPC();
                return k;
            }
        }
        k.value++;
    }
    c.popPC();
    k.value = -1;
    k.label = label;
    return k;
}
// ------------------------------------------------------------
// lastIndexOf, 15.4.4.15
function lastIndexOf(thisArg, args) {
    var searchElement = args[0] || new values_1.Value(undefined, label_1.bot);
    var fromIndex = args[1];
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    if (len.value === 0) {
        return new values_1.Value(-1, len.label);
    }
    var label = new label_1.Label();
    c.pushPC(len.label);
    label.lub(len.label);
    var n = fromIndex ? ToInteger_1.ToInteger(fromIndex) : new values_1.Value(len.value - 1, len.label);
    var k;
    if (n.value >= 0) {
        k = new values_1.Value(Math.min(n.value, len.value - 1), label_1.lub(n.label, len.label));
    }
    else {
        k = new values_1.Value(len.value - Math.abs(n.value), label_1.lub(n.label, len.label));
    }
    c.labels.pc.lub(k.label);
    label.lub(k.label);
    while (k.value >= 0) {
        var kPresent = O.HasProperty(k);
        c.labels.pc.lub(kPresent.label);
        label.lub(kPresent.label);
        if (kPresent.value) {
            var elementK = O.Get(k);
            c.labels.pc.lub(elementK.label);
            label.lub(elementK.label);
            var same = searchElement.value === elementK.value;
            if (same) {
                k.label = label;
                c.popPC();
                return k;
            }
        }
        k.value--;
    }
    c.popPC();
    k.value = -1;
    k.label = label;
    return k;
}
// ------------------------------------------------------------
// every, 15.4.4.16
function every(thisArg, args) {
    var callbackfn = args[0] || new values_1.Value(undefined, label_1.bot);
    var callbackthisArg = args[1] || new values_1.Value(undefined, label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    var label = new label_1.Label();
    label.lub(isCallable.label);
    c.pushPC(isCallable.label);
    if (!isCallable.value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.every: not a function', label_1.bot);
    }
    var k = new values_1.Value(0, len.label);
    c.labels.pc.lub(len.label);
    label.lub(len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc.lub(kPresent.label);
        label.lub(kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            var testResult = callbackfn.Call(callbackthisArg, [kValue, k, O]);
            var b = ToBoolean_1.ToBoolean(testResult);
            c.labels.pc.lub(b.label);
            label.lub(b.label);
            if (!b.value) {
                c.popPC();
                return new values_1.Value(false, label);
            }
        }
        k.value++;
    }
    c.popPC();
    return new values_1.Value(true, label);
}
// ------------------------------------------------------------
// some, 15.4.4.17
function some(thisArg, args) {
    var callbackfn = args[0] || new values_1.Value(undefined, label_1.bot);
    var callbackthisArg = args[1] || new values_1.Value(undefined, label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    var label = new label_1.Label();
    label.lub(isCallable.label);
    c.pushPC(isCallable.label);
    if (!isCallable.value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.every: not a function', label_1.bot);
    }
    var k = new values_1.Value(0, len.label);
    c.labels.pc.lub(len.label);
    label.lub(len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc.lub(kPresent.label);
        label.lub(kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            var testResult = callbackfn.Call(callbackthisArg, [kValue, k, O]);
            var b = ToBoolean_1.ToBoolean(testResult);
            c.labels.pc.lub(b.label);
            label.lub(b.label);
            if (b.value) {
                c.popPC();
                return new values_1.Value(true, label);
            }
        }
        k.value++;
    }
    c.popPC();
    return new values_1.Value(false, label);
}
// ------------------------------------------------------------
// forEach, 15.4.4.18
function forEach(thisArg, args) {
    var callbackfn = args[0] || new values_1.Value(undefined, label_1.bot);
    var callbackthisArg = args[1] || new values_1.Value(undefined, label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    c.pushPC(isCallable.label);
    if (!isCallable.value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.every: not a function', label_1.bot);
    }
    var k = new values_1.Value(0, len.label);
    c.labels.pc.lub(len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc.lub(kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            callbackfn.Call(callbackthisArg, [kValue, k, O]);
        }
        k.value++;
    }
    c.popPC();
    return new values_1.Value(undefined, label_1.bot);
}
// ------------------------------------------------------------
// map, 15.4.4.19
function map(thisArg, args) {
    var callbackfn = args[0] || new values_1.Value(undefined, label_1.bot);
    var callbackthisArg = args[1] || new values_1.Value(undefined, label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    c.pushPC(isCallable.label);
    if (!isCallable.value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.every: not a function', label_1.bot);
    }
    var A = new ArrayObject_1.ArrayObject();
    A.properties.length = len.value;
    A.labels.length = {
        value: len.label,
        existence: label_1.bot
    };
    var k = new values_1.Value(0, len.label);
    c.labels.pc.lub(len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc.lub(kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            var mappedValue = callbackfn.Call(callbackthisArg, [kValue, k, O]);
            A.DefineOwnProperty(k, {
                value: mappedValue.value,
                label: mappedValue.label,
                writable: true,
                enumerable: true,
                configurable: true
            }, false);
        }
        k.value++;
    }
    c.popPC();
    return new values_1.Value(A, label_1.bot);
}
// ------------------------------------------------------------
// filter, 15.4.4.20
function filter(thisArg, args) {
    var callbackfn = args[0] || new values_1.Value(undefined, label_1.bot);
    var callbackthisArg = args[1] || new values_1.Value(undefined, label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    c.pushPC(isCallable.label);
    if (!isCallable.value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.every: not a function', label_1.bot);
    }
    var A = new ArrayObject_1.ArrayObject();
    var k = new values_1.Value(0, len.label);
    var to = new values_1.Value(0, len.label);
    c.labels.pc.lub(len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc.lub(kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            var selected = callbackfn.Call(callbackthisArg, [kValue, k, O]);
            selected = ToBoolean_1.ToBoolean(selected);
            c.labels.pc.lub(selected.label);
            if (selected.value) {
                A.DefineOwnProperty(to, {
                    value: kValue.value,
                    label: kValue.label,
                    writable: true,
                    enumerable: true,
                    configurable: true
                }, false);
                to.value++;
            }
        }
        k.value++;
    }
    c.popPC();
    return new values_1.Value(A, label_1.bot);
}
// ------------------------------------------------------------
// reduce, 15.4.4.21
function reduce(thisArg, args) {
    var callbackfn = args[0] || new values_1.Value(undefined, label_1.bot);
    var initialValue = args[1];
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    var label = new label_1.Label();
    label.lub(isCallable.label);
    c.pushPC(isCallable.label);
    if (!isCallable.value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.every: not a function', label_1.bot);
    }
    var k = new values_1.Value(0, len.label);
    var accumulator;
    if (initialValue) {
        accumulator = initialValue;
    }
    else {
        var kPresent = new values_1.Value(false, label_1.bot);
        c.labels.pc.lub(len.label);
        label.lub(len.label);
        while (!kPresent.value && k.value < len.value) {
            kPresent = O.HasProperty(k);
            c.labels.pc.lub(kPresent.label);
            label.lub(kPresent.label);
            if (kPresent.value) {
                accumulator = O.Get(k);
            }
            k.value++;
        }
        if (!kPresent.value) {
            monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.reduce: empty array with no initial value', label_1.bot);
        }
    }
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc.lub(kPresent.label);
        label.lub(kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            accumulator = callbackfn.Call(new values_1.Value(undefined, label_1.bot), [accumulator, kValue, k, O]);
        }
        k.value++;
    }
    c.popPC();
    accumulator.raise(label);
    return accumulator;
}
// ------------------------------------------------------------
// reduceRight, 15.4.4.22
function reduceRight(thisArg, args) {
    var callbackfn = args[0] || new values_1.Value(undefined, label_1.bot);
    var initialValue = args[1];
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    var label = new label_1.Label();
    label.lub(isCallable.label);
    c.pushPC(isCallable.label);
    if (!isCallable.value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.every: not a function', label_1.bot);
    }
    var k = new values_1.Value(len.value - 1, len.label);
    var accumulator;
    if (initialValue) {
        accumulator = initialValue;
    }
    else {
        var kPresent = new values_1.Value(false, label_1.bot);
        c.labels.pc.lub(len.label);
        label.lub(len.label);
        while (!kPresent.value && k.value >= 0) {
            kPresent = O.HasProperty(k);
            c.labels.pc.lub(kPresent.label);
            label.lub(kPresent.label);
            if (kPresent.value) {
                accumulator = O.Get(k);
            }
            k.value--;
        }
        if (!kPresent.value) {
            monitor.Throw(monitor.modules.error.TypeErrorObject, 'Array.prototype.reduce: empty array with no initial value', label_1.bot);
        }
    }
    while (k.value >= 0) {
        var kPresent = O.HasProperty(k);
        c.labels.pc.lub(kPresent.label);
        label.lub(kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            accumulator = callbackfn.Call(new values_1.Value(undefined, label_1.bot), [accumulator, kValue, k, O]);
        }
        k.value--;
    }
    c.popPC();
    accumulator.raise(label);
    return accumulator;
}

},{"../Conversion/ToBoolean":28,"../Conversion/ToInteger":30,"../Conversion/ToObject":32,"../Conversion/ToString":34,"../Conversion/ToUInt32":36,"../Objects/ArrayObject":38,"../Utility/IsCallable":49,"../constants":50,"../ecma":53,"../function":57,"../label":60,"../values":75}],44:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
var constants = require("../constants");
var function_1 = require("../function");
var ecma_1 = require("../ecma");
var label_1 = require("../label");
// 15.6.4 ------------------------------------------------------------
var BooleanPrototype = /** @class */ (function (_super) {
    __extends(BooleanPrototype, _super);
    function BooleanPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Boolean';
        _this.PrimitiveValue = new Boolean(false);
        _this.host = host;
        return _this;
    }
    BooleanPrototype.prototype.Setup = function () {
        this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, label_1.bot);
        ecma_1.DefineFFF(this, constants.length, 1);
        ecma_1.DefineTFT(this, constants.constructor, monitor.instances.BooleanConstructor);
        ecma_1.DefineTFT(this, constants.toString, new function_1.BuiltinFunctionObject(toString, 0, this.host.toString));
        ecma_1.DefineTFT(this, new values_1.Value('valueOf', label_1.bot), new function_1.BuiltinFunctionObject(valueOf, 0, this.host.valueOf));
    };
    return BooleanPrototype;
}(ecma_1.Ecma));
exports.BooleanPrototype = BooleanPrototype;
// toString, 15.6.4.2 -----------------------------------------
var toString = function (thisArg, args) {
    var b = valueOf(thisArg);
    var s = b.value ? 'true' : 'false';
    return new values_1.Value(s, b.label);
};
// valueOf, 15.6.4.3 ------------------------------------------ 
var valueOf = function (thisArg, args) {
    if (typeof thisArg.value === 'boolean') {
        return thisArg;
    }
    if (thisArg.value !== null &&
        typeof thisArg.value === 'object' &&
        thisArg.value.Class === 'Boolean') {
        return new values_1.Value(thisArg.value.PrimitiveValue.valueOf(), thisArg.label);
    }
    monitor.Throw(monitor.modules.error.TypeErrorObject, 'Boolean.prototype.valueOf is not generic', thisArg.label);
};

},{"../constants":50,"../ecma":53,"../function":57,"../label":60,"../values":75}],45:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var pp = require("../pp");
var values_1 = require("../values");
var ecma_1 = require("../ecma");
var constants = require("../constants");
var function_1 = require("../function");
var ToUInt32_1 = require("../Conversion/ToUInt32");
var IsCallable_1 = require("../Utility/IsCallable");
// ------------------------------------------------------------
// Function Prototype, 15.3.4
var FunctionPrototype = /** @class */ (function (_super) {
    __extends(FunctionPrototype, _super);
    function FunctionPrototype(host) {
        var _this_1 = _super.call(this) || this;
        // 15.3.4
        _this_1.Class = 'Function';
        _this_1.Extensible = true;
        _this_1.host = host;
        return _this_1;
    }
    FunctionPrototype.prototype.Setup = function () {
        // 15.3.4.1
        ecma_1.DefineTFT(this, constants.constructor, monitor.instances.FunctionConstructor);
        this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, label_1.bot);
        ecma_1.DefineFFF(this, constants.length, 0);
        ecma_1.DefineTFT(this, constants.toString, new function_1.BuiltinFunctionObject(toString, 0, Function.prototype.toString));
        ecma_1.DefineTFT(this, constants.apply, new function_1.BuiltinFunctionObject(apply, 2, Function.prototype.apply));
        ecma_1.DefineTFT(this, constants.call, new function_1.BuiltinFunctionObject(call, 1, Function.prototype.call));
        ecma_1.DefineTFT(this, constants.bind, new function_1.BuiltinFunctionObject(bind, 1, Function.prototype.bind));
    };
    // 15.3.4
    FunctionPrototype.prototype.Call = function () { return new values_1.Value(undefined, label_1.bot); };
    ;
    FunctionPrototype.prototype.Construct = function () { return new values_1.Value(undefined, label_1.bot); };
    ;
    return FunctionPrototype;
}(ecma_1.Ecma));
exports.FunctionPrototype = FunctionPrototype;
// ------------------------------------------------------------
// 15.3.4.2 - Implementation Dependent
var toString = function (thisArg, args) {
    if (thisArg.value.Source) {
        var str = pp.pretty(thisArg.value.Source);
        return new values_1.Value(str, thisArg.label);
    }
    if (thisArg.value.host) {
        var str = thisArg.value.host.toString();
        return new values_1.Value(str, thisArg.label);
    }
    return new values_1.Value('function', thisArg.label);
};
// ------------------------------------------------------------
// 15.3.4.3
var apply = function (thisArg, args) {
    var _this = args[0] ? args[0] : new values_1.Value(undefined, label_1.bot);
    var argArray = args[1] ? args[1] : new values_1.Value(undefined, label_1.bot);
    monitor.context.pushPC(thisArg.label);
    if (!IsCallable_1.IsCallable(thisArg).value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'apply, not a function', label_1.bot);
    }
    monitor.context.raisePC(argArray.label);
    if (argArray.value === null || argArray.value === undefined) {
        var res = thisArg.Call(_this, []);
        monitor.context.popPC();
        return res;
    }
    if (typeof argArray.value !== 'object' || argArray.value.Class === undefined) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'apply, argument array not an object', label_1.bot);
    }
    var len = argArray.Get(constants.length);
    var n = ToUInt32_1.ToUInt32(len);
    var argList = [];
    for (var index = 0; index < n.value; index++) {
        var nextArg = argArray.Get(new values_1.Value(index, n.label));
        argList.push(nextArg);
    }
    // Since we cannot transfer the structural or existence info to
    //  the array used by Call, we raise the context accordingly.
    //  This is sound, but potentially an over approximation.
    monitor.context.raisePC(n.label);
    var res = thisArg.Call(_this, argList);
    monitor.context.popPC();
    return res;
};
// ------------------------------------------------------------
// 15.3.4.4
var call = function (thisArg, args) {
    var _this = args[0] ? args[0] : new values_1.Value(undefined, label_1.bot);
    var argList = {};
    for (var i = 1; i < args.length; i++) {
        argList[i - 1] = args[i];
    }
    argList.length = args.length - 1;
    monitor.context.pushPC(thisArg.label);
    if (!IsCallable_1.IsCallable(thisArg).value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'call, not a function', label_1.bot);
    }
    var res = thisArg.Call(_this, argList);
    monitor.context.popPC();
    return res;
};
// ------------------------------------------------------------
// 15.3.4.5
var bind = function (thisArg, args) {
    var Target = thisArg;
    var _this = args[0] ? args[0] : new values_1.Value(undefined, label_1.bot);
    var argList = [];
    for (var i = 1; i < args.length; i++) {
        argList[i - 1] = args[i];
    }
    if (!IsCallable_1.IsCallable(Target).value) {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'bind: Target is not a function', label_1.bot);
    }
    var F = new ecma_1.Ecma();
    F.TargetFunction = Target;
    F.BoundThis = _this;
    F.BoundArgs = argList;
    F.Class = 'Function';
    F.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, label_1.bot);
    F.Call = function (_thisVal, ExtraArgs) {
        var boundArgs = F.BoundArgs;
        var boundThis = F.BoundThis;
        var target = F.TargetFunction;
        var args = boundArgs.concat(ExtraArgs);
        return target.Call(boundThis, args);
    };
    F.Construct = function (ExtraArgs) {
        var target = F.TargetFunction;
        if (!target.Construct) {
            monitor.Throw(monitor.modules.error.TypeErrorObject, 'bind construct: no internal method Construct', label_1.bot);
        }
        var boundArgs = F.BoundArgs;
        var args = boundArgs.concat(ExtraArgs);
        return target.Construct(args);
    };
    F.HasInstance = function (V) {
        var target = F.TargetFunction;
        if (!target.HasInstance) {
            monitor.Throw(monitor.modules.error.TypeErrorObject, 'bind HasInstance: no internal method HasInstance', label_1.bot);
        }
        return target.HasInstance(V);
    };
    if (Target.Class === "Function") {
        var L = Target.length - args.length;
        F.length = L > 0 ? L : 0;
    }
    else {
        F.length = 0;
    }
    ecma_1.DefineFFF(F, constants.length, F.length);
    F.Extensible = true;
    var thrower = monitor.instances.ThrowTypeError;
    F.DefineOwnProperty(constants.caller, {
        get: thrower,
        set: thrower,
        enumerable: false, configurable: false,
        label: label_1.bot
    }, false);
    F.DefineOwnProperty(constants.arguments, {
        get: thrower,
        set: thrower,
        enumerable: false, configurable: false,
        label: label_1.bot
    }, false);
    return new values_1.Value(F, label_1.bot);
};

},{"../Conversion/ToUInt32":36,"../Utility/IsCallable":49,"../constants":50,"../ecma":53,"../function":57,"../label":60,"../pp":64,"../values":75}],46:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var values_1 = require("../values");
var ecma_1 = require("../ecma");
var constants = require("../constants");
var function_1 = require("../function");
var ToInteger_1 = require("../Conversion/ToInteger");
var ToString_1 = require("../Conversion/ToString");
var ToObject_1 = require("../Conversion/ToObject");
var CheckObjectCoercible_1 = require("../Utility/CheckObjectCoercible");
// ------------------------------------------------------------
// The Number Prototype, 15.7.4
var NumberPrototype = /** @class */ (function (_super) {
    __extends(NumberPrototype, _super);
    function NumberPrototype(host) {
        var _this_1 = _super.call(this) || this;
        _this_1.Class = 'Number';
        _this_1.PrimitiveValue = new Number(0);
        _this_1.PrimitiveLabel = label_1.bot;
        _this_1.host = host;
        return _this_1;
    }
    NumberPrototype.prototype.Setup = function () {
        this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, label_1.bot);
        ecma_1.DefineTFT(this, constants.constructor, monitor.instances.NumberConstructor);
        ecma_1.DefineFFF(this, constants.length, 0);
        ecma_1.DefineTFT(this, constants.toString, new function_1.BuiltinFunctionObject(toString, 1, this.host.toString));
        ecma_1.DefineTFT(this, constants.toLocaleString, new function_1.BuiltinFunctionObject(toLocaleString, 0, this.host.toLocaleString));
        ecma_1.DefineTFT(this, new values_1.Value('valueOf', label_1.bot), new function_1.BuiltinFunctionObject(valueOf, 0, this.host.valueOf));
        ecma_1.DefineTFT(this, constants.toFixed, new function_1.BuiltinFunctionObject(toFixed, 0, this.host.toFixed));
        ecma_1.DefineTFT(this, constants.toExponential, new function_1.BuiltinFunctionObject(toExponential, 0, this.host.toExponential));
        ecma_1.DefineTFT(this, constants.toPrecision, new function_1.BuiltinFunctionObject(toPrecision, 0, this.host.toPrecision));
    };
    return NumberPrototype;
}(ecma_1.Ecma));
exports.NumberPrototype = NumberPrototype;
// ------------------------------------------------------------
// toString, 15.7.4.2
var toString = function (thisArg, args) {
    var error = monitor.require('error');
    if (!(typeof thisArg.value === 'number' || (thisArg.value !== null && typeof thisArg.value === 'object' && thisArg.value.Class === 'Number'))) {
        monitor.Throw(error.TypeErrorObject, 'Number.prototype.toString is not generic', thisArg.label);
    }
    var radix = args[0] || new values_1.Value(undefined, label_1.bot);
    if (radix.value === undefined) {
        radix.value = 10;
    }
    radix = ToInteger_1.ToInteger(radix);
    var result;
    if (typeof thisArg.value === 'number') {
        result = thisArg.value.toString(radix.value);
        return new values_1.Value(result, label_1.lub(thisArg.label, radix.label));
    }
    else {
        result = thisArg.value.PrimitiveValue.toString(radix.value);
        return new values_1.Value(result, label_1.lub(thisArg.value.PrimitiveLabel, radix.label));
    }
};
// ------------------------------------------------------------
// toLocaleString, 15.7.4.3
var toLocaleString = function (thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var result = O.value.PrimitiveValue.toLocaleString();
    return new values_1.Value(result, O.value.PrimitiveLabel);
};
// ------------------------------------------------------------
// valueOf, 15.7.4.4
var valueOf = function (thisArg, args) {
    var error = monitor.require('error');
    if (!(typeof thisArg.value === 'number' || (thisArg.value !== null && typeof thisArg.value === 'object' && thisArg.value.Class === 'Number'))) {
        monitor.Throw(error.TypeErrorObject, 'Number.prototype.valueOf is not generic', thisArg.label);
    }
    if (typeof thisArg.value === 'number') {
        return thisArg;
    }
    var result = thisArg.value.PrimitiveValue.valueOf();
    return new values_1.Value(result, thisArg.value.PrimitiveLabel);
};
// ------------------------------------------------------------
// toFixed, 15.7.4.5
var toFixed = function (thisArg, args) {
    var precision = args[0] ? ToInteger_1.ToInteger(args[0]) : new values_1.Value(undefined, label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var _this = ToObject_1.ToObject(thisArg);
    return new values_1.Value(_this.value.PrimitiveValue.toFixed(precision.value), label_1.lub(precision.label, _this.label));
};
// ------------------------------------------------------------
// toExponential, 15.7.4.6
var toExponential = function (thisArg, args) {
    var precision = args[0] ? ToInteger_1.ToInteger(args[0]) : new values_1.Value(undefined, label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var _this = ToObject_1.ToObject(thisArg);
    return new values_1.Value(_this.value.PrimitiveValue.toExponential(precision.value), label_1.lub(precision.label, _this.label));
};
// ------------------------------------------------------------
// toPrecision, 15.7.4.7
var toPrecision = function (thisArg, args) {
    var precision = args[0] ? args[0] : new values_1.Value(undefined, label_1.bot);
    var lbl = label_1.lub(precision.label, thisArg.label);
    if (precision.value === undefined) {
        var strX = ToString_1.ToString(thisArg); //step 2
        return new values_1.Value(strX.value, lbl);
    }
    var p = ToInteger_1.ToInteger(precision); //step 3
    if (thisArg.value === NaN)
        return new values_1.Value('NaN', lbl); //step 4
    return new values_1.Value(thisArg.value.toPrecision(precision.value), lbl);
};

},{"../Conversion/ToInteger":30,"../Conversion/ToObject":32,"../Conversion/ToString":34,"../Utility/CheckObjectCoercible":48,"../constants":50,"../ecma":53,"../function":57,"../label":60,"../values":75}],47:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var values_1 = require("../values");
var ecma_1 = require("../ecma");
var constants = require("../constants");
var function_1 = require("../function");
var ToString_1 = require("../Conversion/ToString");
var ToObject_1 = require("../Conversion/ToObject");
var IsCallable_1 = require("../Utility/IsCallable");
// ------------------------------------------------------------
// The object prototype, 15.2.4
var ObjectPrototype = /** @class */ (function (_super) {
    __extends(ObjectPrototype, _super);
    function ObjectPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Prototype = new values_1.Value(null, label_1.bot);
        _this.Class = 'Object';
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    ObjectPrototype.prototype.Setup = function () {
        // 15.2.4.1
        ecma_1.DefineTFT(this, constants.constructor, monitor.instances.ObjectConstructor);
        ecma_1.DefineTFT(this, constants.toString, new function_1.BuiltinFunctionObject(toString, 0, Object.prototype.toString));
        ecma_1.DefineTFT(this, constants.toLocaleString, new function_1.BuiltinFunctionObject(toLocaleString, 0, Object.prototype.toLocaleString));
        ecma_1.DefineTFT(this, new values_1.Value('valueOf', label_1.bot), new function_1.BuiltinFunctionObject(valueOf, 0, Object.prototype.valueOf));
        ecma_1.DefineTFT(this, constants.hasOwnProperty, new function_1.BuiltinFunctionObject(hasOwnProperty, 1, Object.prototype.hasOwnProperty));
        ecma_1.DefineTFT(this, constants.isPrototypeOf, new function_1.BuiltinFunctionObject(isPrototypeOf, 1, Object.prototype.isPrototypeOf));
        ecma_1.DefineTFT(this, constants.propertyIsEnumerable, new function_1.BuiltinFunctionObject(propertyIsEnumerable, 1, Object.prototype.propertyIsEnumerable));
    };
    return ObjectPrototype;
}(ecma_1.Ecma));
exports.ObjectPrototype = ObjectPrototype;
// ------------------------------------------------------------
// Object.prototype.toString(), 15.2.4.2
function toString(thisArg, args) {
    if (thisArg.value === undefined)
        return new values_1.Value('[object Undefined]', thisArg.label);
    if (thisArg.value === null)
        return new values_1.Value('[object Null]', thisArg.label);
    var O = ToObject_1.ToObject(thisArg);
    return new values_1.Value('[object ' + O.value.Class + ']', thisArg.label);
}
// ------------------------------------------------------------
// 15.2.4.3
function toLocaleString(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var toString = O.Get(constants.toString);
    var b = IsCallable_1.IsCallable(toString);
    var result;
    monitor.context.pushPC(b.label);
    if (b.value) {
        result = toString.Call(O);
        result.raise(b.label);
    }
    else {
        monitor.Throw(monitor.modules.error.TypeError, "property 'toString' of object " + O + " is not a function ", label_1.bot);
    }
    monitor.context.popPC();
    return result;
}
// ------------------------------------------------------------
// 15.2.4.4
function valueOf(thisArg) {
    var o = ToObject_1.ToObject(thisArg);
    return o;
}
// ------------------------------------------------------------
// 15.2.4.5
function hasOwnProperty(thisArg, args) {
    var V = args[0] || new values_1.Value(undefined, label_1.bot);
    var P = ToString_1.ToString(V);
    var O = ToObject_1.ToObject(thisArg);
    var desc = O.GetOwnProperty(P);
    var result = desc.value !== undefined;
    return new values_1.Value(result, desc.label);
}
// ------------------------------------------------------------
// 15.2.4.6
function isPrototypeOf(thisArg, args) {
    var c = monitor.context;
    var V = args[0] || new values_1.Value(undefined, label_1.bot);
    if (V.value === null || typeof V.value !== 'object') {
        return new values_1.Value(false, V.label);
    }
    c.pushPC(V.label);
    var O = ToObject_1.ToObject(thisArg);
    c.popPC();
    var lbl = new label_1.Label();
    lbl.lub(V.label);
    while (true) {
        V = V.value.Prototype;
        lbl.lub(V.label);
        if (V.value === null) {
            return new values_1.Value(false, lbl);
        }
        if (O.value === V.value) {
            return new values_1.Value(true, lbl);
        }
        if (V === undefined) {
            throw new Error('Object.prototype.isPrototypeOf: object with undefined prototype');
        }
    }
}
// ------------------------------------------------------------
// 15.2.4.7
function propertyIsEnumerable(thisArg, args) {
    var V = args[0] || new values_1.Value(undefined, label_1.bot);
    var P = ToString_1.ToString(V);
    var O = ToObject_1.ToObject(thisArg);
    var desc = O.GetOwnProperty(P);
    if (desc.value === undefined) {
        return new values_1.Value(false, desc.label);
    }
    return new values_1.Value(desc.value.value, label_1.lub(desc.label, desc.value.label));
}

},{"../Conversion/ToObject":32,"../Conversion/ToString":34,"../Utility/IsCallable":49,"../constants":50,"../ecma":53,"../function":57,"../label":60,"../values":75}],48:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
// -------------------------------------------------------------
// CheckObjectCoercible, 9.10
function CheckObjectCoercible(x) {
    if (x.value === null || x.value === undefined) {
        monitor.context.raisePC(x.label);
        monitor.Throw(monitor.modules.error.TypeErrorObject, String(x.value) + ' is not coercible', x.label);
    }
}
exports.CheckObjectCoercible = CheckObjectCoercible;

},{}],49:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = require("../values");
// -------------------------------------------------------------
// IsCallable, 9.11
function IsCallable(x) {
    var b = false;
    if (x.value !== null && typeof x.value === 'object') {
        b = x.value.Call !== undefined;
    }
    return new values_1.Value(b, x.label);
}
exports.IsCallable = IsCallable;

},{"../values":75}],50:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("./label");
var values_1 = require("./values");
exports.index = new values_1.Value('index', label_1.bot);
exports.input = new values_1.Value('input', label_1.bot);
exports.value = new values_1.Value('value', label_1.bot);
exports.writable = new values_1.Value('writable', label_1.bot);
exports.enumerable = new values_1.Value('enumerable', label_1.bot);
exports.configurable = new values_1.Value('configurable', label_1.bot);
exports.get = new values_1.Value('get', label_1.bot);
exports.set = new values_1.Value('set', label_1.bot);
exports.print = new values_1.Value('print', label_1.bot);
exports.console = new values_1.Value('console', label_1.bot);
exports.alert = new values_1.Value('alert', label_1.bot);
exports.log = new values_1.Value('log', label_1.bot);
exports.prototype = new values_1.Value('prototype', label_1.bot);
exports.constructor = new values_1.Value('constructor', label_1.bot);
exports.length = new values_1.Value('length', label_1.bot);
exports.arguments = new values_1.Value('arguments', label_1.bot);
exports.upg = new values_1.Value('upg', label_1.bot);
exports.upgv = new values_1.Value('upgv', label_1.bot);
exports.upgf = new values_1.Value('upgf', label_1.bot);
exports.upgs = new values_1.Value('upgs', label_1.bot);
exports.getPrototypeOf = new values_1.Value('getPrototypeOf', label_1.bot);
exports.getOwnPropertyDescriptor = new values_1.Value('getOwnPropertyDescriptor', label_1.bot);
exports.getOwnPropertyNames = new values_1.Value('getOwnPropertyNames', label_1.bot);
exports.create = new values_1.Value('create', label_1.bot);
exports.require = new values_1.Value('require', label_1.bot);
exports.defineProperty = new values_1.Value('defineProperty', label_1.bot);
exports.defineProperties = new values_1.Value('defineProperties', label_1.bot);
exports.seal = new values_1.Value('seal', label_1.bot);
exports.freeze = new values_1.Value('freeze', label_1.bot);
exports.preventExtensions = new values_1.Value('preventExtensions', label_1.bot);
exports.isSealed = new values_1.Value('isSealed', label_1.bot);
exports.isFrozen = new values_1.Value('isFrozen', label_1.bot);
exports.isExtensible = new values_1.Value('isExtensible', label_1.bot);
exports.keys = new values_1.Value('keys', label_1.bot);
exports.toString = new values_1.Value('toString', label_1.bot);
exports.toLocaleString = new values_1.Value('toLocaleString', label_1.bot);
exports.valueOf = new values_1.Value('valueOf', label_1.bot);
exports.hasOwnProperty = new values_1.Value('hasOwnProperty', label_1.bot);
exports.isPrototypeOf = new values_1.Value('isPrototypeOf', label_1.bot);
exports.propertyIsEnumerable = new values_1.Value('propertyIsEnumerable', label_1.bot);
exports.apply = new values_1.Value('apply', label_1.bot);
exports.call = new values_1.Value('call', label_1.bot);
exports.caller = new values_1.Value('caller', label_1.bot);
exports.bind = new values_1.Value('bind', label_1.bot);
exports.NaN = new values_1.Value('NaN', label_1.bot);
exports.Infinity = new values_1.Value('Infinity', label_1.bot);
exports.undefined = new values_1.Value('undefined', label_1.bot);
exports.eval = new values_1.Value('eval', label_1.bot);
exports.parseInt = new values_1.Value('parseInt', label_1.bot);
exports.parseFloat = new values_1.Value('parseFloat', label_1.bot);
exports.isNaN = new values_1.Value('isNaN', label_1.bot);
exports.isFinite = new values_1.Value('isFinite', label_1.bot);
exports.decodeURI = new values_1.Value('decodeURI', label_1.bot);
exports.decodeURIComponent = new values_1.Value('decodeURIComponent', label_1.bot);
exports.encodeURI = new values_1.Value('encodeURI', label_1.bot);
exports.encodeURIComponent = new values_1.Value('encodeURIComponent', label_1.bot);
exports.Object = new values_1.Value('Object', label_1.bot);
exports.Function = new values_1.Value('Function', label_1.bot);
exports.Array = new values_1.Value('Array', label_1.bot);
exports.String = new values_1.Value('String', label_1.bot);
exports.Boolean = new values_1.Value('Boolean', label_1.bot);
exports.Number = new values_1.Value('Number', label_1.bot);
exports.Date = new values_1.Value('Date', label_1.bot);
exports.RegExp = new values_1.Value('RegExp', label_1.bot);
exports.Error = new values_1.Value('Error', label_1.bot);
exports.EvalError = new values_1.Value('EvalError', label_1.bot);
exports.RangeError = new values_1.Value('RangeError', label_1.bot);
exports.ReferenceError = new values_1.Value('ReferenceError', label_1.bot);
exports.SyntaxError = new values_1.Value('SyntaxError', label_1.bot);
exports.TypeError = new values_1.Value('TypeError', label_1.bot);
exports.URIError = new values_1.Value('URIError', label_1.bot);
exports.Math = new values_1.Value('Math', label_1.bot);
exports.JSON = new values_1.Value('JSON', label_1.bot);
exports.parse = new values_1.Value('parse', label_1.bot);
exports.stringify = new values_1.Value('stringify', label_1.bot);
exports.name = new values_1.Value('name', label_1.bot);
exports.message = new values_1.Value('message', label_1.bot);
exports.isArray = new values_1.Value('isArray', label_1.bot);
exports.concat = new values_1.Value('concat', label_1.bot);
exports.join = new values_1.Value('join', label_1.bot);
exports.pop = new values_1.Value('pop', label_1.bot);
exports.push = new values_1.Value('push', label_1.bot);
exports.reverse = new values_1.Value('reverse', label_1.bot);
exports.shift = new values_1.Value('shift', label_1.bot);
exports.slice = new values_1.Value('slice', label_1.bot);
exports.sort = new values_1.Value('sort', label_1.bot);
exports.splice = new values_1.Value('splice', label_1.bot);
exports.unshift = new values_1.Value('unshift', label_1.bot);
exports.indexOf = new values_1.Value('indexOf', label_1.bot);
exports.lastIndexOf = new values_1.Value('lastIndexOf', label_1.bot);
exports.every = new values_1.Value('every', label_1.bot);
exports.some = new values_1.Value('some', label_1.bot);
exports.forEach = new values_1.Value('forEach', label_1.bot);
exports.map = new values_1.Value('map', label_1.bot);
exports.filter = new values_1.Value('filter', label_1.bot);
exports.reduce = new values_1.Value('reduce', label_1.bot);
exports.reduceRight = new values_1.Value('reduceRight', label_1.bot);
exports.fromCharCode = new values_1.Value('fromCharCode', label_1.bot);
exports.charAt = new values_1.Value('charAt', label_1.bot);
exports.charCodeAt = new values_1.Value('charCodeAt', label_1.bot);
exports.localeCompare = new values_1.Value('localeCompare', label_1.bot);
exports.match = new values_1.Value('match', label_1.bot);
exports.replace = new values_1.Value('replace', label_1.bot);
exports.search = new values_1.Value('search', label_1.bot);
exports.split = new values_1.Value('split', label_1.bot);
exports.substring = new values_1.Value('substring', label_1.bot);
exports.substr = new values_1.Value('substr', label_1.bot);
exports.toLowerCase = new values_1.Value('toLowerCase', label_1.bot);
exports.toLocaleLowerCase = new values_1.Value('toLocaleLowerCase', label_1.bot);
exports.toUpperCase = new values_1.Value('toUpperCase', label_1.bot);
exports.toLocaleUpperCase = new values_1.Value('toLocaleUpperCase', label_1.bot);
exports.trim = new values_1.Value('trim', label_1.bot);
exports.MAX_VALUE = new values_1.Value('MAX_VALUE', label_1.bot);
exports.MIN_VALUE = new values_1.Value('MIN_VALUE', label_1.bot);
exports.NEGATIVE_INFINITY = new values_1.Value('NEGATIVE_INFINITY', label_1.bot);
exports.POSITIVE_INFINITY = new values_1.Value('POSITIVE_INFINITY', label_1.bot);
exports.toFixed = new values_1.Value('toFixed', label_1.bot);
exports.toExponential = new values_1.Value('toExponential', label_1.bot);
exports.toPrecision = new values_1.Value('toPrecision', label_1.bot);
exports.E = new values_1.Value('E', label_1.bot);
exports.LN10 = new values_1.Value('LN10', label_1.bot);
exports.LN2 = new values_1.Value('LN2', label_1.bot);
exports.LOG2E = new values_1.Value('LOG2E', label_1.bot);
exports.LOG10E = new values_1.Value('LOG10E', label_1.bot);
exports.PI = new values_1.Value('PI', label_1.bot);
exports.SQRT1_2 = new values_1.Value('SQRT1_2', label_1.bot);
exports.SQRT2 = new values_1.Value('SQRT2', label_1.bot);
exports.abs = new values_1.Value('abs', label_1.bot);
exports.acos = new values_1.Value('acos', label_1.bot);
exports.asin = new values_1.Value('asin', label_1.bot);
exports.atan = new values_1.Value('atan', label_1.bot);
exports.atan2 = new values_1.Value('atan2', label_1.bot);
exports.ceil = new values_1.Value('ceil', label_1.bot);
exports.cos = new values_1.Value('cos', label_1.bot);
exports.exp = new values_1.Value('exp', label_1.bot);
exports.floor = new values_1.Value('floor', label_1.bot);
exports.log = new values_1.Value('log', label_1.bot);
exports.max = new values_1.Value('max', label_1.bot);
exports.min = new values_1.Value('min', label_1.bot);
exports.pow = new values_1.Value('pow', label_1.bot);
exports.random = new values_1.Value('random', label_1.bot);
exports.round = new values_1.Value('round', label_1.bot);
exports.sin = new values_1.Value('sin', label_1.bot);
exports.sqrt = new values_1.Value('sqrt', label_1.bot);
exports.tan = new values_1.Value('tan', label_1.bot);
exports.toDateString = new values_1.Value('toDateString', label_1.bot);
exports.toTimeString = new values_1.Value('toTimeString', label_1.bot);
exports.toLocaleDateString = new values_1.Value('toLocaleDateString', label_1.bot);
exports.toLocaleTimeString = new values_1.Value('toLocaleTimeString', label_1.bot);
exports.getTime = new values_1.Value('getTime', label_1.bot);
exports.getFullYear = new values_1.Value('getFullYear', label_1.bot);
exports.getUTCFullYear = new values_1.Value('getUTCFullYear', label_1.bot);
exports.getMonth = new values_1.Value('getMonth', label_1.bot);
exports.getUTCMonth = new values_1.Value('getUTCMonth', label_1.bot);
exports.getDate = new values_1.Value('getDate', label_1.bot);
exports.getUTCDate = new values_1.Value('getUTCDate', label_1.bot);
exports.getDay = new values_1.Value('getDay', label_1.bot);
exports.getUTCDay = new values_1.Value('getUTCDay', label_1.bot);
exports.getHours = new values_1.Value('getHours', label_1.bot);
exports.getUTCHours = new values_1.Value('getUTCHours', label_1.bot);
exports.getMinutes = new values_1.Value('getMinutes', label_1.bot);
exports.getUTCMinutes = new values_1.Value('getUTCMinutes', label_1.bot);
exports.getSeconds = new values_1.Value('getSeconds', label_1.bot);
exports.getUTCSeconds = new values_1.Value('getUTCSeconds', label_1.bot);
exports.getMilliseconds = new values_1.Value('getMilliseconds', label_1.bot);
exports.getUTCMilliseconds = new values_1.Value('getUTCMilliseconds', label_1.bot);
exports.getTimezoneOffset = new values_1.Value('getTimezoneOffset', label_1.bot);
exports.setTime = new values_1.Value('setTime', label_1.bot);
exports.setMilliseconds = new values_1.Value('setMilliseconds', label_1.bot);
exports.setUTCMilliseconds = new values_1.Value('setUTCMilliseconds', label_1.bot);
exports.setSeconds = new values_1.Value('setSeconds', label_1.bot);
exports.setUTCSeconds = new values_1.Value('setUTCSeconds', label_1.bot);
exports.setMinutes = new values_1.Value('setMinutes', label_1.bot);
exports.setUTCMinutes = new values_1.Value('setUTCMinutes', label_1.bot);
exports.setHours = new values_1.Value('setHours', label_1.bot);
exports.setUTCHours = new values_1.Value('setUTCHours', label_1.bot);
exports.setDate = new values_1.Value('setDate', label_1.bot);
exports.setUTCDate = new values_1.Value('setUTCDate', label_1.bot);
exports.setMonth = new values_1.Value('setMonth', label_1.bot);
exports.setUTCMonth = new values_1.Value('setUTCMonth', label_1.bot);
exports.setFullYear = new values_1.Value('setFullYear', label_1.bot);
exports.setUTCFullYear = new values_1.Value('setUTCFullYear', label_1.bot);
exports.toUTCString = new values_1.Value('toUTCString', label_1.bot);
exports.toISOString = new values_1.Value('toISOString', label_1.bot);
exports.toJSON = new values_1.Value('toJSON', label_1.bot);
exports.parse = new values_1.Value('parse', label_1.bot);
exports.UTC = new values_1.Value('UTC', label_1.bot);
exports.now = new values_1.Value('now', label_1.bot);
exports.exec = new values_1.Value('exec', label_1.bot);
exports.test = new values_1.Value('test', label_1.bot);
exports.source = new values_1.Value('source', label_1.bot);
exports.global = new values_1.Value('global', label_1.bot);
exports.ignoreCase = new values_1.Value('ignoreCase', label_1.bot);
exports.multiline = new values_1.Value('multiline', label_1.bot);
exports.lastIndex = new values_1.Value('lastIndex', label_1.bot);
/*
var strings = [
  'index',
  'input',
  'value',
  'writable',
  'enumerable',
  'configurable',
  'get',
  'set',
  'print',
  'console',
  'alert',
  'log',
  'prototype',
  'constructor',
  'length',
  'arguments',
  'upg',
  'upgv',
  'upgf',
  'upgs',
  'getPrototypeOf',
  'getOwnPropertyDescriptor',
  'getOwnPropertyNames',
  'create',
  'require',
  'defineProperty',
  'defineProperties',
  'seal',
  'freeze',
  'preventExtensions',
  'isSealed',
  'isFrozen',
  'isExtensible',
  'keys',
  'toString',
  'toLocaleString',
  'valueOf',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'apply',
  'call',
  'caller',
  'bind',
  'NaN',
  'Infinity',
  'undefined',
  'eval',
  'parseInt',
  'parseFloat',
  'isNaN',
  'isFinite',
  'decodeURI',
  'decodeURIComponent',
  'encodeURI',
  'encodeURIComponent',
  'Object',
  'Function',
  'Array',
  'String',
  'Boolean',
  'Number',
  'Date',
  'RegExp',
  'Error',
  'EvalError',
  'RangeError',
  'ReferenceError',
  'SyntaxError',
  'TypeError',
  'URIError',
  'Math',
  'JSON',
  'parse',
  'stringify',
  'name',
  'message',
  'isArray',
  'concat',
  'join',
  'pop',
  'push',
  'reverse',
  'shift',
  'slice',
  'sort',
  'splice',
  'unshift',
  'indexOf',
  'lastIndexOf',
  'every',
  'some',
  'forEach',
  'map',
  'filter',
  'reduce',
  'reduceRight',
  'fromCharCode',
  'charAt',
  'charCodeAt',
  'localeCompare',
  'match',
  'replace',
  'search',
  'split',
  'substring',
  'substr',
  'toLowerCase',
  'toLocaleLowerCase',
  'toUpperCase',
  'toLocaleUpperCase',
  'trim',
  'MAX_VALUE',
  'MIN_VALUE',
  'NEGATIVE_INFINITY',
  'POSITIVE_INFINITY',
  'toFixed',
  'toExponential',
  'toPrecision',
  'E',
  'LN10',
  'LN2',
  'LOG2E',
  'LOG10E',
  'PI',
  'SQRT1_2',
  'SQRT2',
  'abs',
  'acos',
  'asin',
  'atan',
  'atan2',
  'ceil',
  'cos',
  'exp',
  'floor',
  'log',
  'max',
  'min',
  'pow',
  'random',
  'round',
  'sin',
  'sqrt',
  'tan',
  'toDateString',
  'toTimeString',
  'toLocaleDateString',
  'toLocaleTimeString',
  'getTime',
  'getFullYear',
  'getUTCFullYear',
  'getMonth',
  'getUTCMonth',
  'getDate',
  'getUTCDate',
  'getDay',
  'getUTCDay',
  'getHours',
  'getUTCHours',
  'getMinutes',
  'getUTCMinutes',
  'getSeconds',
  'getUTCSeconds',
  'getMilliseconds',
  'getUTCMilliseconds',
  'getTimezoneOffset',
  'setTime',
  'setMilliseconds',
  'setUTCMilliseconds',
  'setSeconds',
  'setUTCSeconds',
  'setMinutes',
  'setUTCMinutes',
  'setHours',
  'setUTCHours',
  'setDate',
  'setUTCDate',
  'setMonth',
  'setUTCMonth',
  'setFullYear',
  'setUTCFullYear',
  'toUTCString',
  'toISOString',
  'toJSON',
  'parse',
  'UTC',
  'now',
  'exec',
  'test',
  'source',
  'global',
  'ignoreCase',
  'multiline',
  'lastIndex'
];

export var constants = {};
for (var i = 0, len = strings.length; i < len; i++) {
  var str = strings[i];
  console.log(`export var ${str} = new Value('${str}', bot);`)
  constants[str] = new Value(str, Label.bot);
}
*/



},{"./label":60,"./values":75}],51:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("./label");
var stack_1 = require("./stack");
var pp_1 = require("./pp");
// --- -----------------------------------------------------------------------
var Bucket = /** @class */ (function () {
    function Bucket(element, prev, next) {
        this.element = element;
        this.next = next || null;
        this.prev = prev || null;
    }
    return Bucket;
}());
var WorkList = /** @class */ (function () {
    function WorkList() {
        this.length = 0;
        this.head = null;
        this.thenloc = null;
    }
    // ---
    WorkList.prototype.toString = function () {
        var pos = this.head;
        var str = 'worklist:';
        var cnt = 1;
        while (pos) {
            var element = pos.element;
            var line;
            if (typeof element === 'function') {
                line = cnt + ': ' + String(element);
            }
            else if ('func' in element && 'data' in element) {
                line = cnt + ': ' + String(element.func);
            }
            else {
                line = cnt + ': ' + element.type + ' ' + pp_1.pretty(element);
            }
            var ix = line.indexOf('\n');
            if (ix > 0) {
                line = line.slice(0, ix);
            }
            str = str + '\n' + line;
            pos = pos.next;
            cnt++;
        }
        return str;
    };
    // ---
    WorkList.prototype.push = function (element) {
        this.head = new Bucket(element, null, this.head);
        if (this.head.next) {
            this.head.next.prev = this.head;
        }
        this.length++;
    };
    // ---
    WorkList.prototype.prepend = function (elements) {
        for (var i = elements.length - 1; i >= 0; i--) {
            this.push(elements[i]);
        }
    };
    // ---
    WorkList.prototype.peek = function () {
        if (this.head === null) {
            return monitor.fatal("WorkList.peek() empty work list");
        }
        return this.head.element;
    };
    // ---
    WorkList.prototype.pop = function () {
        if (this.head === null) {
            return monitor.fatal("WorkList.pop() empty work list");
        }
        var element = this.head.element;
        this.head = this.head.next;
        this.length--;
        return element;
    };
    // ---
    WorkList.prototype.empty = function () {
        return (this.head === null);
    };
    // ---
    WorkList.prototype.top = function () {
        return new WorkListPtr(this, null);
    };
    // ---
    WorkList.prototype.first = function (element) {
        if (element) {
            this.push(element);
            this.thenloc = this.head;
        }
        else {
            // if no element given, reset thenloc to force next called 'then'
            // to be a 'first'
            this.thenloc = null;
        }
    };
    // ---
    WorkList.prototype.then = function (element) {
        if (!this.thenloc) {
            this.first(element);
        }
        else {
            var before = this.thenloc;
            var after = this.thenloc.next;
            var bucket = new Bucket(element, before, after);
            before.next = bucket;
            this.thenloc = before.next;
            if (after) {
                after.prev = before.next;
            }
            this.length++;
        }
    };
    return WorkList;
}());
// -------------------------------------------------------------
var WorkListPtr = /** @class */ (function () {
    function WorkListPtr(worklist, pos) {
        this.worklist = worklist;
        this.pos = pos;
    }
    WorkListPtr.prototype.then = function (element, data) {
        if (!element) {
            throw Error();
        }
        var thing = element;
        if (data) {
            thing = { func: element, data: data };
        }
        if (this.pos) {
            var before = this.pos;
            var after = this.pos.next;
            var bucket = new Bucket(thing, before, after);
            before.next = bucket;
            this.pos = before.next;
            if (after) {
                after.prev = before.next;
            }
            this.worklist.length++;
        }
        else {
            this.worklist.push(thing);
            this.pos = this.worklist.head;
        }
        return this;
    };
    return WorkListPtr;
}());
var Result = /** @class */ (function () {
    function Result(value) {
        this.type = 'normal';
        this.target = null;
        this.value = value || null;
    }
    return Result;
}());
exports.Result = Result;
// -------------------------------------------------------------
// The Execution Context
var Context = /** @class */ (function () {
    function Context(thisValue, variableEnv, lexicalEnv) {
        this.labels = new /** @class */ (function () {
            function class_1(outer) {
                this.excLbl = label_1.bot;
                this.retLbl = label_1.bot;
                this.labelmap = {};
                this.outer = outer;
            }
            Object.defineProperty(class_1.prototype, "exc", {
                get: function () {
                    if (monitor.options.get('monitor.taintMode')) {
                        return label_1.bot;
                    }
                    return this.excLbl;
                },
                set: function (l) {
                    this.excLbl = l;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(class_1.prototype, "ret", {
                get: function () {
                    if (monitor.options.get('monitor.taintMode')) {
                        return label_1.bot;
                    }
                    return this.retLbl;
                },
                set: function (l) {
                    this.retLbl = l;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(class_1.prototype, "pc", {
                get: function () {
                    if (monitor.options.get('monitor.taintMode')) {
                        return label_1.bot;
                    }
                    return this.outer.pcStack.peek();
                },
                set: function (l) {
                    this.outer.pcStack.pop();
                    this.outer.pcStack.push(l);
                },
                enumerable: true,
                configurable: true
            });
            return class_1;
        }())(this);
        this.thisValue = thisValue;
        this.variableEnv = variableEnv;
        this.lexicalEnv = lexicalEnv;
        this.pcStack = new stack_1.Stack();
        this.pcStack.push(label_1.Label.bot);
        this.workList = new WorkList();
        this.result = new Result();
        this.valueStack = new stack_1.Stack();
    }
    Object.defineProperty(Context.prototype, "effectivePC", {
        // ---
        get: function () {
            if (monitor.options.get('monitor.taintMode')) {
                return label_1.bot;
            }
            return label_1.lub(this.labels.pc, this.labels.exc, this.labels.ret);
        },
        enumerable: true,
        configurable: true
    });
    // ---
    Context.prototype.clone = function (thisValue, variableEnv, lexicalEnv) {
        var tV = thisValue || this.thisValue;
        var lE = lexicalEnv || this.lexicalEnv;
        var vE = variableEnv || this.variableEnv;
        var newCtx = new Context(tV, vE, lE);
        newCtx.labels.pc = this.effectivePC;
        newCtx.labels.exc = this.labels.exc;
        newCtx.labels.ret = this.labels.ret;
        return newCtx;
    };
    // ---
    Context.prototype.pushPC = function (l) {
        this.pcStack.push(label_1.lub(l, this.labels.pc));
    };
    // ---
    Context.prototype.raisePC = function (l) {
        this.labels.pc = label_1.lub(this.labels.pc, l);
    };
    // ---
    Context.prototype.popPC = function () {
        return this.pcStack.pop();
    };
    return Context;
}());
exports.Context = Context;

},{"./label":60,"./pp":64,"./stack":68}],52:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label = require("./label");
var values_1 = require("./values");
var ecma = require("./ecma");
var constants = require("./constants");
var function_1 = require("./function");
var HasInstance_1 = require("./HasInstance");
var ToPrimitive_1 = require("./Conversion/ToPrimitive");
var ToNumber_1 = require("./Conversion/ToNumber");
var ToString_1 = require("./Conversion/ToString");
exports.functor = function (monitor) {
    var error = monitor.require('error');
    var Ecma = ecma.Ecma;
    var Label = label.Label;
    var lub = label.lub;
    var le = label.le;
    var bot = Label.bot;
    var top = Label.top;
    // ------------------------------------------------------------
    function allocate(host) {
        var dateConstructor = new DateConstructor(host.Date);
        var datePrototype = dateConstructor._proto;
        return { DateConstructor: dateConstructor,
            DatePrototype: datePrototype
        };
    }
    // ------------------------------------------------------------
    // The Date Constructor, 15.9.3
    var DateConstructor = /** @class */ (function (_super) {
        __extends(DateConstructor, _super);
        function DateConstructor(host) {
            var _this = _super.call(this) || this;
            _this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, bot);
            _this.Class = 'Function';
            _this.Extensible = true;
            _this._proto = new DatePrototype(_this, host);
            _this.host = host;
            ecma.DefineFFF(_this, constants.length, 7);
            ecma.DefineFFF(_this, constants.prototype, _this._proto);
            ecma.DefineTFT(_this, constants.parse, new function_1.BuiltinFunctionObject(parse, 0, Date.parse));
            ecma.DefineTFT(_this, constants.UTC, new function_1.BuiltinFunctionObject(UTC, 0, Date.UTC));
            ecma.DefineTFT(_this, constants.now, new function_1.BuiltinFunctionObject(now, 0, Date.now));
            return _this;
        }
        return DateConstructor;
    }(Ecma));
    DateConstructor.prototype.HasInstance = HasInstance_1.HasInstance;
    //----------------------------------------------------
    // 15.9.1.1
    DateConstructor.prototype.Call = function (thisArg, args) {
        var str = monitor.instances.DateConstructor.host();
        return new values_1.Value(str, bot);
    };
    //----------------------------------------------------
    // 15.9.3.1
    DateConstructor.prototype.Construct = function (args) {
        var _args = [];
        var label = new Label();
        var obj;
        var _Date = monitor.instances.DateConstructor.host;
        switch (args.length) {
            case 0:
                obj = new DateObject(new _Date(), new Label('Date'));
                break;
            case 1:
                var v = ToPrimitive_1.ToPrimitive(args[0]);
                if (typeof v.value !== 'string') {
                    v = ToNumber_1.ToNumber(v);
                }
                obj = new DateObject(new _Date(v.value), v.label);
                break;
            default:
                for (var i = 0, len = args.length; i < len; i++) {
                    var val = ToNumber_1.ToNumber(args[i]);
                    _args[i] = val.value;
                    label.lub(val.label);
                }
                if (len == 2) {
                    _args[2] = 1;
                }
                for (; i < 7; i++) {
                    _args[i] = 0;
                }
                var date = new _Date(_args[0], _args[1], _args[2], _args[3], _args[4], _args[5], _args[6]);
                obj = new DateObject(date, label);
        }
        return new values_1.Value(obj, bot);
    };
    // ------------------------------------------------------------
    // parse, 15.9.4.2
    function parse(thisArg, args) {
        var string = args[0] || new values_1.Value(undefined, bot);
        string = ToString_1.ToString(string);
        var number = monitor.instances.DateConstructor.host.parse(string.value);
        return new values_1.Value(number, string.label);
    }
    // ------------------------------------------------------------
    // UTC, 15.9.4.3
    function UTC(thisArg, args) {
        var _args = [];
        var label = new Label();
        for (var i = 0, len = args.length; i < len; i++) {
            var val = ToNumber_1.ToNumber(args[i]);
            _args[i] = val.value;
            label.lub(val.label);
        }
        var number = monitor.instances.DateConstructor.host.UTC.apply(null, _args);
        return new values_1.Value(number, label);
    }
    // ------------------------------------------------------------
    // now, 15.9.4.4
    function now(thisArg, args) {
        var number = monitor.instances.DateConstructor.host.now();
        return new values_1.Value(number, bot /*top*/);
    }
    // ------------------------------------------------------------
    // The Date Prototype, 15.9.5
    var DatePrototype = /** @class */ (function (_super) {
        __extends(DatePrototype, _super);
        function DatePrototype(constructor, _Date) {
            var _this = _super.call(this) || this;
            _this.Class = 'Date';
            _this.PrimitiveValue = new values_1.Value(NaN, bot);
            _this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, bot);
            _this.host = _Date.prototype;
            ecma.DefineFFF(_this, constants.length, 0);
            ecma.DefineTFT(_this, constants.constructor, constructor);
            ecma.DefineTFT(_this, constants.toString, new function_1.BuiltinFunctionObject(toString, 0, _Date.prototype.toString));
            ecma.DefineTFT(_this, constants.toDateString, new function_1.BuiltinFunctionObject(toDateString, 0, _Date.prototype.toDateString));
            ecma.DefineTFT(_this, constants.toTimeString, new function_1.BuiltinFunctionObject(toTimeString, 0, _Date.prototype.toTimeString));
            ecma.DefineTFT(_this, constants.toLocaleString, new function_1.BuiltinFunctionObject(toLocaleString, 0, _Date.prototype.toLocaleString));
            ecma.DefineTFT(_this, constants.toLocaleDateString, new function_1.BuiltinFunctionObject(toLocaleDateString, 0, _Date.prototype.toLocaleDateString));
            ecma.DefineTFT(_this, constants.toLocaleTimeString, new function_1.BuiltinFunctionObject(toLocaleTimeString, 0, _Date.prototype.toLocaleTimeString));
            ecma.DefineTFT(_this, new values_1.Value('valueOf', bot), new function_1.BuiltinFunctionObject(valueOf, 0, _Date.prototype.valueOf));
            ecma.DefineTFT(_this, constants.getTime, new function_1.BuiltinFunctionObject(getTime, 0, _Date.prototype.getTime));
            ecma.DefineTFT(_this, constants.getFullYear, new function_1.BuiltinFunctionObject(getFullYear, 0, _Date.prototype.getFullYear));
            ecma.DefineTFT(_this, constants.getUTCFullYear, new function_1.BuiltinFunctionObject(getUTCFullYear, 0, _Date.prototype.getUTCFullYear));
            ecma.DefineTFT(_this, constants.getMonth, new function_1.BuiltinFunctionObject(getMonth, 0, _Date.prototype.getMonth));
            ecma.DefineTFT(_this, constants.getUTCMonth, new function_1.BuiltinFunctionObject(getUTCMonth, 0, _Date.prototype.getUTCMonth));
            ecma.DefineTFT(_this, constants.getDate, new function_1.BuiltinFunctionObject(getDate, 0, _Date.prototype.getDate));
            ecma.DefineTFT(_this, constants.getUTCDate, new function_1.BuiltinFunctionObject(getUTCDate, 0, _Date.prototype.getUTCDate));
            ecma.DefineTFT(_this, constants.getDay, new function_1.BuiltinFunctionObject(getDay, 0, _Date.prototype.getDay));
            ecma.DefineTFT(_this, constants.getUTCDay, new function_1.BuiltinFunctionObject(getUTCDay, 0, _Date.prototype.getUTCDay));
            ecma.DefineTFT(_this, constants.getHours, new function_1.BuiltinFunctionObject(getHours, 0, _Date.prototype.getHours));
            ecma.DefineTFT(_this, constants.getUTCHours, new function_1.BuiltinFunctionObject(getUTCHours, 0, _Date.prototype.getUTCHours));
            ecma.DefineTFT(_this, constants.getMinutes, new function_1.BuiltinFunctionObject(getMinutes, 0, _Date.prototype.getMinutes));
            ecma.DefineTFT(_this, constants.getUTCMinutes, new function_1.BuiltinFunctionObject(getUTCMinutes, 0, _Date.prototype.getUTCMinutes));
            ecma.DefineTFT(_this, constants.getSeconds, new function_1.BuiltinFunctionObject(getSeconds, 0, _Date.prototype.getSeconds));
            ecma.DefineTFT(_this, constants.getUTCSeconds, new function_1.BuiltinFunctionObject(getUTCSeconds, 0, _Date.prototype.getUTCSeconds));
            ecma.DefineTFT(_this, constants.getMilliseconds, new function_1.BuiltinFunctionObject(getMilliseconds, 0, _Date.prototype.getMilliseconds));
            ecma.DefineTFT(_this, constants.getUTCMilliseconds, new function_1.BuiltinFunctionObject(getUTCMilliseconds, 0, _Date.prototype.getUTCMilliseconds));
            ecma.DefineTFT(_this, constants.getTimezoneOffset, new function_1.BuiltinFunctionObject(getTimezoneOffset, 0, _Date.prototype.getTimezoneOffset));
            ecma.DefineTFT(_this, constants.setTime, new function_1.BuiltinFunctionObject(setTime, 1, _Date.prototype.setTime));
            ecma.DefineTFT(_this, constants.setMilliseconds, new function_1.BuiltinFunctionObject(setMilliseconds, 0, _Date.prototype.setMilliseconds));
            ecma.DefineTFT(_this, constants.setUTCMilliseconds, new function_1.BuiltinFunctionObject(setUTCMilliseconds, 0, _Date.prototype.setUTCMilliseconds));
            ecma.DefineTFT(_this, constants.setSeconds, new function_1.BuiltinFunctionObject(setSeconds, 0, _Date.prototype.setSeconds));
            ecma.DefineTFT(_this, constants.setUTCSeconds, new function_1.BuiltinFunctionObject(setUTCSeconds, 0, _Date.prototype.setUTCSeconds));
            ecma.DefineTFT(_this, constants.setMinutes, new function_1.BuiltinFunctionObject(setMinutes, 0, _Date.prototype.setMinutes));
            ecma.DefineTFT(_this, constants.setUTCMinutes, new function_1.BuiltinFunctionObject(setUTCMinutes, 0, _Date.prototype.setUTCMinutes));
            ecma.DefineTFT(_this, constants.setHours, new function_1.BuiltinFunctionObject(setHours, 0, _Date.prototype.setHours));
            ecma.DefineTFT(_this, constants.setUTCHours, new function_1.BuiltinFunctionObject(setUTCHours, 0, _Date.prototype.setUTCHours));
            ecma.DefineTFT(_this, constants.setDate, new function_1.BuiltinFunctionObject(setDate, 0, _Date.prototype.setDate));
            ecma.DefineTFT(_this, constants.setUTCDate, new function_1.BuiltinFunctionObject(setUTCDate, 0, _Date.prototype.setUTCDate));
            ecma.DefineTFT(_this, constants.setMonth, new function_1.BuiltinFunctionObject(setMonth, 2, _Date.prototype.setMonth));
            ecma.DefineTFT(_this, constants.setUTCMonth, new function_1.BuiltinFunctionObject(setUTCMonth, 0, _Date.prototype.setUTCMonth));
            ecma.DefineTFT(_this, constants.setFullYear, new function_1.BuiltinFunctionObject(setFullYear, 0, _Date.prototype.setFullYear));
            ecma.DefineTFT(_this, constants.setUTCFullYear, new function_1.BuiltinFunctionObject(setUTCFullYear, 0, _Date.prototype.setUTCFullYear));
            ecma.DefineTFT(_this, constants.toUTCString, new function_1.BuiltinFunctionObject(toUTCString, 0, _Date.prototype.toUTCString));
            ecma.DefineTFT(_this, constants.toISOString, new function_1.BuiltinFunctionObject(toISOString, 0, _Date.prototype.toISOString));
            ecma.DefineTFT(_this, constants.toJSON, new function_1.BuiltinFunctionObject(toJSON, 0, _Date.prototype.toJSON));
            // B.2.6 - used by google analytics
            ecma.DefineTFT(_this, new values_1.Value('toGMTString', bot), new function_1.BuiltinFunctionObject(toUTCString, 0, _Date.prototype.toGTMString));
            return _this;
        }
        return DatePrototype;
    }(Ecma));
    function assertDate(v, caller) {
        if (v.value === null || typeof v.value !== 'object' || v.value.Class !== 'Date') {
            monitor.context.pushPC(v.label);
            monitor.Throw(monitor.modules.error.TypeErrorObject, caller + ' is not generic', bot);
        }
    }
    // ------------------------------------------------------------
    function mkGenericGet(fname) {
        return function (thisArg, args) {
            assertDate(thisArg, fname);
            var label = lub(thisArg.label, thisArg.value.PrimitiveLabel);
            var date = thisArg.value.PrimitiveValue;
            var value = date[fname].call(date);
            return new values_1.Value(value, label);
        };
    }
    // ------------------------------------------------------------
    function mkGenericSet(fname) {
        return function (thisArg, args) {
            assertDate(thisArg, fname);
            var context = lub(thisArg.label, monitor.context.effectivePC);
            monitor.assert(le(context, thisArg.value.PrimitiveLabel), fname + ': context ' + context + ' not below state label of Date object ' + thisArg.value.PrimitiveLabel);
            var _args = [];
            var label = new Label();
            for (var i = 0, len = args.length; i < len; i++) {
                var x = ToNumber_1.ToNumber(args[i]);
                label.lub(x.label);
                _args[i] = x.value;
            }
            thisArg.value.PrimitiveLabel = lub(thisArg.value.PrimitiveLabel, label);
            label = lub(thisArg.label, thisArg.value.PrimitiveLabel);
            var date = thisArg.value.PrimitiveValue;
            var value = date[fname].apply(date, _args);
            return new values_1.Value(value, label);
        };
    }
    // ------------------------------------------------------------
    // toISOString, 15.9.5.43
    var toISOString = mkGenericGet('toISOString');
    // ------------------------------------------------------------
    // toString, 15.9.5.2
    var toString = mkGenericGet('toString');
    // ------------------------------------------------------------
    // toDateString, 15.9.5.?
    var toDateString = mkGenericGet('toDateString');
    // ------------------------------------------------------------
    // toTimeString, 15.9.5.?
    var toTimeString = mkGenericGet('toTimeString');
    // ------------------------------------------------------------
    // toLocaleString, 15.9.5.?
    var toLocaleString = mkGenericGet('toLocaleString');
    // ------------------------------------------------------------
    // toLocaleDateString, 15.9.5.?
    var toLocaleDateString = mkGenericGet('toLocaleDateString');
    // ------------------------------------------------------------
    // toLocaleTimeString, 15.9.5.?
    var toLocaleTimeString = mkGenericGet('toLocaleTimeString');
    // ------------------------------------------------------------
    // valueOf, 15.9.5.?
    function valueOf(thisArg, args) {
        assertDate(thisArg, 'valueOf');
        return new values_1.Value(thisArg.value.PrimitiveValue.valueOf(), thisArg.label);
    }
    // ------------------------------------------------------------
    // getTime, 15.9.5.9
    var getTime = mkGenericGet('getTime');
    // ------------------------------------------------------------
    // getFullYear, 15.9.5.?
    var getFullYear = mkGenericGet('getFullYear');
    // ------------------------------------------------------------
    // getUTCFullYear, 15.9.5.?
    var getUTCFullYear = mkGenericGet('getUTCFullYear');
    // ------------------------------------------------------------
    // getMonth, 15.9.5.?
    var getMonth = mkGenericGet('getMonth');
    // ------------------------------------------------------------
    // getUTCMonth, 15.9.5.?
    var getUTCMonth = mkGenericGet('getUTCMonth');
    // ------------------------------------------------------------
    // getDate, 15.9.5.?
    var getDate = mkGenericGet('getDate');
    // ------------------------------------------------------------
    // getUTCDate, 15.9.5.?
    var getUTCDate = mkGenericGet('getUTCDate');
    // ------------------------------------------------------------
    // getDay, 15.9.5.?
    var getDay = mkGenericGet('getDay');
    // ------------------------------------------------------------
    // getUTCDay, 15.9.5.?
    var getUTCDay = mkGenericGet('getUTCDay');
    // ------------------------------------------------------------
    // getHours, 15.9.5.?
    var getHours = mkGenericGet('getHours');
    // ------------------------------------------------------------
    // getUTCHours, 15.9.5.?
    var getUTCHours = mkGenericGet('getUTCHours');
    // ------------------------------------------------------------
    // getMinutes, 15.9.5.?
    var getMinutes = mkGenericGet('getMinutes');
    // ------------------------------------------------------------
    // getUTCMinutes, 15.9.5.?
    var getUTCMinutes = mkGenericGet('getUTCMinutes');
    // ------------------------------------------------------------
    // getSeconds, 15.9.5.?
    var getSeconds = mkGenericGet('getSeconds');
    // ------------------------------------------------------------
    // getUTCSeconds, 15.9.5.?
    var getUTCSeconds = mkGenericGet('getUTCSeconds');
    // ------------------------------------------------------------
    // getMilliseconds, 15.9.5.?
    var getMilliseconds = mkGenericGet('getMilliseconds');
    // ------------------------------------------------------------
    // getUTCMilliseconds, 15.9.5.?
    var getUTCMilliseconds = mkGenericGet('getUTCMilliseconds');
    // ------------------------------------------------------------
    // getTimezoneOffset, 15.9.5.?
    var getTimezoneOffset = mkGenericGet('getTimezoneOffset');
    // ------------------------------------------------------------
    // setTime, 15.9.5.?
    var setTime = mkGenericSet('setTime');
    // ------------------------------------------------------------
    // setMilliseconds, 15.9.5.?
    var setMilliseconds = mkGenericSet('setMilliseconds');
    // ------------------------------------------------------------
    // setUTCMilliseconds, 15.9.5.?
    var setUTCMilliseconds = mkGenericSet('setUTCMilliseconds');
    // ------------------------------------------------------------
    // setSeconds, 15.9.5.?
    var setSeconds = mkGenericSet('setSeconds');
    // ------------------------------------------------------------
    // setUTCSeconds, 15.9.5.?
    var setUTCSeconds = mkGenericSet('setUTCSeconds');
    // ------------------------------------------------------------
    // setMinutes, 15.9.5.?
    var setMinutes = mkGenericSet('setMinutes');
    // ------------------------------------------------------------
    // setUTCMinutes, 15.9.5.?
    var setUTCMinutes = mkGenericSet('setUTCMinutes');
    // ------------------------------------------------------------
    // setHours, 15.9.5.?
    var setHours = mkGenericSet('setHours');
    // ------------------------------------------------------------
    // setUTCHours, 15.9.5.?
    var setUTCHours = mkGenericSet('setUTCHours');
    // ------------------------------------------------------------
    // setDate, 15.9.5.?
    var setDate = mkGenericSet('setDate');
    // ------------------------------------------------------------
    // setUTCDate, 15.9.5.?
    var setUTCDate = mkGenericSet('setUTCDate');
    // ------------------------------------------------------------
    // setMonth, 15.9.5.?
    var setMonth = mkGenericSet('setMonth');
    // ------------------------------------------------------------
    // setUTCMonth, 15.9.5.?
    var setUTCMonth = mkGenericSet('setUTCMonth');
    // ------------------------------------------------------------
    // setFullYear, 15.9.5.?
    var setFullYear = mkGenericSet('setFullYear');
    // ------------------------------------------------------------
    // setUTCFullYear, 15.9.5.?
    var setUTCFullYear = mkGenericSet('setUTCFullYear');
    // ------------------------------------------------------------
    // toUTCString, 15.9.5.?
    var toUTCString = mkGenericGet('toUTCString');
    // ------------------------------------------------------------
    // toJSON, 15.9.5.?
    var toJSON = mkGenericGet('toJSON');
    // ------------------------------------------------------------
    // Date Object, 15.9.5
    var DateObject = /** @class */ (function (_super) {
        __extends(DateObject, _super);
        function DateObject(date, label) {
            var _this = _super.call(this) || this;
            _this.Class = 'Date';
            _this.PrimitiveValue = date;
            _this.PrimitiveLabel = label;
            _this.Extensible = true;
            _this.Prototype = new values_1.Value(monitor.instances.DatePrototype, bot);
            return _this;
        }
        return DateObject;
    }(Ecma));
    // ------------------------------------------------------------
    var module = {};
    module.DateObject = DateObject;
    module.allocate = allocate;
    return module;
};



},{"./Conversion/ToNumber":31,"./Conversion/ToPrimitive":33,"./Conversion/ToString":34,"./HasInstance":37,"./constants":50,"./ecma":53,"./function":57,"./label":60,"./values":75}],53:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("./label");
var values_1 = require("./values");
var constants = require("./constants");
var _ = require("underscore");
var IsCallable_1 = require("./Utility/IsCallable");
// ------------------------------------------------------------
// Property descriptors, 8.10
function IsAccessorDescriptor(pd) {
    if (pd === undefined) {
        return false;
    }
    else {
        return ('get' in pd || 'put' in pd);
    }
}
exports.IsAccessorDescriptor = IsAccessorDescriptor;
function IsDataDescriptor(pd) {
    if (pd === undefined) {
        return false;
    }
    else {
        return ('value' in pd || 'writable' in pd);
    }
}
exports.IsDataDescriptor = IsDataDescriptor;
var Ecma = /** @class */ (function () {
    function Ecma(klass) {
        this.Prototype = new values_1.Value(null, label_1.bot);
        this.Extensible = true;
        this.properties = {};
        this.labels = {};
        this.Class = klass;
        this.properties = {};
        this.labels = {};
        this.struct = monitor.context.effectivePC;
        Object.defineProperty(this, 'map', {
            get: function () {
                throw new Error('Something touched Ecma.map');
            },
            configurable: true
        });
    }
    // ---
    Ecma.prototype.getOwnPropertyNames = function (label) {
        var names = Object.getOwnPropertyNames(this.properties);
        var result = [];
        for (var i = 0, len = names.length; i < len; i++) {
            var name = names[i];
            result[i] = new values_1.Value(name, label_1.lub(label, this.labels[name].existence));
        }
        return result;
    };
    // ---
    Ecma.prototype.getOwnEnumerablePropertyNames = function (label) {
        var names = Object.getOwnPropertyNames(this.properties);
        var enumerable = [];
        var j = 0;
        for (var i = 0, len = names.length; i < len; i++) {
            var name = names[i];
            // from getOwnPropertyNames; guaranteed to be found
            var desc = Object.getOwnPropertyDescriptor(this.properties, name);
            if (desc.enumerable) {
                enumerable[j++] = new values_1.Value(name, label_1.lub(label, this.labels[name].existence));
            }
        }
        return enumerable;
    };
    // ---
    Ecma.prototype.getEnumerablePropertyNames = function (initialLabel) {
        var defined = {};
        var result = [];
        var j = 0;
        var current = this;
        var lbl = initialLabel || label_1.bot;
        while (current) {
            var enumerable = current.getOwnEnumerablePropertyNames(lbl);
            for (var i = 0, len = enumerable.length; i < len; i++) {
                var name = enumerable[i];
                if (!defined.hasOwnProperty(name.value)) {
                    defined[name.value] = true;
                    result[j++] = name;
                }
            }
            var next = current.Prototype;
            current = next.value;
            lbl = label_1.lub(lbl, next.label);
        }
        return result;
    };
    // GetOwnProperty, 8.12.1 -----------------------------------------------------
    Ecma.prototype.GetOwnProperty = function (s) {
        var propName = s.value;
        var propNameLabel = s.label;
        var jsdesc = Object.getOwnPropertyDescriptor(this.properties, propName);
        if (jsdesc === undefined) {
            return new values_1.Value(undefined, label_1.lub(this.struct, propNameLabel));
        }
        var propLabel = this.labels[propName];
        // TODO: add proper cloning?
        // @ts-ignore
        jsdesc.label = propLabel.value;
        var result = new values_1.Value(jsdesc, label_1.lub(propNameLabel, propLabel.existence));
        return result;
    };
    // GetProperty, 8.12.2 --------------------------------------------------------
    Ecma.prototype.GetProperty = function (s) {
        var prop = this.GetOwnProperty(s);
        if (prop.value !== undefined) {
            return prop;
        }
        var proto = this.Prototype;
        var lbl = label_1.lub(prop.label, proto.label);
        if (proto.value === null) {
            return new values_1.Value(undefined, lbl);
        }
        // DEBUG: remove
        if (proto.value === undefined) {
            monitor.fatal('ECMA Object with undefined Prototype');
        }
        var res = proto.GetProperty(s);
        res.label = lbl.lub(res.label);
        return res;
    };
    // Get, 8.12.3 ----------------------------------------------------------------
    Ecma.prototype.Get = function (s) {
        var labeledDesc = this.GetProperty(s);
        // TODO: is this really correct?
        if (labeledDesc.value === undefined) {
            return labeledDesc;
        }
        var v;
        var desc = labeledDesc.value;
        monitor.context.pushPC(labeledDesc.label);
        if ('value' in desc) {
            v = new values_1.Value(desc.value, desc.label);
        }
        else if (desc.get) {
            v = desc.get.call(this);
        }
        else {
            v = new values_1.Value(undefined, labeledDesc.label);
        }
        monitor.context.popPC();
        v.raise(labeledDesc.label);
        return v;
    };
    // CanPut, 8.12.4 -------------------------------------------------------------
    Ecma.prototype.CanPut = function (p) {
        var labeledDesc = this.GetOwnProperty(p);
        var label = labeledDesc.label;
        if (labeledDesc.value) {
            var desc = labeledDesc.value;
            label = label_1.lub(label, desc.label);
            if (IsAccessorDescriptor(desc)) {
                return new values_1.Value(desc.set !== undefined, label);
            }
            else {
                return new values_1.Value(!!desc.writable, label);
            }
        }
        var proto = this.Prototype;
        if (proto.value === null) {
            return new values_1.Value(this.Extensible, label);
        }
        var lableledPrototypeDesc = proto.GetProperty(p);
        label = label_1.lub(label, lableledPrototypeDesc.label);
        if (lableledPrototypeDesc.value === undefined) {
            return new values_1.Value(this.Extensible, label);
        }
        var prototypeDesc = lableledPrototypeDesc.value;
        label.lub(prototypeDesc.label);
        if (IsAccessorDescriptor(prototypeDesc)) {
            return new values_1.Value(prototypeDesc.set !== undefined, label);
        }
        else {
            if (!this.Extensible) {
                return new values_1.Value(false, label);
            }
            else {
                return new values_1.Value(!!prototypeDesc.writable, label);
            }
        }
    };
    // Put, 8.12.5 ----------------------------------------------------------------
    Ecma.prototype.Put = function (s, v, Throw) {
        var c = monitor.context;
        var canPut = this.CanPut(s);
        if (!canPut.value) {
            if (Throw) {
                c.pushPC(canPut.label);
                monitor.Throw(monitor.modules.error.TypeErrorObject, 'illegal access', label_1.bot);
            }
            return;
        }
        c.pushPC(new label_1.Label());
        var ownDesc = this.GetOwnProperty(s);
        if (ownDesc.value && IsDataDescriptor(ownDesc.value)) {
            this.DefineOwnProperty(s, { value: v.value, label: v.label }, Throw);
            c.popPC();
            return;
        }
        var desc = this.GetProperty(s);
        if (desc.value && IsAccessorDescriptor(desc.value)) {
            this.struct.lub(s.label);
            if (desc.value.set) {
                c.labels.pc.lub(desc.label);
                try {
                    desc.value.set.call(this, v);
                }
                catch (e) {
                    monitor.tryRethrow(e, Throw);
                    monitor.fatal('unable to lift', e);
                }
            }
            c.popPC();
            return;
        }
        c.labels.pc.lub(desc.label);
        this.DefineOwnProperty(s, {
            value: v.value,
            label: v.label,
            writable: true,
            enumerable: true,
            configurable: true
        }, Throw);
        c.popPC();
        return;
    };
    // HasProperty, 8.12.6 --------------------------------------------------------
    Ecma.prototype.HasProperty = function (s) {
        var desc = this.GetProperty(s);
        var val = new values_1.Value(desc.value !== undefined, desc.label);
        return val;
    };
    // Delete, 8.12.7 -------------------------------------------------------------
    Ecma.prototype.Delete = function (s, Throw) {
        var c = monitor.context;
        var propertyName = s.value;
        var desc = this.GetOwnProperty(s);
        if (desc.value === undefined) {
            return new values_1.Value(true, desc.label);
        }
        if (!label_1.le(c.effectivePC, this.struct)) {
            var msg = _.template('Ecma.prototype.Delete: security context <%=el%> not below structure <%=sl%>');
            monitor.securityError(msg({ el: c.effectivePC, sl: this.struct }));
            // For observable flows
            this.struct.lub(c.effectivePC);
        }
        var lbl = label_1.lub(c.effectivePC, desc.label);
        var existence = this.labels[propertyName].existence;
        if (!label_1.le(lbl, existence)) {
            var msg = _.template('Ecma.prototype.Delete: security context <%=el%> not below exstence label <%=sl%>');
            monitor.securityError(msg({ el: lbl, sl: existence }));
            // For observable flows
            existence.lub(lbl);
        }
        var res;
        try {
            res = delete this.properties[propertyName];
            if (res) {
                delete this.labels[propertyName];
            }
        }
        catch (e) {
            monitor.tryRethrow(e, Throw);
            monitor.fatal('unable to lift', e);
        }
        return new values_1.Value(res, label_1.lub(desc.label, existence));
    };
    // DefaultValue, 8.12.8 -------------------------------------------------------
    Ecma.prototype.DefaultValue = function (hint) {
        if (hint === undefined) {
            if (this.Class === 'Date')
                hint = 'string';
            else
                hint = 'number';
        }
        if (hint === 'string') {
            var toString = this.Get(constants.toString);
            if (IsCallable_1.IsCallable(toString).value) {
                var str = toString.Call(new values_1.Value(this, label_1.bot), []);
                if (values_1.isDefinedPrimitiveValue(str))
                    return str;
            }
            monitor.context.pushPC(toString.label);
            var valueOf = this.Get(constants.valueOf);
            if (IsCallable_1.IsCallable(valueOf).value) {
                var str = valueOf.Call(new values_1.Value(this, label_1.bot), []);
                if (values_1.isDefinedPrimitiveValue(str)) {
                    str.raise(toString.label);
                    monitor.context.popPC();
                    return str;
                }
            }
            // return new Value('DefaultValue: unable to convert', bot);
            monitor.Throw(monitor.modules.error.TypeErrorObject, 'default value, unable to convert', label_1.lub(toString.label, valueOf.label));
        }
        // hint must be 'number'
        var valueOf = this.Get(constants.valueOf);
        if (IsCallable_1.IsCallable(valueOf).value) {
            var str = valueOf.Call(new values_1.Value(this, label_1.bot), []);
            if (values_1.isDefinedPrimitiveValue(str))
                return str;
        }
        monitor.context.pushPC(valueOf.label);
        var toString = this.Get(constants.toString);
        if (IsCallable_1.IsCallable(toString).value) {
            var str = toString.Call(new values_1.Value(this, label_1.bot), []);
            if (values_1.isDefinedPrimitiveValue(str)) {
                str.raise(valueOf.label);
                monitor.context.popPC();
                return str;
            }
        }
        return monitor.Throw(monitor.modules.error.TypeErrorObject, 'default value, unable to convert', label_1.lub(toString.label, valueOf.label));
    };
    // DefineOwnProperty, 8.12.9 --------------------------------------------------
    Ecma.prototype.DefineOwnProperty = function (s, desc, Throw) {
        var c = monitor.context;
        var propName = s.value;
        var propNameLabel = s.label;
        this.struct = label_1.lub(this.struct, propNameLabel);
        var contextLabel = label_1.lub(c.effectivePC, propNameLabel);
        try {
            if (Object.hasOwnProperty.call(this.properties, propName)) {
                var valueLabel = this.labels[propName].value;
                if (!label_1.le(contextLabel, valueLabel)) {
                    var msg = _.template('Ecma.prototype.DefineOwnProperty: security context <%=el%> not below existing value label <%=vl%> for property <%=pn%>');
                    monitor.securityError(msg({ el: contextLabel, vl: valueLabel, pn: propName }));
                    // For observable flows
                    valueLabel.lub(contextLabel);
                }
            }
            else {
                if (!label_1.le(c.effectivePC, this.struct)) {
                    var msg = _.template('Ecma.prototype.DefineOwnProperty: security context <%=el%> not below structure <%=sl%>');
                    monitor.securityError(msg({ el: c.effectivePC, sl: this.struct }));
                    // For observable flows
                    this.struct.lub(c.effectivePC);
                }
            }
            if (desc.get) {
                var get = desc.get;
                desc.get = function () { return get.Call(new values_1.Value(this, label_1.bot), []); };
                desc.get.actualFunction = get;
            }
            if (desc.set) {
                var set = desc.set;
                desc.set = function (v) { return set.Call(new values_1.Value(this, label_1.bot), [v]); };
                desc.set.actualFunction = set;
            }
            Object.defineProperty(this.properties, propName, desc);
            this.labels[propName] = { value: label_1.lub(desc.label, contextLabel), existence: contextLabel };
        }
        catch (e) {
            monitor.tryRethrow(e, Throw);
            monitor.fatal('unable to lift', e);
        }
        return new values_1.Value(true, label_1.bot);
    };
    return Ecma;
}());
exports.Ecma = Ecma;
// ------------------------------------------------------------
function Define(_this, name, v, opts) {
    opts = opts || {};
    name = name.value || name;
    var pd = { value: v };
    pd.writable = Boolean(opts.writable);
    pd.enumerable = Boolean(opts.enumerable);
    pd.configurable = Boolean(opts.configurable);
    Object.defineProperty(_this.properties, name, pd);
    _this.labels[name] = { value: opts.label || label_1.bot, existence: opts.existence || label_1.bot };
}
exports.Define = Define;
function DefineFFT(_this, name, v, opts) {
    opts = opts || {};
    name = name.value || name;
    Object.defineProperty(_this.properties, name, {
        value: v,
        configurable: true
    });
    _this.labels[name] = { value: opts.label || label_1.bot, existence: opts.existence || label_1.bot };
}
exports.DefineFFT = DefineFFT;
function DefineFFF(_this, name, v, opts) {
    opts = opts || {};
    name = name.value || name;
    Object.defineProperty(_this.properties, name, { value: v });
    _this.labels[name] = { value: opts.label || label_1.bot, existence: opts.existence || label_1.bot };
}
exports.DefineFFF = DefineFFF;
function DefineTFF(_this, name, v, opts) {
    opts = opts || {};
    name = name.value || name;
    Object.defineProperty(_this.properties, name, {
        value: v,
        writable: true
    });
    _this.labels[name] = { value: opts.label || label_1.bot, existence: opts.existence || label_1.bot };
}
exports.DefineTFF = DefineTFF;
function DefineTFT(_this, name, v, opts) {
    opts = opts || {};
    name = name.value || name;
    Object.defineProperty(_this.properties, name, {
        value: v,
        writable: true,
        configurable: true
    });
    _this.labels[name] = { value: opts.label || label_1.bot, existence: opts.existence || label_1.bot };
}
exports.DefineTFT = DefineTFT;
// ------------------------------------------------------------

},{"./Utility/IsCallable":49,"./constants":50,"./label":60,"./values":75,"underscore":22}],54:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("./label");
var values_1 = require("./values");
var ecma_1 = require("./ecma");
// ------------------------------------------------------------
// 10.2
// ------------------------------------------------------------
// 10.2.2.2
function NewDeclarativeEnvironment(e) {
    var envRec = new DeclarativeEnvironmentRecord();
    var env = new LexicalEnvironment(envRec, e);
    return env;
}
exports.NewDeclarativeEnvironment = NewDeclarativeEnvironment;
// ------------------------------------------------------------
// 10.2.2.3
function NewObjectEnvironment(o, e) {
    var envRec = new ObjectEnvironmentRecord(o);
    var env = new LexicalEnvironment(envRec, e);
    return env;
}
exports.NewObjectEnvironment = NewObjectEnvironment;
// ------------------------------------------------------------
// Environment records, 10.2.1.2
var ObjectEnvironmentRecord = /** @class */ (function (_super) {
    __extends(ObjectEnvironmentRecord, _super);
    function ObjectEnvironmentRecord(p) {
        var _this = _super.call(this) || this;
        _this.provideThis = false;
        if (p.value === undefined)
            monitor.fatal('ObjectEnvironmentRecord, undefined binding object');
        _this.bindingObject = p; // Value
        return _this;
    }
    // ---
    ObjectEnvironmentRecord.prototype.raise = function (l) {
        this.bindingObject.raise(l);
    };
    // ---
    // HasBinding, 10.2.1.2.1
    ObjectEnvironmentRecord.prototype.HasBinding = function (p) {
        return this.bindingObject.HasProperty(p);
    };
    // ---
    // CreateMutableBinding, 10.2.1.2.2
    ObjectEnvironmentRecord.prototype.CreateMutableBinding = function (p, d) {
        var desc = {
            value: undefined,
            label: monitor.context.effectivePC,
            writable: true,
            enumerable: true,
            configurable: d
        };
        this.bindingObject.DefineOwnProperty(p, desc, true);
    };
    // ---
    // GetBindingValue, 10.2.1.2.4
    ObjectEnvironmentRecord.prototype.GetBindingValue = function (p, s) {
        return this.bindingObject.Get(p);
    };
    // SetMutableBinding, 10.2.1.2.3
    ObjectEnvironmentRecord.prototype.SetMutableBinding = function (p, v, s) {
        this.bindingObject.Put(p, v, s);
    };
    // DeleteBinding, 10.2.1.2.5
    ObjectEnvironmentRecord.prototype.DeleteBinding = function (p) {
        return this.bindingObject.Delete(p);
    };
    // ImplicitThisValue, 10.2.1.2.6
    ObjectEnvironmentRecord.prototype.ImplicitThisValue = function () {
        if (this.provideThis) {
            return this.bindingObject.clone();
        }
        else {
            return new values_1.Value(undefined, label_1.bot);
        }
    };
    return ObjectEnvironmentRecord;
}(ecma_1.Ecma));
exports.ObjectEnvironmentRecord = ObjectEnvironmentRecord;
// ------------------------------------------------------------
// Declarative Environment Record, 10.2.1.1
var DeclarativeEnvironmentRecord = /** @class */ (function (_super) {
    __extends(DeclarativeEnvironmentRecord, _super);
    function DeclarativeEnvironmentRecord() {
        return _super.call(this) || this;
    }
    // HasBinding, 10.2.1.1.1
    DeclarativeEnvironmentRecord.prototype.HasBinding = function (s) {
        return this.HasProperty(s);
    };
    // CreateMutableBinding, 10.2.1.1.2
    DeclarativeEnvironmentRecord.prototype.CreateMutableBinding = function (p, d) {
        var desc = {
            value: undefined,
            label: monitor.context.effectivePC,
            writable: true,
            enumerable: true,
            configurable: d
        };
        this.DefineOwnProperty(p, desc, true);
    };
    // GetBindingValue 10.2.1.1.4
    DeclarativeEnvironmentRecord.prototype.GetBindingValue = function (p, s) {
        return this.Get(p);
    };
    // SetMutableBinding, 10.2.1.1.3
    DeclarativeEnvironmentRecord.prototype.SetMutableBinding = function (p, v, s) {
        this.Put(p, v, s);
    };
    // DeleteBinding, 10.2.1.1.5
    DeclarativeEnvironmentRecord.prototype.DeleteBinding = function (p) {
        return this.Delete(p);
    };
    // ImplicitThisValie. 10.2.1.1.6
    DeclarativeEnvironmentRecord.prototype.ImplicitThisValue = function () {
        return new values_1.Value(undefined, label_1.bot);
    };
    // CreateImmutableBinding, 10.2.1.1.7
    DeclarativeEnvironmentRecord.prototype.CreateImmutableBinding = function (p) {
        var desc = {
            value: undefined,
            label: label_1.bot,
            writable: false,
            enumerable: true,
            configurable: true
        };
        this.DefineOwnProperty(p, desc, false);
    };
    // InitializeImmutableBinding, 10.2.1.1.8
    DeclarativeEnvironmentRecord.prototype.InitializeImmutableBinding = function (p, v) {
        var desc = this.GetOwnProperty(p).value;
        desc.value = v.value;
        desc.label = v.label;
        this.DefineOwnProperty(p, desc, false);
    };
    return DeclarativeEnvironmentRecord;
}(ecma_1.Ecma));
exports.DeclarativeEnvironmentRecord = DeclarativeEnvironmentRecord;
// ------------------------------------------------------------
function IsEnvironmentRecord(p) {
    return ('HasBinding' in p.value);
}
exports.IsEnvironmentRecord = IsEnvironmentRecord;
;
// ------------------------------------------------------------
var LexicalEnvironment = /** @class */ (function () {
    function LexicalEnvironment(er, le) {
        this.EnvironmentRecord = er; // Not Value
        this.OuterLexicalEnvironment = le; // Value
    }
    LexicalEnvironment.prototype.provideThis = function () {
        this.EnvironmentRecord.provideThis = true;
    };
    LexicalEnvironment.prototype.HasBinding = function (s) {
        return this.EnvironmentRecord.HasBinding(s);
    };
    LexicalEnvironment.prototype.CreateMutableBinding = function (s, d) {
        return this.EnvironmentRecord.CreateMutableBinding(s, d);
    };
    LexicalEnvironment.prototype.SetMutableBinding = function (s, v, d) {
        return this.EnvironmentRecord.SetMutableBinding(s, v, d);
    };
    LexicalEnvironment.prototype.GetBindingValue = function (s, d) {
        return this.EnvironmentRecord.GetBindingValue(s, d);
    };
    LexicalEnvironment.prototype.DeleteBinding = function (s) {
        return this.EnvironmentRecord.DeleteBinding(s);
    };
    LexicalEnvironment.prototype.ImplicitThisValue = function () {
        return this.EnvironmentRecord.ImplicitThisValue();
    };
    // Only meaningful if the underlying environment record is 
    //  a declarative environment record
    LexicalEnvironment.prototype.CreateImmutableBinding = function (s) {
        return this.EnvironmentRecord.CreateImmutableBinding(s);
    };
    LexicalEnvironment.prototype.InitializeImmutableBinding = function (s, v) {
        return this.EnvironmentRecord.InitializeImmutableBinding(s, v);
    };
    return LexicalEnvironment;
}());
exports.LexicalEnvironment = LexicalEnvironment;
// ------------------------------------------------------------
// GetIdentifierReference, 10.2.2.1
function GetIdentifierReference(p, x) {
    if (!p) {
        monitor.fatal('GetIdentifierReference: p undefined or null for ' + x);
    }
    if (p.value == null) {
        return new values_1.Reference(new values_1.Value(undefined, p.label), new values_1.Value(x, label_1.bot));
    }
    var erp = new values_1.Value(p.value.EnvironmentRecord, p.label);
    var b = erp.HasBinding(new values_1.Value(x, label_1.bot));
    if (b.value) {
        erp.label = b.label;
        return new values_1.Reference(erp, new values_1.Value(x, label_1.bot));
    }
    else {
        var res = GetIdentifierReference(p.value.OuterLexicalEnvironment, x);
        res.base.raise(b.label);
        return res;
    }
}
exports.GetIdentifierReference = GetIdentifierReference;

},{"./ecma":53,"./label":60,"./values":75}],55:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label = require("./label");
var values_1 = require("./values");
var ecma = require("./ecma");
var constants = require("./constants");
var function_1 = require("./function");
var HasInstance_1 = require("./HasInstance");
var ToString_1 = require("./Conversion/ToString");
exports.functor = function (monitor) {
    var Ecma = ecma.Ecma;
    var Label = label.Label;
    var lub = label.lub;
    var le = label.le;
    var bot = Label.bot;
    // ------------------------------------------------------------
    function allocate(global) {
        var errorConstructor = new ErrorConstructor();
        var errorPrototype = errorConstructor._proto;
        // 15.11.5
        var evalErrorConstructor = new NativeErrorConstructor(global, 'EvalError');
        var rangeErrorConstructor = new NativeErrorConstructor(global, 'RangeError');
        var referenceErrorConstructor = new NativeErrorConstructor(global, 'ReferenceError');
        var syntaxErrorConstructor = new NativeErrorConstructor(global, 'SyntaxError');
        var typeErrorConstructor = new NativeErrorConstructor(global, 'TypeError');
        var URIErrorConstructor = new NativeErrorConstructor(global, 'URIError');
        var evalErrorPrototype = evalErrorConstructor._proto;
        var rangeErrorPrototype = rangeErrorConstructor._proto;
        var referenceErrorPrototype = referenceErrorConstructor._proto;
        var syntaxErrorPrototype = syntaxErrorConstructor._proto;
        var typeErrorPrototype = typeErrorConstructor._proto;
        var uriErrorPrototype = URIErrorConstructor._proto;
        return { ErrorConstructor: errorConstructor,
            ErrorPrototype: errorPrototype,
            EvalErrorConstructor: evalErrorConstructor,
            EvalErrorPrototype: evalErrorPrototype,
            RangeErrorConstructor: rangeErrorConstructor,
            RangeErrorPrototype: rangeErrorPrototype,
            ReferenceErrorConstructor: referenceErrorConstructor,
            ReferenceErrorPrototype: referenceErrorPrototype,
            SyntaxErrorConstructor: syntaxErrorConstructor,
            SyntaxErrorPrototype: syntaxErrorPrototype,
            TypeErrorConstructor: typeErrorConstructor,
            TypeErrorPrototype: typeErrorPrototype,
            URIErrorConstructor: URIErrorConstructor,
            URIErrorPrototype: uriErrorPrototype
        };
    }
    // ------------------------------------------------------------
    // 15.11 - The Error Constructor
    var ErrorConstructor = /** @class */ (function (_super) {
        __extends(ErrorConstructor, _super);
        function ErrorConstructor(host) {
            var _this = _super.call(this) || this;
            _this.Class = 'Function';
            _this.host = host;
            _this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, bot);
            _this.Extensible = true;
            _this.name = 'Error';
            _this._proto = new ErrorPrototype(_this);
            ecma.DefineFFF(_this, constants.length, 1);
            ecma.DefineFFF(_this, constants.prototype, _this._proto);
            return _this;
        }
        return ErrorConstructor;
    }(Ecma));
    ErrorConstructor.prototype.HasInstance = HasInstance_1.HasInstance;
    // 15.11.2
    ErrorConstructor.prototype.Call = function (thisArg, args) {
        return this.Construct(args);
    };
    // 15.11.2.1
    ErrorConstructor.prototype.Construct = function (args) {
        var arg0 = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var o = new ErrorObject(arg0);
        return new values_1.Value(o, bot);
    };
    // ------------------------------------------------------------
    // 15.11.4 The Error Prototype
    var ErrorPrototype = /** @class */ (function (_super) {
        __extends(ErrorPrototype, _super);
        function ErrorPrototype(constructor) {
            var _this = _super.call(this) || this;
            _this.Class = 'Error';
            _this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, bot);
            _this.host = Object.getPrototypeOf(Error);
            ecma.DefineTFT(_this, constants.constructor, constructor);
            ecma.DefineTFT(_this, constants.name, 'Error');
            ecma.DefineTFT(_this, constants.message, '');
            ecma.DefineTFT(_this, constants.toString, new function_1.BuiltinFunctionObject(tostring, 0, undefined));
            return _this;
        }
        return ErrorPrototype;
    }(Ecma));
    // ------------------------------------------------------------
    function tostring(thisArg, args) {
        var c = monitor.context;
        if (thisArg.value === null
            || typeof thisArg.value !== 'object'
            || thisArg.value.Class !== 'Error') {
            c.pushPC(thisArg.label);
            monitor.Throw(TypeErrorObject, 'Error object expected', bot);
        }
        var name = thisArg.Get(constants.name);
        if (name.value === undefined) {
            name.value = 'Error';
        }
        else {
            c.pushPC(name.label);
            name = ToString_1.ToString(name);
            c.popPC();
        }
        var msg = thisArg.Get(constants.message);
        if (msg.value === undefined) {
            msg.value = '';
        }
        else {
            c.pushPC(msg.label);
            msg = ToString_1.ToString(msg);
            c.popPC();
        }
        if (name.value === '') {
            msg.raise(name.label);
            return msg;
        }
        if (msg.value === '') {
            name.raise(msg.label);
            return name;
        }
        name.value += ': ' + msg.value;
        name.raise(msg.label);
        return name;
    }
    // ------------------------------------------------------------
    var ErrorObject = /** @class */ (function (_super) {
        __extends(ErrorObject, _super);
        function ErrorObject(v) {
            var _this = _super.call(this) || this;
            _this.Prototype = new values_1.Value(monitor.instances.ErrorPrototype, bot);
            _this.Class = 'Error';
            _this.Extensible = true;
            if (v.value !== undefined) {
                v = ToString_1.ToString(v);
                _this.DefineOwnProperty(constants.message, { value: v.value,
                    label: v.label,
                    writable: true,
                    enumerable: false,
                    configurable: true
                });
            }
            return _this;
        }
        return ErrorObject;
    }(Ecma));
    ErrorObject.prototype.toString = function () {
        var str = ToString_1.ToString(new values_1.Value(this, bot));
        return str.value;
    };
    // ------------------------------------------------------------
    // 15.11.7 The NativeError Constructor
    var NativeErrorConstructor = /** @class */ (function (_super) {
        __extends(NativeErrorConstructor, _super);
        function NativeErrorConstructor(global, name) {
            var _this = _super.call(this) || this;
            _this.Class = 'Function';
            _this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, bot);
            _this.Extensible = true;
            _this.name = name;
            _this.host = global[name];
            _this._proto = new NativeErrorPrototype(_this, name);
            ecma.DefineFFF(_this, constants.length, 1);
            ecma.DefineFFF(_this, constants.prototype, _this._proto);
            return _this;
        }
        return NativeErrorConstructor;
    }(Ecma));
    NativeErrorConstructor.prototype.HasInstance = HasInstance_1.HasInstance;
    // 15.11.7.2
    NativeErrorConstructor.prototype.Call = function (thisArg, args) {
        return this.Construct(args);
    };
    // 15.11.7.4
    NativeErrorConstructor.prototype.Construct = function (args) {
        var message = args[0] || new values_1.Value(undefined, bot);
        var o = new NativeErrorObject(this._proto, message);
        return new values_1.Value(o, bot);
    };
    // ------------------------------------------------------------
    // 15.11.7.6 The NativeError Prototype
    var NativeErrorPrototype = /** @class */ (function (_super) {
        __extends(NativeErrorPrototype, _super);
        function NativeErrorPrototype(constructor, name) {
            var _this = _super.call(this) || this;
            _this.Class = 'Error';
            _this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, bot);
            ecma.DefineTFT(_this, constants.constructor, constructor);
            ecma.DefineTFT(_this, constants.name, name);
            ecma.DefineTFT(_this, constants.message, '');
            ecma.DefineTFT(_this, constants.toString, new function_1.BuiltinFunctionObject(tostring, 0, undefined));
            return _this;
        }
        return NativeErrorPrototype;
    }(Ecma));
    // ------------------------------------------------------------
    var NativeErrorObject = /** @class */ (function (_super) {
        __extends(NativeErrorObject, _super);
        function NativeErrorObject(proto, message) {
            var _this = _super.call(this) || this;
            _this.Prototype = new values_1.Value(proto, bot);
            _this.Class = 'Error';
            _this.Extensible = true;
            _this.stack = monitor.stackTrace();
            if (message.value !== undefined) {
                message = ToString_1.ToString(message);
                _this.DefineOwnProperty(constants.message, { value: message.value,
                    writable: true,
                    configurable: true,
                    label: message.label
                });
            }
            return _this;
        }
        return NativeErrorObject;
    }(Ecma));
    NativeErrorObject.prototype.toString = function () {
        var str = ToString_1.ToString(new values_1.Value(this, bot));
        return str.value;
    };
    // -------------------------------------------------------------------------- 
    var EvalErrorObject = /** @class */ (function (_super) {
        __extends(EvalErrorObject, _super);
        function EvalErrorObject(v) {
            var _this = _super.call(this, monitor.instances.EvalErrorPrototype, v) || this;
            _this.Type = 'EvalError';
            return _this;
        }
        return EvalErrorObject;
    }(NativeErrorObject));
    var RangeErrorObject = /** @class */ (function (_super) {
        __extends(RangeErrorObject, _super);
        function RangeErrorObject(v) {
            var _this = _super.call(this, monitor.instances.RangeErrorPrototype, v) || this;
            _this.Type = 'RangeError';
            return _this;
        }
        return RangeErrorObject;
    }(NativeErrorObject));
    var ReferenceErrorObject = /** @class */ (function (_super) {
        __extends(ReferenceErrorObject, _super);
        function ReferenceErrorObject(v) {
            var _this = _super.call(this, monitor.instances.ReferenceErrorPrototype, v) || this;
            _this.Type = 'ReferenceError';
            return _this;
        }
        return ReferenceErrorObject;
    }(NativeErrorObject));
    var SyntaxErrorObject = /** @class */ (function (_super) {
        __extends(SyntaxErrorObject, _super);
        function SyntaxErrorObject(v) {
            var _this = _super.call(this, monitor.instances.SyntaxErrorPrototype, v) || this;
            _this.Type = 'SyntaxError';
            return _this;
        }
        return SyntaxErrorObject;
    }(NativeErrorObject));
    var TypeErrorObject = /** @class */ (function (_super) {
        __extends(TypeErrorObject, _super);
        function TypeErrorObject(v) {
            var _this = _super.call(this, monitor.instances.TypeErrorPrototype, v) || this;
            _this.Type = 'TypeError';
            return _this;
        }
        return TypeErrorObject;
    }(NativeErrorObject));
    var URIErrorObject = /** @class */ (function (_super) {
        __extends(URIErrorObject, _super);
        function URIErrorObject(v) {
            var _this = _super.call(this, monitor.instances.UriErrorPrototype, v) || this;
            _this.Type = 'URIError';
            return _this;
        }
        return URIErrorObject;
    }(NativeErrorObject));
    // -------------------------------------------------------------------------- 
    // ------------------------------------------------------------
    var module = {};
    module.EvalErrorObject = EvalErrorObject;
    module.RangeErrorObject = RangeErrorObject;
    module.ReferenceErrorObject = ReferenceErrorObject;
    module.SyntaxErrorObject = SyntaxErrorObject;
    module.TypeErrorObject = TypeErrorObject;
    module.URIErrorObject = URIErrorObject;
    module.ErrorObject = ErrorObject;
    module.allocate = allocate;
    module.nativeTable = {
        'Error': ErrorObject,
        'EvalError': EvalErrorObject,
        'RangeError': RangeErrorObject,
        'ReferenceError': ReferenceErrorObject,
        'SyntaxError': SyntaxErrorObject,
        'TypeError': TypeErrorObject,
        'URIError': URIErrorObject
    };
    return module;
};

},{"./Conversion/ToString":34,"./HasInstance":37,"./constants":50,"./ecma":53,"./function":57,"./label":60,"./values":75}],56:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var label = require("./label");
var pp = require("./pp");
var values_1 = require("./values");
var context_1 = require("./context");
var env = require("./env");
var ecma = require("./ecma");
var set_1 = require("./set");
var constants = require("./constants");
var esprima = require("esprima");
var function_1 = require("./function");
var FunctionObject_1 = require("./Objects/FunctionObject");
var ObjectObject_1 = require("./Objects/ObjectObject");
var ArrayObject_1 = require("./Objects/ArrayObject");
var ToBoolean_1 = require("./Conversion/ToBoolean");
var ToPrimitive_1 = require("./Conversion/ToPrimitive");
var ToNumber_1 = require("./Conversion/ToNumber");
var ToInt32_1 = require("./Conversion/ToInt32");
var ToUInt32_1 = require("./Conversion/ToUInt32");
var ToString_1 = require("./Conversion/ToString");
var ToObject_1 = require("./Conversion/ToObject");
var CheckObjectCoercible_1 = require("./Utility/CheckObjectCoercible");
var IsCallable_1 = require("./Utility/IsCallable");
exports.functor = function (monitor) {
    var error = monitor.require('error');
    var regexp = monitor.require('regexp');
    var RegExpObject = regexp.RegExpObject;
    var Label = label.Label;
    var lub = label.lub;
    var le = label.le;
    var bot = Label.bot;
    // ------------------------------------------------------------
    var runfor_all = { 'throw': true, 'continue': true, 'break': true };
    var runfor_throw = { 'throw': true };
    var runfor_continue = { 'continue': true };
    var runfor_break = { 'break': true };
    var runfor_continue_break = { 'break': true, 'continue': true };
    // ------------------------------------------------------------
    function initialize() {
        var global = monitor.instances.globalObject;
        var globalEnv = env.NewObjectEnvironment(new values_1.Value(global, bot), new values_1.Value(null, bot));
        monitor.instances.globalEnvironment = globalEnv;
        monitor.context.thisValue = new values_1.Value(global, bot);
        monitor.context.variableEnv = new values_1.Value(globalEnv, bot);
        monitor.context.lexicalEnv = new values_1.Value(globalEnv, bot);
        // set ThrowTypeError object in function, as we now have global environment
        monitor.instances.ThrowTypeError = new function_1.ThrowTypeError();
    }
    // ------------------------------------------------------------
    function running() {
        return !monitor.context.workList.empty();
    }
    // ------------------------------------------------------------
    function execute(ast, debugEnabled) {
        monitor.context.workList.push(ast);
        monitor.context.result = new context_1.Result();
        if (debugEnabled === undefined) {
            debugEnabled = true;
        }
        var stepCount = 0;
        var cont = true;
        do {
            if (debugEnabled && monitor.debug.active) {
                return monitor.context.result;
            }
            cont = step();
            stepCount++;
            if (stepCount % 1000000 === 0) {
                monitor.log('Executing ', stepCount);
            }
        } while (cont);
        monitor.log('Final number of execution steps: ', stepCount);
        return monitor.context.result;
    }
    // ------------------------------------------------------------
    function resume() {
        var cont = true;
        do {
            cont = step();
            if (monitor.debug.active) {
                return monitor.context.result;
            }
        } while (cont);
        return monitor.context.result;
    }
    // ------------------------------------------------------------
    function executeGlobalCode(code, filename, options) {
        try {
            monitor.code = code;
            monitor.ast = esprima.parse(code, { loc: true, range: true, tolerant: true, source: filename });
        }
        catch (e) {
            var msg = e.description + ' in ' + filename + ':' + e.lineNumber + ':' + e.column;
            msg = new values_1.Value(msg, bot);
            var obj = new error.SyntaxErrorObject(msg, bot);
            var result = new context_1.Result();
            result.type = 'throw';
            result.value = new values_1.Value(obj, bot);
            return result;
        }
        var debugEnabled = true;
        if (options && typeof options.debugEnabled !== 'undefined') {
            debugEnabled = options.debugEnabled;
        }
        enterGlobalCode(monitor.ast);
        return execute(monitor.ast, debugEnabled);
    }
    // ------------------------------------------------------------
    //   contains the declaration binding (10.5) of global code
    function enterGlobalCode(ast, filename) {
        var c = monitor.context;
        // 10.5 - hoisting
        function_1.HoistFunctions(c.variableEnv, ast, false, bot);
        function_1.HoistVariables(c.variableEnv, ast, false, bot);
    }
    // ------------------------------------------------------------
    // GetValue, 8.7.1
    function GetValue(v) {
        if (!v || !(v instanceof values_1.Reference))
            return v;
        if (v.base.label === undefined)
            monitor.fatal('GetValue, base.label undefined');
        if (v.IsUnresolvableReference()) {
            monitor.Throw(error.ReferenceErrorObject, v.propertyName.value + ' not defined', v.base.label);
        }
        var p = v.base;
        var s = v.propertyName;
        if (v.IsPropertyReference()) {
            if (!v.HasPrimitiveBase()) {
                return p.Get(s);
            }
            else {
                var o = ToObject_1.ToObject(p);
                var desc = o.GetProperty(s);
                if (desc.value === undefined) {
                    return desc;
                }
                var lbl = new Label();
                lbl.lub(desc.label, desc.value.label);
                desc = desc.value;
                if (ecma.IsDataDescriptor(desc)) {
                    return new values_1.Value(desc.value, lbl);
                }
                var get = desc.get;
                if (get === undefined) {
                    new values_1.Value(undefined, lbl);
                }
                monitor.context.pushPC(lbl);
                var res = get.Call(get, v.base);
                monitor.context.popPC();
                res.raise(lbl);
                return res;
            }
        }
        return p.GetBindingValue(s);
    }
    // ------------------------------------------------------------
    // PutValue
    function PutValue(r, v) {
        var ctx = monitor.context;
        if (!(r instanceof values_1.Reference)) {
            throw new Error();
            monitor.Throw(error.ReferenceErrorObject, 'PutValue: target is not a reference', r.label);
        }
        var p = r.base;
        var s = r.propertyName;
        if (r.IsUnresolvableReference()) {
            p.value = monitor.instances.globalObject;
            p.Put(s, v);
        }
        else if (r.IsPropertyReference()) {
            if (r.HasPrimitiveBase()) {
                var o = ToObject_1.ToObject(p);
                if (!o.CanPut(s).value) {
                    return;
                }
                var ownDesc = o.GetOwnProperty(s);
                if (ownDesc.value && ecma.IsDataDescriptor(ownDesc.value)) {
                    return;
                }
                var desc = o.GetProperty(s);
                if (desc.value && ecma.IsAccessorDescriptor(desc.value)) {
                    monitor.context.pushPC(lub(ownDesc.label, desc.label)); // contains o.label
                    desc.value.Set.Call(p, [v]);
                    monitor.context.popPC();
                }
            }
            else {
                p.Put(s, v);
            }
        }
        else {
            p.SetMutableBinding(s, v);
        }
    }
    // -------------------------------------------------------------
    // Unary operators
    // -------------------------------------------------------------
    // Unary -, 11.4.7
    function unaryMinus(wl, vs) {
        var ref = vs.pop();
        var n = ToNumber_1.ToNumber(GetValue(ref));
        n.value = -n.value;
        vs.push(n);
    }
    // -------------------------------------------------------------
    // Unary +, 11.4.6
    function unaryPlus(wl, vs) {
        var ref = vs.pop();
        var n = ToNumber_1.ToNumber(GetValue(ref));
        vs.push(n);
    }
    // -------------------------------------------------------------
    // Logical NOT, 11.4.9
    function unaryLogicalNot(wl, vs) {
        var ref = vs.pop();
        var b = ToBoolean_1.ToBoolean(GetValue(ref));
        b.value = !b.value;
        vs.push(b);
    }
    // -------------------------------------------------------------
    // Bitwise NOT, 11.4.8
    function unaryBitwiseNot(wl, vs) {
        var ref = vs.pop();
        var n = ToInt32_1.ToInt32(GetValue(ref));
        n.value = ~n.value;
        vs.push(n);
    }
    // -------------------------------------------------------------
    // The typeof Operator, 11.4.3
    function unaryTypeof(wl, vs) {
        var ref = vs.pop();
        var isRef = (ref instanceof values_1.Reference);
        if (isRef && ref.IsUnresolvableReference()) {
            vs.push(new values_1.Value('undefined', ref.base.label));
        }
        else {
            var val;
            if (isRef) {
                val = GetValue(ref);
            }
            else {
                val = ref;
            }
            if (val.value === null) {
                vs.push(new values_1.Value('object', val.label));
                return;
            }
            if (typeof val.value === 'object') {
                if ('Call' in val.value) {
                    vs.push(new values_1.Value('function', val.label));
                }
                else {
                    vs.push(new values_1.Value('object', val.label));
                }
            }
            else {
                vs.push(new values_1.Value(typeof val.value, val.label));
            }
        }
    }
    // -------------------------------------------------------------
    // The void Operator, 11.4.2
    function unaryVoid(wl, vs) {
        var ref = vs.pop();
        var _ignore = GetValue(ref);
        vs.push(new values_1.Value(undefined, bot));
    }
    // -------------------------------------------------------------
    // The delete Operator, 11.4.1
    function unaryDelete(wl, vs) {
        var ref = vs.pop();
        if (ref instanceof values_1.Reference) {
            if (ref.IsUnresolvableReference()) {
                vs.push(new values_1.Value(true, ref.base.label));
            }
            else {
                if (ref.IsPropertyReference()) {
                    var object = ToObject_1.ToObject(ref.base);
                    vs.push(object.Delete(ref.propertyName));
                }
                else {
                    vs.push(ref.base.DeleteBinding(ref.propertyName));
                }
            }
        }
        else {
            vs.push(new values_1.Value(true, ref.label));
        }
    }
    // -------------------------------------------------------------
    var unarytbl = {
        '-': unaryMinus,
        '+': unaryPlus,
        '!': unaryLogicalNot,
        '~': unaryBitwiseNot,
        'typeof': unaryTypeof,
        'void': unaryVoid,
        'delete': unaryDelete
    };
    // -------------------------------------------------------------
    // Equality Operators, 11.9
    function binaryEqs(op, wl, vs) {
        var rval = vs.pop();
        var lval = vs.pop();
        var res;
        while (true) {
            var lt = typeof lval.value;
            var rt = typeof rval.value;
            lt = lval.value === undefined ? 'undefined' : lt;
            rt = rval.value === undefined ? 'undefined' : rt;
            lt = lval.value === null ? 'null' : lt;
            rt = rval.value === null ? 'null' : rt;
            // must use strict in order not to trigger conversion
            //   but then null and undefined must be handled separately
            if (lt === rt) {
                res = new values_1.Value(lval.value === rval.value, lub(lval.label, rval.label));
                break;
            }
            if ((lval.value === null && rval.value === undefined) ||
                (lval.value === undefined && rval.value === null)) {
                res = new values_1.Value(true, lub(lval.label, rval.label));
                break;
            }
            if (lt === 'number' && rt === 'string') {
                rval = ToNumber_1.ToNumber(rval);
                continue;
            }
            if (lt === 'string' && rt === 'number') {
                lval = ToNumber_1.ToNumber(lval);
                continue;
            }
            if (lt === 'boolean') {
                lval = ToNumber_1.ToNumber(lval);
                continue;
            }
            if (rt === 'boolean') {
                rval = ToNumber_1.ToNumber(rval);
                continue;
            }
            if ((lt === 'string' || lt === 'number') &&
                rt === 'object') {
                rval = ToPrimitive_1.ToPrimitive(rval);
                continue;
            }
            if (lt === 'object' &&
                (rt === 'string' || rt === 'number')) {
                lval = ToPrimitive_1.ToPrimitive(lval);
                continue;
            }
            res = new values_1.Value(false, lub(lval.label, rval.label));
            break;
        }
        if (op === '!=') {
            res.value = !res.value;
        }
        vs.push(res);
    }
    // -------------------------------------------------------------
    // Strict Equality Operators, 11.9.4, 11.9.5
    function binaryStrictEqs(op, wl, vs) {
        var rval = vs.pop();
        var lval = vs.pop();
        var res = new values_1.Value(lval.value === rval.value, lub(lval.label, rval.label));
        if (op === '!==') {
            res.value = !res.value;
        }
        vs.push(res);
    }
    // -------------------------------------------------------------
    // Relational Operators, 11.8
    //  The evaluation order is important, 11.8.5
    function binaryOrds(op, wl, vs) {
        var rval = vs.pop();
        var lval = vs.pop();
        var lprim = ToPrimitive_1.ToPrimitive(lval);
        var rprim = ToPrimitive_1.ToPrimitive(rval);
        var res;
        if (typeof lprim.value !== 'string' &&
            typeof rprim.value !== 'string') {
            var lnum = ToNumber_1.ToNumber(lprim);
            var rnum = ToNumber_1.ToNumber(rprim);
            var val = eval('lnum.value ' + op + ' rnum.value');
            res = new values_1.Value(val, lub(lnum.label, rnum.label));
        }
        else {
            var val = eval('lprim.value ' + op + ' rprim.value');
            res = new values_1.Value(val, lub(lprim.label, rprim.label));
        }
        vs.push(res);
    }
    // -------------------------------------------------------------
    // Bitwise Shift Operators, 11.7
    function binaryShifts(op, wl, vs) {
        var rval = vs.pop();
        var lval = vs.pop();
        var lnum = (op === '>>>') ? ToUInt32_1.ToUInt32(lval) : ToInt32_1.ToInt32(lval);
        var rnum = ToUInt32_1.ToUInt32(rval);
        var val = eval('lnum.value ' + op + ' rnum.value');
        vs.push(new values_1.Value(val, lub(lnum.label, rnum.label)));
    }
    // -------------------------------------------------------------
    // Binary Bitwise Operators, 11.10
    function binaryBitwiseOps(op, wl, vs) {
        var rval = vs.pop();
        var lval = vs.pop();
        var lnum = ToInt32_1.ToInt32(lval);
        var rnum = ToInt32_1.ToInt32(rval);
        var val = eval('lnum.value ' + op + ' rnum.value');
        vs.push(new values_1.Value(val, lub(lnum.label, rnum.label)));
    }
    // -------------------------------------------------------------
    // Plus, 11.6
    function binaryPlus(wl, vs) {
        var rval = vs.pop();
        var lval = vs.pop();
        var lprim = ToPrimitive_1.ToPrimitive(lval);
        var rprim = ToPrimitive_1.ToPrimitive(rval);
        var res;
        if ((typeof lprim.value) === 'string' ||
            (typeof rprim.value) === 'string') {
            var lstr = ToString_1.ToString(lprim);
            var rstr = ToString_1.ToString(rprim);
            res = new values_1.Value(lstr.value + rstr.value, lub(lprim.label, rprim.label));
        }
        else {
            var lnum = ToNumber_1.ToNumber(lprim);
            var rnum = ToNumber_1.ToNumber(rprim);
            res = new values_1.Value(lnum.value + rnum.value, lub(lnum.label, rnum.label));
        }
        vs.push(res);
    }
    // -------------------------------------------------------------
    // Multiplicative operators, 11.5, and minus, 11.6
    function binaryArithmeticOps(op, wl, vs) {
        var rval = vs.pop();
        var lval = vs.pop();
        var leftNum = ToNumber_1.ToNumber(lval);
        var rightNum = ToNumber_1.ToNumber(rval);
        var val = eval('leftNum.value ' + op + ' rightNum.value');
        vs.push(new values_1.Value(val, lub(leftNum.label, rightNum.label)));
    }
    // -------------------------------------------------------------
    // The in operator, 11.8.7
    function binaryIn(wl, vs) {
        var rval = vs.pop();
        var lval = vs.pop();
        if (typeof rval.value !== 'object') {
            if (false) { // SILENT ERROR
                vs.push(new values_1.Value(false, lub(lval.label, rval.label)));
                return;
            }
            monitor.Throw(error.TypeErrorObject, "invalid 'in' parameter", rval.label);
        }
        vs.push(rval.HasProperty(ToString_1.ToString(lval)));
    }
    // -------------------------------------------------------------
    // The instanceof operator, 11.8.6
    function binaryInstanceof(wl, vs) {
        var rval = vs.pop();
        var lval = vs.pop();
        if (typeof rval.value !== 'object') {
            if (false) { // SILENT ERROR
                vs.push(new values_1.Value(false, lub(lval.label, rval.label)));
            }
            monitor.Throw(error.TypeErrorObject, "invalid 'instanceof' parameter", rval.label);
        }
        if (!('HasInstance' in rval.value)) {
            if (false) { // SILENT ERROR
                vs.push(new values_1.Value(false, lub(lval.label, rval.label)));
            }
            monitor.Throw(error.TypeErrorObject, "invalid 'instanceof' parameter", rval.label);
        }
        vs.push(rval.HasInstance(lval));
    }
    // -------------------------------------------------------------
    var binarytbl = {
        '==': binaryEqs.bind(null, '=='),
        '!=': binaryEqs.bind(null, '!='),
        '===': binaryStrictEqs.bind(null, '==='),
        '!==': binaryStrictEqs.bind(null, '!=='),
        '<': binaryOrds.bind(null, '<'),
        '<=': binaryOrds.bind(null, '<='),
        '>': binaryOrds.bind(null, '>'),
        '>=': binaryOrds.bind(null, '>='),
        '<<': binaryShifts.bind(null, '<<'),
        '>>': binaryShifts.bind(null, '>>'),
        '>>>': binaryShifts.bind(null, '>>>'),
        '+': binaryPlus,
        '-': binaryArithmeticOps.bind(null, '-'),
        '*': binaryArithmeticOps.bind(null, '*'),
        '/': binaryArithmeticOps.bind(null, '/'),
        '%': binaryArithmeticOps.bind(null, '%'),
        '|': binaryBitwiseOps.bind(null, '|'),
        '&': binaryBitwiseOps.bind(null, '&'),
        '^': binaryBitwiseOps.bind(null, '^'),
        'in': binaryIn,
        'instanceof': binaryInstanceof
    };
    // ------------------------------------------------------------- 
    // Prefix, and Postfix Expressions, 11.3, 11.4.4, 11.4.5
    function prefixOps(op, wl, vs) {
        var ref = vs.pop();
        var oldValue = ToNumber_1.ToNumber(GetValue(ref));
        var val = op === '++' ? oldValue.value + 1 : oldValue.value - 1;
        var newValue = new values_1.Value(val, oldValue.label);
        PutValue(ref, newValue);
        vs.push(newValue);
    }
    function postfixOps(op, wl, vs) {
        var ref = vs.pop();
        var oldValue = ToNumber_1.ToNumber(GetValue(ref));
        var val = op === '++' ? oldValue.value + 1 : oldValue.value - 1;
        var newValue = new values_1.Value(val, oldValue.label);
        PutValue(ref, newValue);
        vs.push(oldValue);
    }
    // -------------------------------------------------------------
    var prefixtbl = {
        '++': prefixOps.bind(null, '++'),
        '--': prefixOps.bind(null, '--')
    };
    var postfixtbl = {
        '++': postfixOps.bind(null, '++'),
        '--': postfixOps.bind(null, '--')
    };
    // -------------------------------------------------------------
    // Binary Logical ||, 11.11
    function binaryLogicalOr(wl, vs) {
        var lval = GetValue(vs.pop());
        vs.push(lval);
        var lb = ToBoolean_1.ToBoolean(lval);
        var right = wl.pop();
        if (lb.value) {
            return;
        }
        monitor.context.pushPC(lb.label);
        var ip = wl.top();
        ip.then(right);
        ip.then(binaryLogicalOr_end);
    }
    function binaryLogicalOr_end(wl, vs) {
        var rval = GetValue(vs.pop());
        var lval = vs.pop();
        monitor.context.popPC();
        vs.push(new values_1.Value(rval.value, lub(rval.label, lval.label)));
    }
    // -------------------------------------------------------------
    // Binary Logical &&, 11.11
    function binaryLogicalAnd(wl, vs) {
        var lval = GetValue(vs.pop());
        vs.push(lval);
        var lb = ToBoolean_1.ToBoolean(lval);
        var right = wl.pop();
        if (!lb.value) {
            return;
        }
        monitor.context.pushPC(lb.label);
        var ip = wl.top();
        ip.then(right);
        ip.then(binaryLogicalAnd_end);
    }
    function binaryLogicalAnd_end(wl, vs) {
        var rval = GetValue(vs.pop());
        var lval = vs.pop();
        monitor.context.popPC();
        vs.push(new values_1.Value(rval.value, lub(rval.label, lval.label)));
    }
    // -------------------------------------------------------------
    var logicaltbl = {
        '||': binaryLogicalOr,
        '&&': binaryLogicalAnd
    };
    // -------------------------------------------------------------
    function assignmentOps(op, wl, vs) {
        var rval = GetValue(vs.pop());
        var lref = vs.pop();
        if (op) {
            vs.push(lref);
            vs.push(GetValue(lref));
            vs.push(rval);
            binarytbl[op](wl, vs);
        }
        else {
            vs.push(lref);
            vs.push(rval);
        }
    }
    var assignmenttbl = {
        '=': assignmentOps.bind(null, null),
        '+=': assignmentOps.bind(null, '+'),
        '-=': assignmentOps.bind(null, '-'),
        '*=': assignmentOps.bind(null, '*'),
        '/=': assignmentOps.bind(null, '/'),
        '%=': assignmentOps.bind(null, '%'),
        '>>=': assignmentOps.bind(null, '>>'),
        '<<=': assignmentOps.bind(null, '<<'),
        '>>>=': assignmentOps.bind(null, '>>>'),
        '|=': assignmentOps.bind(null, '|'),
        '&=': assignmentOps.bind(null, '&'),
        '^=': assignmentOps.bind(null, '^')
    };
    // -------------------------------------------------------------
    function _GetValue() {
        var vs = monitor.context.valueStack;
        vs.push(GetValue(vs.pop()));
    }
    function _popPC() {
        monitor.context.popPC();
    }
    _popPC.runfor = runfor_continue_break;
    // -------------------------------------------------------------
    // expression handler functions 
    var expressiontbl = {
        'ThisExpression': thisExpression,
        'ArrayExpression': arrayExpression,
        'ObjectExpression': objectExpression,
        'FunctionExpression': functionExpression,
        'SequenceExpression': sequenceExpression,
        'UnaryExpression': unaryExpression,
        'BinaryExpression': binaryExpression,
        'UpdateExpression': updateExpression,
        'LogicalExpression': logicalExpression,
        'AssignmentExpression': assignmentExpression,
        'ConditionalExpression': conditionalExpression,
        'NewExpression': newExpression,
        'CallExpression': callExpression,
        'MemberExpression': memberExpression,
        'Identifier': identifierExpression,
        'Literal': literalExpression
    };
    // This, 11.1.1 -------------------------------------------- 
    function thisExpression(node, wl, vs) {
        var c = monitor.context;
        vs.push(c.thisValue.clone());
    }
    // Array Initializer, 11.1.4 -------------------------------
    function arrayExpression(node, wl, vs) {
        var ip = wl.top();
        var arr = new values_1.Value(new ArrayObject_1.ArrayObject(), bot);
        var es = node.elements;
        var len = es.length;
        arr.Put(constants.length, new values_1.Value(len, bot));
        vs.push(arr);
        for (var i = 0; i < len; i++) {
            if (es[i]) {
                ip.then(es[i]);
                ip.then(arrayExpressionUpdate, { array: arr, index: i });
            }
        }
    }
    // arrayExpressionUpdate
    function arrayExpressionUpdate(wl, vs) {
        var initValue = GetValue(vs.pop());
        this.array.Put(new values_1.Value(this.index, bot), initValue);
    }
    // Object Initializer, 11.1.5 ------------------------------
    function objectExpression(node, wl, vs) {
        var ip = wl.top();
        var obj = new values_1.Value(new ObjectObject_1.ObjectObject(), bot);
        vs.push(obj);
        var ps = node.properties;
        for (var i = 0, len = ps.length; i < len; i++) {
            ip.then(ps[i].value);
            ip.then(objectExpressionUpdate, { properties: ps, object: obj, index: i });
        }
    }
    // objectExpressionUpdate
    function objectExpressionUpdate(wl, vs) {
        var prop = this.properties[this.index];
        var propName = new values_1.Value(null, bot);
        switch (prop.key.type) {
            case 'Identifier':
                propName.value = prop.key.name;
                break;
            case 'Literal':
                // can only be string or number; conversion will occur once assigned to the object
                propName.value = prop.key.value;
                break;
        }
        var propValue = GetValue(vs.pop());
        var propDesc = { enumerable: true, configurable: true };
        switch (prop.kind) {
            case 'init':
                propDesc.value = propValue.value;
                propDesc.label = propValue.label;
                propDesc.writable = true;
                break;
            case 'get':
                propDesc.get = propValue.value;
                propDesc.label = propValue.label;
                break;
            case 'set':
                propDesc.set = propValue.value;
                propDesc.label = propValue.label;
                break;
        }
        var previous = this.object.GetOwnProperty(propName);
        monitor.context.pushPC(previous.label);
        if (previous.value !== undefined) {
            if ((ecma.IsDataDescriptor(previous) && ecma.IsAccessorDescriptor(propDesc)) ||
                (ecma.IsAccessorDescriptor(previous) && ecma.IsDataDescriptor(propDesc)) ||
                (ecma.IsAccessorDescriptor(previous) && ecma.IsAccessorDescriptor(propDesc) &&
                    ((previous.get && propDesc.get) || (previous.set && propDesc.set)))) {
                monitor.Throw(error.SyntaxErrorObject, 'Object initializer: illegal redefine of property', bot);
            }
        }
        monitor.context.popPC();
        this.object.DefineOwnProperty(propName, propDesc);
    }
    // Function Definition, 13 ----------------------------------------------
    function functionExpression(node, wl, vs) {
        var fun;
        if (node.id) {
            var funcEnv = env.NewDeclarativeEnvironment(monitor.context.lexicalEnv);
            var identifier = new values_1.Value(node.id.name, bot);
            funcEnv.CreateImmutableBinding(identifier);
            fun = new FunctionObject_1.FunctionObject(node.params, node.body, new values_1.Value(funcEnv, bot));
            fun.Name = node.id.name;
            fun.Source = node;
            funcEnv.InitializeImmutableBinding(identifier, new values_1.Value(fun, bot));
        }
        else {
            fun = new FunctionObject_1.FunctionObject(node.params, node.body, monitor.context.lexicalEnv);
            fun.Source = node;
        }
        vs.push(new values_1.Value(fun, bot));
    }
    // Comma Operator, 11.14 ------------------------------------------------
    function sequenceExpression(node, wl, vs) {
        var ip = wl.top();
        var es = node.expressions;
        var len = es.length;
        for (var i = 0; i < len - 1; i++) {
            ip.then(es[i]);
        }
        if (i < len) {
            ip.then(es[i]);
            ip.then(sequenceExpressionEnd, { length: len });
        }
    }
    function sequenceExpressionEnd(wl, vs) {
        var result = vs.pop();
        // Pop all but last and execute GetValue on result for eventual side effects.
        for (var i = 0; i < this.length - 1; i++) {
            GetValue(vs.pop());
        }
        vs.push(result);
    }
    // Unary Operators, 11.4 ------------------------------------------------
    function unaryExpression(node, wl, vs) {
        var ip = wl.top();
        ip.then(node.argument);
        ip.then(unarytbl[node.operator]);
    }
    // Binary Operators, 11.5-11.9 -----------------------------------
    function binaryExpression(node, wl, vs) {
        var ip = wl.top();
        ip.then(node.left);
        ip.then(_GetValue);
        ip.then(node.right);
        ip.then(_GetValue);
        ip.then(binarytbl[node.operator]);
    }
    // Prefix, and Postfix Expressions, 11.3, 11.4.4, 11.4.5 -----------------
    function updateExpression(node, wl, vs) {
        var ip = wl.top();
        ip.then(node.argument);
        if (node.prefix) {
            ip.then(prefixtbl[node.operator]);
        }
        else {
            ip.then(postfixtbl[node.operator]);
        }
    }
    // Binary Operators, 11.5-11.9 -----------------------------------
    function logicalExpression(node, wl, vs) {
        var ip = wl.top();
        ip.then(node.left);
        ip.then(logicaltbl[node.operator]);
        ip.then(node.right);
    }
    // Assignment, 11.13 -----------------------------------------------------
    function assignmentExpression(node, wl, vs) {
        var ip = wl.top();
        ip.then(node.left);
        ip.then(node.right);
        ip.then(assignmenttbl[node.operator]);
        ip.then(assignmentExpressionEnd);
    }
    // assignmentExpressionEnd
    function assignmentExpressionEnd(wl, vs) {
        var rval = vs.pop();
        var lref = vs.pop();
        PutValue(lref, rval);
        vs.push(rval);
    }
    // Conditional Operator, 11.12 ------------------------------------------
    function conditionalExpression(node, wl, vs) {
        var ip = wl.top();
        ip.then(node.test);
        ip.then(conditionalExpressionChoose, { node: node });
    }
    // conditionalExpressionChoose
    function conditionalExpressionChoose(wl, vs) {
        var ip = wl.top();
        var lval = GetValue(vs.pop());
        var lb = ToBoolean_1.ToBoolean(lval);
        var val;
        monitor.context.pushPC(lb.label);
        if (lb.value) {
            ip.then(this.node.consequent);
        }
        else {
            ip.then(this.node.alternate);
        }
        ip.then(conditionalExpressionEnd, { test: lval });
    }
    // conditionalExpressionEnd
    function conditionalExpressionEnd(wl, vs) {
        var val = GetValue(vs.pop());
        monitor.context.popPC();
        vs.push(new values_1.Value(val.value, lub(val.label, this.test.label)));
    }
    // The new Operator, 11.2.2 ---------------------------------------------
    function newExpression(node, wl, vs) {
        var ip = wl.top();
        ip.then(node.callee);
        var as = node.arguments;
        var len = as.length;
        for (var i = 0; i < len; i++) {
            ip.then(as[i]);
        }
        ip.then(newExpressionExecute, { length: len });
    }
    // newExpression
    function newExpressionExecute(wl, vs) {
        var c = monitor.context;
        var ip = wl.top();
        var argList = [];
        for (var i = this.length - 1; i >= 0; i--) {
            argList[i] = GetValue(vs.pop());
        }
        var constructor = GetValue(vs.pop());
        if (typeof constructor.value !== 'object') {
            if (false) { // SILENT ERROR
                v = new values_1.Value(undefined, constructor.label);
                return;
            }
            monitor.Throw(error.TypeErrorObject, "invalid 'new' parameter", constructor.label);
        }
        if (!('Construct' in constructor.value)) {
            if (false) { // SILENT ERROR
                v = new values_1.Value(undefined, constructor.label);
                return;
            }
            monitor.Throw(error.TypeErrorObject, "invalid 'new' parameter", constructor.label);
        }
        if (constructor.value.AsyncConstruct) {
            c.pushPC(constructor.label);
            ip = constructor.value.AsyncConstruct(argList);
            ip.then(callExpressionEnd, { label: constructor.label });
        }
        else {
            try {
                var retval = constructor.Construct(argList);
                retval.raise(constructor.label);
                vs.push(retval);
            }
            catch (e) {
                if (!(e instanceof values_1.Value)) {
                    throw e;
                }
                var result = c.result;
                // Verfiy that the exception is allowed 
                monitor.assert(le(c.effectivePC, c.labels.exc), "exception in " + c.effectivePC + " not allowed with exception label " + c.labels.exc);
                // For observable flows
                c.labels.exc.lub(c.effectivePC);
                result.type = 'throw';
                result.value = e;
            }
        }
    }
    // Function Calls, 11.2.3 -----------------------------------------------
    function callExpression(node, wl, vs) {
        var ip = wl.top();
        var as = node.arguments;
        var len = as.length;
        ip.then(node.callee);
        for (var i = 0; i < len; i++) {
            ip.then(as[i]);
        }
        ip.then(callExpressionExecute, { length: len, node: node });
    }
    // callExpressionExecute
    function callExpressionExecute(wl, vs) {
        var c = monitor.context;
        var ip = wl.top();
        var argList = [];
        for (var i = this.length - 1; i >= 0; i--) {
            argList[i] = GetValue(vs.pop());
        }
        var ref = vs.pop();
        var func = GetValue(ref);
        // used to decide if eval is a direct call in function.enterEvalCode
        c.currentCall = { reference: ref, target: func.value, source: this.node };
        // for eval
        c.call = {};
        c.call.ref = ref;
        c.call.func = func;
        if (!IsCallable_1.IsCallable(func).value) {
            if (false) { // SILENT ERRORS
                v = new values_1.Value(undefined, func.label);
                return;
            }
            monitor.Throw(error.TypeErrorObject, 'Invalid call target; ' + pp.pretty(this.node.callee) + ' evaluates to ' + func.value + ' in ' + pp.pretty(this.node), func.label);
        }
        var thisValue;
        if (ref instanceof values_1.Reference) {
            if (ref.IsPropertyReference()) {
                thisValue = ref.base;
            }
            else {
                thisValue = ref.base.ImplicitThisValue();
            }
        }
        else {
            thisValue = new values_1.Value(undefined, ref.label);
        }
        if (func.value.AsyncCall) {
            monitor.context.pushPC(func.label);
            func.value.AsyncCall(thisValue, argList);
            ip.then(callExpressionEnd, { label: func.label });
        }
        else {
            try {
                var retval = func.Call(thisValue, argList);
                retval.raise(func.label);
                vs.push(retval);
            }
            catch (e) {
                if (!(e instanceof values_1.Value)) {
                    throw e;
                }
                var result = c.result;
                // Verfiy that the exception is allowed 
                monitor.assert(le(c.effectivePC, c.labels.exc), "exception in " + c.effectivePC + " not allowed with exception label " + c.labels.exc);
                // For observable flows
                c.labels.exc.lub(c.effectivePC);
                result.type = 'throw';
                result.value = e;
            }
        }
    }
    // callExpressionEnd 
    function callExpressionEnd(wl, vs) {
        var callResult = vs.pop();
        var c = monitor.context;
        var result = c.result;
        callResult.value.raise(this.label);
        if (callResult.type === 'throw') {
            result.type = 'throw';
            result.value = callResult.value;
            return;
        }
        c.popPC();
        vs.push(callResult.value);
    }
    // Property Accessors, 11.2.1 -------------------------------------------
    function memberExpression(node, wl, vs) {
        var ip = wl.top();
        ip.then(node.object);
        ip.then(_GetValue);
        if (node.computed) {
            ip.then(node.property);
            ip.then(_GetValue);
        }
        ip.then(memberExpressionExecute, { node: node });
    }
    function memberExpressionExecute(wl, vs) {
        var propertyNameValue;
        if (this.node.computed) {
            propertyNameValue = vs.pop();
        }
        else {
            propertyNameValue = new values_1.Value(this.node.property.name, bot);
        }
        var baseValue = vs.pop();
        if (baseValue.value === undefined || baseValue.value === null) {
            monitor.log(pp.pretty(this.node.object) + ' evaluates to ' + String(baseValue.value) + ' in ' + pp.pretty(this.node));
        }
        CheckObjectCoercible_1.CheckObjectCoercible(baseValue);
        vs.push(new values_1.Reference(baseValue, ToString_1.ToString(propertyNameValue)));
    }
    // Identifier, 11.1.2 -> 10.3.1 -----------------------------------------
    function identifierExpression(node, wl, vs) {
        vs.push(env.GetIdentifierReference(monitor.context.lexicalEnv, node.name));
    }
    // Literals, 11.1.3 -> 7.8 ----------------------------------------------
    function literalExpression(node, wl, vs) {
        var res = new values_1.Value(node.value, bot);
        if (node.value instanceof RegExp) {
            res.value = new RegExpObject(node.value, bot);
        }
        vs.push(res);
    }
    // ------------------------------------------------------------
    // statement handler functions
    var statementtbl = {
        'Program': blockStatement,
        'BlockStatement': blockStatement,
        'EmptyStatement': emptyStatement,
        'ExpressionStatement': expressionStatement,
        'IfStatement': ifStatement,
        'SwitchStatement': switchStatement,
        'LabeledStatement': labeledStatement,
        'BreakStatement': breakStatement,
        'ContinueStatement': continueStatement,
        'WithStatement': withStatement,
        'ReturnStatement': returnStatement,
        'ThrowStatement': throwStatement,
        'TryStatement': tryStatement,
        'WhileStatement': whileStatement,
        'DoWhileStatement': doWhileStatement,
        'ForStatement': forStatement,
        'ForInStatement': forInStatement,
        'VariableDeclaration': variableDeclaration,
        'FunctionDeclaration': emptyStatement,
        'DebuggerStatement': debuggerStatement
    };
    var emptyLabel = 'default'; // default is a reserved word so no actual label can be named default 
    // ------------------------------------------------------------
    function blockStatement(node, wl) {
        wl.prepend(node.body);
    }
    // ------------------------------------------------------------
    function emptyStatement() {
    }
    // ------------------------------------------------------------
    function expressionStatement(node, wl) {
        var ip = wl.top();
        ip.then(node.expression);
        ip.then(expressionStatementEnd);
    }
    function expressionStatementEnd() {
        var c = monitor.context;
        var vs = c.valueStack;
        c.result.value = GetValue(vs.pop());
    }
    // ------------------------------------------------------------
    function ifStatement(node, wl) {
        var ip = wl.top();
        ip.then(node.test);
        ip.then(ifStatementChoose, { node: node });
    }
    // ifStatementChoose
    function ifStatementChoose(wl, vs) {
        var ip = wl.top();
        var cond = GetValue(vs.pop());
        cond = ToBoolean_1.ToBoolean(cond);
        monitor.context.pushPC(cond.label);
        if (cond.label > monitor.context.pc && hybrid) {
            hybrid(this.node.consequent);
            hybrid(this.node.alternate);
        }
        if (cond.value) {
            ip.then(this.node.consequent);
        }
        else {
            this.node.alternate && ip.then(this.node.alternate);
        }
        ip.then(ifStatementEnd, { label: cond.label });
    }
    // ifStatementEnd
    function ifStatementEnd(wl, vs) {
        var c = monitor.context;
        c.popPC();
        if (c.result.value) {
            c.result.value.raise(this.label);
        }
    }
    ifStatementEnd.runfor = runfor_continue_break;
    // 12.11 ---------------------------------------------------------------------
    function switchStatement(node, wl) {
        var c = monitor.context;
        var lmap = monitor.context.labels.labelmap;
        if (!node.labelset) {
            node.labelset = new set_1.Set([]);
        }
        node.labelset.add(emptyLabel);
        var outerEmptyLabelData = lmap[emptyLabel];
        lmap[emptyLabel] = { label: c.effectivePC,
            pcmarker: c.pcStack.marker() };
        var contextLabel = lmap[emptyLabel].label;
        c.pushPC(contextLabel);
        var switchState = {
            node: node,
            outerEmptyLabelData: label,
            defaultCaseIndex: null,
            nextCase: 0
        };
        if (node.cases) {
            for (var i = 0; i < node.cases.length; i++) {
                if (node.cases[i].test === null) {
                    switchState.defaultCaseIndex = i;
                    break;
                }
            }
        }
        var ip = wl.top();
        // Store the discriminant value on the value stack.
        // It is later popped by switchStatementEnd.
        ip.then(node.discriminant);
        ip.then(_GetValue);
        // Set up statement labels
        ip.then(switchStatementUpgradeLabels, switchState);
        // Kick off the first case
        ip.then(switchStatementCase, switchState);
        // Clean up and handle breaks
        ip.then(switchStatementEnd, switchState);
    }
    function switchStatementUpgradeLabels(wl, vs) {
        var c = monitor.context;
        var discriminantLabel = vs.peek().label;
        var lblmap = c.labels.labelmap;
        c.labels.pc = lub(c.labels.pc, discriminantLabel);
        this.node.labelset.iter(function (name) {
            lblmap[name].label = lub(lblmap[name].label, discriminantLabel);
        });
    }
    function switchStatementCase(wl, vs) {
        var ip = wl.top();
        var idx = this.nextCase;
        if (this.node.cases === undefined || idx >= this.node.cases.length) {
            // No more cases to try, schedule the default 
            // case if there is one
            if (this.defaultCaseIndex !== null) {
                for (var i = this.defaultCaseIndex; i < this.node.cases.length; i++) {
                    for (var j = 0; j < this.node.cases[i].consequent.length; j++) {
                        ip.then(this.node.cases[i].consequent[j]);
                    }
                }
            }
            return;
        }
        if (idx === this.defaultCaseIndex) {
            // Skip the default case during matching
            this.nextCase += 1;
            ip.then(switchStatementCase, this);
            return;
        }
        vs.dup(); // Duplicate the discriminant value
        // Push the test value
        ip.then(this.node.cases[idx].test);
        ip.then(_GetValue);
        // Test for equality and decide what to do next
        ip.then(switchStatementTest, this);
    }
    function switchStatementTest(wl, vs) {
        var ip = wl.top();
        binaryStrictEqs('===', wl, vs);
        var bresult = vs.pop();
        monitor.context.labels.pc = lub(monitor.context.labels.pc, bresult.label);
        if (bresult.value) {
            // Found a match, schedule all statements from here down
            for (var i = this.nextCase; i < this.node.cases.length; i++) {
                for (var j = 0; j < this.node.cases[i].consequent.length; j++) {
                    ip.then(this.node.cases[i].consequent[j]);
                }
            }
        }
        else {
            this.nextCase += 1;
            ip.then(switchStatementCase, this);
        }
    }
    function switchStatementEnd(wl, vs) {
        var c = monitor.context;
        vs.pop(); // pop the discriminant value
        c.popPC(); // pop the labelContext
        if (c.result.type === 'break' && this.node.labelset.contains(c.result.target)) {
            c.result.type = 'normal';
            c.result.target = null;
            c.labels.labelmap['empty'] = this.outerEmptyLabelData;
        }
    }
    switchStatementEnd.runfor = runfor_break;
    // 12.12 ---------------------------------------------------------------------
    function labeledStatement(node, wl) {
        var ip = wl.top();
        var c = monitor.context;
        var pcmarker = c.pcStack.marker();
        var vsmarker = c.valueStack.marker();
        if (!node.body.labelset) {
            node.body.labelset = new set_1.Set([node.label.name]);
            if (node.labelset) {
                node.body.labelset.union(node.labelset);
            }
        }
        var name = node.label.name;
        var outerlabel = setupStatementLabel(name);
        var labeldata = c.labels.labelmap[name];
        labeldata.pcmarker = c.pcStack.marker();
        c.pushPC(labeldata.label);
        ip.then(node.body);
        ip.then(labeledStatementEnd, { name: name,
            outerlabel: labeldata.label,
            pcmarker: pcmarker,
            vsmarker: vsmarker });
    }
    // labeledStatementEnd
    function labeledStatementEnd(wl, vs) {
        var c = monitor.context;
        var result = c.result;
        // reset the outer label - no need to reset pcmarker since
        // statement labels with the same name cannot be nested
        c.labels.labelmap[this.name].label = this.outerlabel;
        c.pcStack.reset(this.pcmarker);
        c.valueStack.reset(this.vsmarker);
        if (result.type === 'break' && result.target === this.name) {
            result = c.result;
            result.type = 'normal';
            result.target = null;
        }
    }
    labeledStatementEnd.runfor = runfor_continue_break;
    // 12.8 ----------------------------------------------------------------------
    function breakStatement(node, wl) {
        var c = monitor.context;
        var result = monitor.context.result;
        var name = node.label ? node.label.name : emptyLabel;
        var lblcontext = c.labels.labelmap[name].label;
        var displayName = node.label ? '(' + name + ')' : '';
        monitor.assert(le(c.effectivePC, lblcontext), 'write context ' + c.effectivePC + ' not below ' +
            'label context ' + lblcontext + ' ' + displayName);
        // For observable flows
        lblcontext.lub(c.effectivePC);
        result.type = 'break';
        result.target = name;
    }
    // 12.7 ----------------------------------------------------------------------
    function continueStatement(node, wl) {
        var c = monitor.context;
        var result = monitor.context.result;
        var name = node.label ? node.label.name : emptyLabel;
        var lblcontext = c.labels.labelmap[name].label;
        var displayName = node.label ? '(' + name + ')' : '';
        monitor.assert(le(c.effectivePC, lblcontext), 'write context ' + c.effectivePC + ' not below ' +
            'label context ' + lblcontext + displayName);
        // For observable flows
        lblcontext.lub(c.effectivePC);
        result.type = 'continue';
        result.target = name;
    }
    // 12.10 ---------------------------------------------------------------------
    function withStatement(node, wl) {
        var ip = wl.top();
        ip.then(node.object);
        ip.then(withStatementBody, { node: node });
    }
    // withStatementBody
    function withStatementBody(wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        var val = GetValue(vs.pop());
        var obj = ToObject_1.ToObject(val);
        var oldEnv = c.lexicalEnv;
        var newEnv = env.NewObjectEnvironment(obj, oldEnv);
        newEnv.provideThis();
        c.lexicalEnv = new values_1.Value(newEnv, obj.label);
        ip.then(this.node.body);
        ip.then(withStatementEnd, { lexicalEnv: oldEnv });
    }
    // withStatementEnd
    function withStatementEnd(wl, vs) {
        monitor.context.lexicalEnv = this.lexicalEnv;
    }
    withStatementEnd.runfor = runfor_continue_break;
    //---------------------------------------------------------------------------- 
    function returnStatement(node, wl) {
        var c = monitor.context;
        var ip = wl.top();
        monitor.assert(le(c.effectivePC, c.labels.ret), 'write context ' + c.effectivePC + ' not below ' +
            'return context ' + c.labels.ret);
        // This is for the new mode of operation, for observable flows
        c.labels.ret.lub(c.effectivePC);
        if (node.argument) {
            ip.then(node.argument);
        }
        else {
            c.valueStack.push(new values_1.Value(undefined, bot));
        }
        ip.then(returnStatementEnd);
    }
    // returnStatementEnd
    function returnStatementEnd(wl, vs) {
        var result = monitor.context.result;
        result.type = 'return';
        result.value = GetValue(vs.pop());
        result.target = null;
    }
    //---------------------------------------------------------------------------- 
    function throwStatement(node, wl) {
        var ip = wl.top();
        ip.then(node.argument);
        ip.then(throwStatementEnd);
    }
    // throwStatementEnd
    function throwStatementEnd(wl, vs) {
        var c = monitor.context;
        var result = c.result;
        var exprRef = vs.pop();
        // Verfiy that the exception is allowed 
        monitor.assert(le(c.effectivePC, c.labels.exc), "exception in " + c.effectivePC + " not allowed with exception label " + c.labels.exc);
        // For observable flows
        c.labels.exc.lub(c.effectivePC);
        result.type = 'throw';
        result.value = GetValue(exprRef);
        monitor.offendingTrace = monitor.stackTrace();
    }
    //---------------------------------------------------------------------------- 
    function tryStatement(node, wl) {
        var ip = wl.top();
        var c = monitor.context;
        ip.then(node.block);
        // Expression evaluation might cause exceptions; if so the state of
        // the context might need some cleaning up.
        // The result stack and the worklist are not affected by expression so their
        // states are fine.
        // The ret label cannot be affected by exceptions.
        // The stacks needs to be reset. 
        var pcmarker = c.pcStack.marker();
        var vsmarker = c.valueStack.marker();
        var exc = c.labels.exc;
        // esprima seems to generate a list of handlers --- standard only supports one
        ip.then(tryStatementCatch, { handler: node.handlers[0],
            pcmarker: pcmarker,
            vsmarker: vsmarker,
            exc: exc });
        // The finalizer 
        var lexicalEnv = c.lexicalEnv;
        ip.then(tryStatementFinally, { body: node.finalizer,
            pcmarker: pcmarker,
            vsmarker: vsmarker,
            lexicalEnv: lexicalEnv });
    }
    // tryStatetementCatch
    function tryStatementCatch(wl, vs) {
        var c = monitor.context;
        var result = c.result;
        // We are in charge of resetting the exc label, the finally does the rest 
        // of the cleaning.
        // The pc of the catch block is pc + exc of body
        var handlerPC = lub(c.labels.pc, c.labels.exc);
        // The exc of the catch block is the exc of _catch, that resets the exc
        c.labels.exc = this.exc;
        // if there is no handler or no exception was thrown, there's nothing more to do
        if (!this.handler || result.type !== 'throw') {
            return;
        }
        c.pcStack.reset(this.pcmarker);
        c.valueStack.reset(this.vsmarker);
        c.pcStack.push(handlerPC);
        var catchEnv = env.NewDeclarativeEnvironment(c.lexicalEnv);
        // ECMA-262 allows only idenfifiers, but the parser allows patterns;
        if (this.handler.param.type !== 'Identifier') {
            monitor.fatal('Pattern in catch not supported');
        }
        var identifier = new values_1.Value(this.handler.param.name, bot);
        catchEnv.CreateMutableBinding(identifier);
        catchEnv.SetMutableBinding(identifier, result.value);
        c.lexicalEnv = new values_1.Value(catchEnv, c.effectivePC);
        result.type = 'normal';
        result.value = null;
        wl.push(this.handler.body);
    }
    tryStatementCatch.runfor = runfor_throw;
    // tryStatementFinally
    function tryStatementFinally() {
        var c = monitor.context;
        // The pc of the finally is the pc of the try.
        // The exc of the finally is the exc of the _catch, which is either
        // the exc of theee try, unless it was raised by a handler, in which
        // case it escapes the try, and should affect the finally too.
        // We are in charge of resetting the pcStack, and the lexicalEnv 
        c.pcStack.reset(this.pcmarker);
        c.valueStack.reset(this.vsmarker);
        c.lexicalEnv = this.lexicalEnv;
        // if there is no finally block, we're done
        if (!this.body) {
            return;
        }
        // Allocate a new result --- _finally env choses between the result
        // of the body/handler, and the result of the finally
        var result = c.result;
        c.result = new context_1.Result();
        var ip = c.workList.top();
        ip.then(this.body);
        ip.then(tryStatementFinallyEnd, { result: result });
    }
    tryStatementFinally.runfor = runfor_all;
    // tryStatementFinallyEnd
    function tryStatementFinallyEnd(wl, vs) {
        var c = monitor.context;
        if (c.result.type === 'normal') {
            c.result = this.result;
        }
    }
    tryStatementFinallyEnd.runfor = runfor_all;
    // ------------------------------------------------------------
    function whileStatement(node, wl) {
        var c = monitor.context;
        var ip = wl.top();
        var lmap = c.labels.labelmap;
        if (!node.labelset) {
            node.labelset = new set_1.Set([]);
        }
        node.labelset.add(emptyLabel);
        var outerEmptyLabelData = lmap[emptyLabel];
        lmap[emptyLabel] = { label: c.effectivePC,
            pcmarker: c.pcStack.marker() };
        var contextLabel = lmap[emptyLabel].label;
        c.pushPC(contextLabel);
        ip.then(whileStatementShared, { node: node, outerEmptyLabelData: outerEmptyLabelData });
    }
    // ------------------------------------------------------------
    function doWhileStatement(node, wl) {
        var c = monitor.context;
        var ip = wl.top();
        var lmap = c.labels.labelmap;
        if (!node.labelset) {
            node.labelset = new set_1.Set([]);
        }
        node.labelset.add(emptyLabel);
        var outerEmptyLabelData = lmap[emptyLabel];
        lmap[emptyLabel] = { label: c.effectivePC,
            pcmarker: c.pcStack.marker() };
        // used for both statement label security labels and control security label
        var contextLabel = lmap[emptyLabel].label;
        c.pushPC(contextLabel);
        ip.then(node.body);
        ip.then(whileStatementShared, { node: node, outerEmptyLabelData: outerEmptyLabelData });
    }
    // ------------------------------------------------------------
    function whileStatementShared(wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        var result = c.result;
        if (result.type === 'break' && this.node.labelset.contains(result.target)) {
            result.type = 'normal';
            result.target = null;
            c.labels.labelmap[emptyLabel] = this.outerEmptyLabelData;
            c.popPC(); // contextLabel
            return;
        }
        if (result.type !== 'continue' || !this.node.labelset.contains(result.target)) {
            if (result.type !== 'normal') {
                return;
            }
        }
        // continue gets us here
        result.type = 'normal';
        result.target = null;
        ip.then(this.node.test);
        ip.then(whileStatementSharedChoose, this);
    }
    whileStatementShared.runfor = runfor_continue_break;
    // whileStatementSharedChoose
    function whileStatementSharedChoose(wl, vs) {
        var c = monitor.context;
        var cond = GetValue(vs.pop());
        var condb = ToBoolean_1.ToBoolean(cond);
        c.labels.pc = lub(c.labels.pc, condb.label);
        if (condb.value) {
            var ip = wl.top();
            ip.then(this.node.body);
            ip.then(whileStatementShared, this);
        }
        else {
            c.labels.labelmap[emptyLabel] = this.outerEmptyLabelData;
            c.popPC(); // contextLabel
        }
    }
    whileStatementSharedChoose.runfor = runfor_continue;
    // ------------------------------------------------------------
    function forStatement(node, wl) {
        var c = monitor.context;
        var ip = wl.top();
        var lmap = c.labels.labelmap;
        if (node.init) {
            ip.then(node.init);
        }
        if (!node.labelset) {
            node.labelset = new set_1.Set([]);
        }
        node.labelset.add(emptyLabel);
        var outerEmptyLabelData = lmap[emptyLabel];
        lmap[emptyLabel] = { label: c.effectivePC,
            pcmarker: c.pcStack.marker() };
        var contextLabel = lmap[emptyLabel].label;
        c.pushPC(contextLabel);
        ip.then(forStatementMain, { node: node });
        ip.then(forStatementEnd, { outerEmptyLabelData: outerEmptyLabelData });
    }
    // forStatementMain
    function forStatementMain(wl, vs) {
        var c = monitor.context;
        var ip = wl.top();
        var result = c.result;
        if (result.type === 'break' && this.node.labelset.contains(result.target)) {
            result.type = 'normal';
            result.target = null;
            return;
        }
        if (result.type !== 'continue' || !this.node.labelset.contains(result.target)) {
            if (result.type !== 'normal') {
                return;
            }
        }
        result.type = 'normal';
        result.target = null;
        if (this.node.test) {
            ip.then(this.node.test);
            ip.then(forStatementChoose, this);
        }
        else {
            ip.then(forStatementExecute, this);
        }
    }
    forStatementMain.runfor = runfor_continue_break;
    // forStatementChoose
    function forStatementChoose(wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        var result = c.result;
        var cond = GetValue(vs.pop());
        var condb = ToBoolean_1.ToBoolean(cond);
        c.labels.pc = lub(c.labels.pc, condb.label);
        if (!condb.value) {
            result.type = 'normal';
            result.target = null;
            return;
        }
        ip.then(forStatementExecute, this);
    }
    forStatementChoose.runfor = runfor_continue;
    function forStatementExecute(wl, vs) {
        var ip = wl.top();
        ip.then(this.node.body);
        ip.then(forStatementUpdate, this);
        ip.then(forStatementMain, this);
    }
    function forStatementUpdate(wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        var result = c.result;
        if (result.type !== 'continue' || !this.node.labelset.contains(result.target)) {
            if (result.type !== 'normal') {
                return;
            }
        }
        result.type = 'normal';
        result.target = null;
        if (this.node.update) {
            ip.then(this.node.update);
            ip.then(_GetValue);
        }
    }
    forStatementUpdate.runfor = runfor_continue;
    // forStatementeEnd
    function forStatementEnd(wl, vs) {
        var c = monitor.context;
        c.labels.labelmap[emptyLabel] = this.outerEmptyLabelData;
        c.popPC();
    }
    // ------------------------------------------------------------
    function forInStatement(node, wl) {
        var ip = wl.top();
        var left;
        if (node.left.type === 'VariableDeclaration') {
            ip.then(node.left);
            // the standard only allows for one declaration, get the name
            left = node.left.declarations[0].id;
        }
        else {
            left = node.left;
        }
        ip.then(node.right);
        ip.then(forInStatementSetup, { node: node, left: left });
    }
    function forInStatementSetup(wl, vs) {
        var c = monitor.context;
        var ip = wl.top();
        var lmap = c.labels.labelmap;
        var node = this.node;
        if (!node.labelset) {
            node.labelset = new set_1.Set([]);
        }
        node.labelset.add(emptyLabel);
        var outerEmptyLabelData = lmap[emptyLabel];
        lmap[emptyLabel] = { label: c.effectivePC,
            pcmarker: c.pcStack.marker() };
        var contextLabel = lmap[emptyLabel].label;
        c.pushPC(contextLabel);
        var obj = ToObject_1.ToObject(GetValue(vs.pop()));
        var properties = obj.value.getEnumerablePropertyNames(obj.label).reverse();
        // monitor.context.pushPC(obj.label);
        ip.then(forInExecute, { node: this.node,
            left: this.left,
            properties: properties,
            outerEmptyLabelData: outerEmptyLabelData });
    }
    function forInExecute(wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        var result = c.result;
        if (result.type === 'break' && this.node.labelset.contains(result.target)) {
            result.type = 'normal';
            result.target = null;
            c.labels.labelmap[emptyLabel] = this.outerEmptyLabelData;
            c.popPC(); // contextLabel
            return;
        }
        if (result.type !== 'continue' || !this.node.labelset.contains(result.target)) {
            if (result.type !== 'normal') {
                return;
            }
        }
        // continue gets us here
        result.type = 'normal';
        result.target = null;
        var found = false;
        var propName;
        var P;
        if (this.properties.length === 0) {
            c.labels.labelmap[emptyLabel] = this.outerEmptyLabelMap;
            c.popPC(); // contextLabel
            return;
        }
        propName = this.properties.pop();
        vs.push(propName);
        ip.then(this.left);
        ip.then(forInUpdate, this);
    }
    forInExecute.runfor = runfor_continue_break;
    function forInUpdate(wl, vs) {
        var ip = wl.top();
        var lhs = vs.pop();
        var propName = vs.pop();
        PutValue(lhs, propName);
        monitor.context.pushPC(propName.label);
        ip.then(this.node.body);
        ip.then(forInSecurityContextEnd);
        ip.then(forInExecute, this);
    }
    function forInSecurityContextEnd(wl, vs) {
        monitor.context.popPC();
    }
    // ------------------------------------------------------------
    function variableDeclaration(node, wl) {
        var ip = wl.top();
        for (var i = 0, len = node.declarations.length; i < len; i++) {
            var vd = node.declarations[i];
            if (vd.init) {
                if (vd.id.type !== 'Identifier') {
                    monitor.fatal(vd.id.type + ' not supported in variable declarations');
                }
                var lhs = env.GetIdentifierReference(monitor.context.lexicalEnv, vd.id.name);
                ip.then(vd.init);
                ip.then(variableDeclarationUpdate, { lhs: lhs });
            }
        }
    }
    // variableUpdate
    function variableDeclarationUpdate(wl, vs) {
        var rhs = GetValue(vs.pop());
        PutValue(this.lhs, rhs);
    }
    // ------------------------------------------------------------
    function debuggerStatement(node, wl) {
        monitor.debug.active = true;
    }
    // https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API
    // -------------------------------------------------------------
    function step() {
        var c = monitor.context;
        var wl = c.workList;
        var vs = c.valueStack;
        var result = c.result;
        if (wl.empty()) {
            return false;
        }
        var task = wl.pop();
        try {
            // throw, continue, or break state
            if (result.type !== 'normal') {
                while (true) {
                    if (task.runfor && result.type in task.runfor) {
                        task(wl, vs);
                        return true;
                    }
                    if (task.func && task.func.runfor && result.type in task.func.runfor) {
                        task.func.call(task.data, wl, vs);
                        return true;
                    }
                    if (wl.empty()) {
                        break;
                    }
                    task = wl.pop();
                }
                return false;
            }
            // function?
            if (typeof task === 'function') {
                task(wl, vs);
                return true;
            }
            // closure?
            if ('func' in task && 'data' in task) {
                task.func.call(task.data, wl, vs);
                return true;
            }
            // otherwise, syntax
            var node = task;
            // for stackTrace
            c.currentStatement = node;
            // expressions
            if (node.type in expressiontbl) {
                expressiontbl[node.type](node, wl, vs);
                return true;
            }
            // statement 
            if (node.type in statementtbl) {
                statementtbl[node.type](node, wl);
                return true;
            }
            monitor.fatal(node.type + ' not implemented');
        }
        catch (e) {
            if (e instanceof values_1.Value) {
                // Verfiy that the exception is allowed 
                monitor.assert(le(c.effectivePC, c.labels.exc), "exception in " + c.effectivePC + " not allowed with exception label " + c.labels.exc);
                // For observable flows
                c.labels.exc.lub(c.effectivePC);
                result.type = 'throw';
                result.value = e;
                return true;
            }
            throw e;
        }
        return true;
    }
    // ----------------------------------------------------------------------------- 
    // Initializes the statement label security label.
    function setupStatementLabel(name) {
        var c = monitor.context;
        var lmap = c.labels.labelmap;
        if (!lmap[name]) {
            lmap[name] = { label: bot, pcmarker: undefined };
        }
        var labeldata = lmap[name];
        var outerlabel = labeldata.label;
        // raise to effective pc
        labeldata.label = lub(labeldata.label, c.effectivePC);
        return outerlabel;
    }
    // ------------------------------------------------------------
    var module = {};
    module.initialize = initialize;
    module.execute = execute;
    module.executeGlobalCode = executeGlobalCode;
    module.resume = resume;
    module.running = running;
    return module;
};

},{"./Conversion/ToBoolean":28,"./Conversion/ToInt32":29,"./Conversion/ToNumber":31,"./Conversion/ToObject":32,"./Conversion/ToPrimitive":33,"./Conversion/ToString":34,"./Conversion/ToUInt32":36,"./Objects/ArrayObject":38,"./Objects/FunctionObject":40,"./Objects/ObjectObject":42,"./Utility/CheckObjectCoercible":48,"./Utility/IsCallable":49,"./constants":50,"./context":51,"./ecma":53,"./env":54,"./function":57,"./label":60,"./pp":64,"./set":67,"./values":75,"esprima":19}],57:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("./label");
var values_1 = require("./values");
var ecma_1 = require("./ecma");
var env = require("./env");
var constants = require("./constants");
var esprima = require("esprima");
var estraverse = require("estraverse");
var FunctionObject_1 = require("./Objects/FunctionObject");
var ToObject_1 = require("./Conversion/ToObject");
// ------------------------------------------------------------
var NewBiFO = /** @class */ (function (_super) {
    __extends(NewBiFO, _super);
    function NewBiFO(self, f, n, host) {
        var _this_1 = _super.call(this) || this;
        _this_1.host = host;
        _this_1.actualFunction = f;
        _this_1.self = self;
        _this_1.Class = 'Function';
        _this_1.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, label_1.bot);
        _this_1.Extensible = true;
        ecma_1.DefineFFF(_this_1, constants.length, n);
        return _this_1;
    }
    NewBiFO.prototype.Call = function (thisArg, args) {
        try {
            return this.actualFunction.call(this.self, thisArg, args);
        }
        catch (e) {
            monitor.tryRethrow(e, true);
            monitor.fatal('unable to lift', e);
        }
    };
    NewBiFO.prototype.Construct = function () {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'cannot be used as a constructor', label_1.bot);
    };
    NewBiFO.prototype.toString = function () {
        if (this.host) {
            return this.host.toString();
        }
        else {
            return 'NO HOST GIVEN! : ' + this.nativeFunction;
        }
    };
    return NewBiFO;
}(ecma_1.Ecma));
exports.NewBiFO = NewBiFO;
// ---
// proto allows FunctionPrototype to use BiFO before monitor.instances.FunctionPrototype is set
var BuiltinFunctionObject = /** @class */ (function (_super) {
    __extends(BuiltinFunctionObject, _super);
    function BuiltinFunctionObject(f, n, host) {
        var _this_1 = _super.call(this) || this;
        _this_1.host = host;
        _this_1.actualFunction = f;
        _this_1.Class = 'Function';
        _this_1.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, label_1.bot);
        _this_1.Extensible = true;
        var _this = _this_1;
        _this_1.Call =
            function (thisArg, args) {
                try {
                    return f.call(_this, thisArg, args);
                }
                catch (e) {
                    monitor.tryRethrow(e, true);
                    monitor.fatal('unable to lift', e);
                }
            };
        _this_1.nativeFunction = f;
        ecma_1.DefineFFF(_this_1, constants.length, n);
        return _this_1;
    }
    BuiltinFunctionObject.prototype.Construct = function () {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'cannot be used as a constructor', label_1.bot);
    };
    BuiltinFunctionObject.prototype.toString = function () {
        if (this.host) {
            return this.host.toString();
        }
        else {
            return 'NO HOST GIVEN! : ' + this.nativeFunction;
        }
    };
    return BuiltinFunctionObject;
}(ecma_1.Ecma));
exports.BuiltinFunctionObject = BuiltinFunctionObject;
// ------------------------------------------------------------
// 10.4.3
function enterFunctionCode(F, thisArg, args) {
    var c = monitor.context;
    if (thisArg.value == null) {
        thisArg = new values_1.Value(monitor.instances.globalObject, thisArg.label);
    }
    else if (typeof thisArg.value !== 'object') {
        thisArg = ToObject_1.ToObject(thisArg);
    }
    var localEnv = new values_1.Value(env.NewDeclarativeEnvironment(F.Scope), c.effectivePC);
    var newContext = c.clone(thisArg, localEnv, localEnv);
    newContext.labels.ret = label_1.lub(newContext.labels.ret, newContext.labels.pc);
    DeclarationBindingInstantiation(newContext, F, args);
    return newContext;
}
exports.enterFunctionCode = enterFunctionCode;
function enterEvalCode(code, _eval) {
    var c = monitor.context;
    // 15.1.2.1.1, is direct call
    var isDirect;
    isDirect = c.currentCall.reference.base.value instanceof env.ObjectEnvironmentRecord ||
        c.currentCall.reference.base.value instanceof env.DeclarativeEnvironmentRecord;
    isDirect = isDirect && c.currentCall.reference.propertyName.value === 'eval';
    isDirect = isDirect && c.currentCall.target.actualFunction === _eval;
    var context = c.clone();
    // 10.4.2 - no calling context or not direct call
    if (!isDirect) {
        var global = monitor.instances.globalObject;
        var globalEnv = monitor.instances.globalEnvironment;
        context.thisValue = new values_1.Value(global, label_1.bot);
        context.lexicalEnv = new values_1.Value(globalEnv, label_1.bot);
        context.variableEnv = new values_1.Value(globalEnv, label_1.bot);
    }
    DeclarationBindingInstantiation(context, code);
    // for stack trace 
    context.owner = 'eval';
    return context;
}
exports.enterEvalCode = enterEvalCode;
// ------------------------------------------------------------
// 10.5 - strict ignored
function DeclarationBindingInstantiation(context, F, args) {
    var isFunctionCode, isEvalCode, code;
    if (F instanceof FunctionObject_1.FunctionObject) {
        isFunctionCode = true;
        isEvalCode = false;
        code = F.Code;
    }
    else {
        isFunctionCode = false;
        isEvalCode = true;
        code = F;
    }
    var env = context.variableEnv;
    var configurableBindings = isEvalCode;
    if (isFunctionCode) {
        BindArguments(env, F.FormalParameters, args);
    }
    var pc = context.effectivePC;
    HoistFunctions(env, code, configurableBindings, pc);
    var argumentsAlreadyDeclared = env.HasBinding(constants['arguments']);
    if (isFunctionCode && !argumentsAlreadyDeclared.value) {
        // make sure it returns a Value
        var argsObj = CreateArgumentsObject(env, F, args);
        F.DefineOwnProperty(constants['arguments'], argsObj, false);
        env.CreateMutableBinding(constants['arguments']);
        env.SetMutableBinding(constants['arguments'], argsObj, false);
    }
    HoistVariables(env, code, configurableBindings, pc);
}
exports.DeclarationBindingInstantiation = DeclarationBindingInstantiation;
// ------------------------------------------------------------
// Function hoisting, part of 10.5
function HoistFunctions(env, script, configurableBinding, pc) {
    if (!script.functionDeclarations) {
        // 
        script.functionDeclarations = [];
        var visitor = {};
        visitor.leave = function () { };
        visitor.enter = function (node) {
            if (node.type === 'FunctionDeclaration') {
                script.functionDeclarations.push(node);
            }
            // Do not hoist inside functions
            if (node.type === 'FunctionDeclaration' ||
                node.type === 'FunctionExpression') {
                this.skip();
            }
        };
        estraverse.traverse(script, visitor);
    }
    var ds = script.functionDeclarations;
    var i;
    var len = ds.length;
    for (i = 0; i < len; i++) {
        var fn = new values_1.Value(ds[i].id.name, label_1.bot);
        var fo = new FunctionObject_1.FunctionObject(ds[i].params, ds[i].body, env);
        fo.Name = ds[i].id.name;
        fo.Source = ds[i];
        var funcAlreadyDeclared = env.HasBinding(fn);
        if (!funcAlreadyDeclared.value) {
            env.CreateMutableBinding(fn, configurableBinding);
        }
        env.SetMutableBinding(fn, new values_1.Value(fo, pc));
    }
}
exports.HoistFunctions = HoistFunctions;
// ------------------------------------------------------------
// Variable hoisting, part of 10.5
function HoistVariables(env, script, configurableBindings, pc) {
    if (!script.variableDeclarations) {
        script.variableDeclarations = [];
        var visitor = {};
        visitor.leave = function () { };
        visitor.enter = function (node) {
            // Do not hoist inside functions
            if (node.type === 'FunctionDeclaration' ||
                node.type === 'FunctionExpression') {
                this.skip();
            }
            if (node.type === 'VariableDeclaration') {
                for (var i = 0, len = node.declarations.length; i < len; i++) {
                    var declarator = node.declarations[i];
                    var pattern = declarator.id;
                    script.variableDeclarations.push(pattern);
                }
            }
        };
        estraverse.traverse(script, visitor);
    }
    var ds = script.variableDeclarations;
    var i;
    var len = ds.length;
    for (i = 0; i < len; i++) {
        if (ds[i].type !== 'Identifier') {
            monitor.fatal('Patters is variable declarations not supported');
        }
        // declarations are indentifiers, not general patterns
        var dn = new values_1.Value(ds[i].name, label_1.bot);
        var varAlreadyDeclared = env.HasBinding(dn);
        if (!varAlreadyDeclared.value) {
            env.CreateMutableBinding(dn, configurableBindings);
            env.SetMutableBinding(dn, new values_1.Value(undefined, pc));
        }
    }
}
exports.HoistVariables = HoistVariables;
// ------------------------------------------------------------
// Create Arguments Object, 10.6
function CreateArgumentsObject(env, F, args) {
    return new values_1.Value(new ArgumentsObject(F, args), label_1.bot);
    /*
    var obj = new Ecma();
    obj.Class = 'Arguments';
  
    obj.Prototype = new Value(monitor.instances.ObjectPrototype,bot);
  
    args = args || [];
  
    for (var i = 0, len = args.length; i < len; i++) {
      obj.Put(new Value(i, bot), args[i]);
    }
  
  
    var argNames = F.FormalParameters;
  
    for (var i = 0, len = argNames.length; i < len; i++) {
      var id = argNames[i];
  
      if (id.type !== 'Identifier') {
        monitor.fatal(id.type + ' is not supported in CreateArgumentsObject');
      }
  
      if (args[i]) {
        obj.Put(new Value(id.name, bot), args[i]);
      }
    }
  
    obj.Put(new Value('length', bot), new Value(args.length, bot));
    obj.Put(new Value('callee', bot), new Value(F, bot));
  
    return new Value(obj, bot);
    */
}
exports.CreateArgumentsObject = CreateArgumentsObject;
// ------------------------------------------------------------
// Bind Arguments, 
function BindArguments(env, names, args) {
    if (args == undefined)
        return;
    var argCount = args.length;
    var nameCount = names.length;
    monitor.context.pushPC(label_1.bot);
    for (var n = 0; n < nameCount; n++) {
        var v;
        if (n >= argCount)
            v = new values_1.Value(undefined, label_1.bot);
        else
            v = args[n];
        var id = names[n];
        if (id.type !== 'Identifier') {
            monitor.fatal(id.type + ' is not supported in BindArguments');
        }
        var argName = new values_1.Value(id.name, label_1.bot);
        var argAlreadyDeclared = env.HasBinding(argName);
        monitor.context.raisePC(argAlreadyDeclared.label);
        if (!argAlreadyDeclared.value) {
            env.CreateMutableBinding(argName);
        }
        env.SetMutableBinding(argName, v);
    }
    monitor.context.popPC();
}
exports.BindArguments = BindArguments;
// ------------------------------------------------------------
var ArgumentsObject = /** @class */ (function (_super) {
    __extends(ArgumentsObject, _super);
    function ArgumentsObject(F, args) {
        var _this_1 = _super.call(this) || this;
        _this_1.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, label_1.bot);
        _this_1.Class = 'Arguments';
        _this_1.Extensible = true;
        var formalParams = F.FormalParameters;
        var args = args || [];
        for (var i = 0; i < args.length; i++) {
            _this_1.Put(new values_1.Value(i, label_1.bot), args[i]);
        }
        for (var i = 0; i < formalParams.length; i++) {
            var id = formalParams[i];
            if (id.type !== 'Identifier') {
                monitor.fatal(id.type + ' is not supported in ArgumentsObject');
            }
            if (args[i]) {
                _this_1.Put(new values_1.Value(id.name, label_1.bot), args[i]);
            }
        }
        _this_1.Put(new values_1.Value('length', label_1.bot), new values_1.Value(args.length, label_1.bot));
        _this_1.Put(new values_1.Value('callee', label_1.bot), new values_1.Value(F, label_1.bot));
        return _this_1;
    }
    return ArgumentsObject;
}(ecma_1.Ecma));
exports.ArgumentsObject = ArgumentsObject;
// ---
// 13.2.3
var ThrowTypeError = /** @class */ (function (_super) {
    __extends(ThrowTypeError, _super);
    function ThrowTypeError() {
        var _this_1 = _super.call(this, [], esprima.parse("(function() { throw new TypeError(); })").body[0].expression, new values_1.Value(monitor.instances.globalEnvironment, label_1.bot)) || this;
        ecma_1.DefineFFF(_this_1, constants.length, 0);
        _this_1.Extensible = false;
        return _this_1;
    }
    return ThrowTypeError;
}(FunctionObject_1.FunctionObject));
exports.ThrowTypeError = ThrowTypeError;

},{"./Conversion/ToObject":32,"./Objects/FunctionObject":40,"./constants":50,"./ecma":53,"./env":54,"./label":60,"./values":75,"esprima":19,"estraverse":20}],58:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label = require("./label");
var values_1 = require("./values");
var ecma = require("./ecma");
var constants = require("./constants");
var esprima = require("esprima");
var function_1 = require("./function");
var ToNumber_1 = require("./Conversion/ToNumber");
var ToString_1 = require("./Conversion/ToString");
exports.functor = function (monitor) {
    var error = monitor.require('error');
    var Label = label.Label;
    var lub = label.lub;
    var le = label.le;
    var bot = Label.bot;
    // ------------------------------------------------------------
    function allocate(host) {
        var go = new GlobalObject(host);
        return { globalObject: go };
    }
    // ------------------------------------------------------------
    var GlobalObject = /** @class */ (function (_super) {
        __extends(GlobalObject, _super);
        function GlobalObject(host) {
            var _this = _super.call(this) || this;
            _this.Class = 'global';
            _this.JSFClass = 'GlobalObject';
            if (_this.Prototype === undefined || _this.Prototype.value === null) {
                _this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, bot);
            }
            _this.host = host;
            // 15.1.1
            ecma.DefineFFF(_this, constants.NaN, NaN);
            ecma.DefineFFF(_this, constants['Infinity'], Infinity);
            ecma.DefineFFF(_this, constants['undefined'], undefined);
            // 15.1.2
            ecma.DefineTFT(_this, constants['eval'], new function_1.BuiltinFunctionObject(__eval, 1, host.eval));
            ecma.DefineTFT(_this, constants.parseInt, new function_1.BuiltinFunctionObject(__parseInt, 2, host.parseInt));
            ecma.DefineTFT(_this, constants.parseFloat, new function_1.BuiltinFunctionObject(__parseFloat, 1, host.parseFloat));
            ecma.DefineTFT(_this, constants.isNaN, new function_1.BuiltinFunctionObject(__isNaN, 1, host.isNaN));
            ecma.DefineTFT(_this, constants.isFinite, new function_1.BuiltinFunctionObject(__isFinite, 1, host.isFinite));
            // 15.1.3
            ecma.DefineTFT(_this, constants.decodeURI, new function_1.BuiltinFunctionObject(__decodeURI, 1, host.decodeURI));
            ecma.DefineTFT(_this, constants.decodeURIComponent, new function_1.BuiltinFunctionObject(__decodeURIComponent, 1, host.decodeURIComponent));
            ecma.DefineTFT(_this, constants.encodeURI, new function_1.BuiltinFunctionObject(__encodeURI, 1, host.encodeURI));
            ecma.DefineTFT(_this, constants.encodeURIComponent, new function_1.BuiltinFunctionObject(__encodeURIComponent, 1, host.encodeURIComponent));
            // 15.1.4
            ecma.DefineTFT(_this, constants.Object, monitor.instances.ObjectConstructor);
            ecma.DefineTFT(_this, constants.Function, monitor.instances.FunctionConstructor);
            ecma.DefineTFT(_this, constants.Array, monitor.instances.ArrayConstructor);
            ecma.DefineTFT(_this, constants.String, monitor.instances.StringConstructor);
            ecma.DefineTFT(_this, constants.Boolean, monitor.instances.BooleanConstructor);
            ecma.DefineTFT(_this, constants.Number, monitor.instances.NumberConstructor);
            ecma.DefineTFT(_this, constants.Date, monitor.instances.DateConstructor);
            ecma.DefineTFT(_this, constants.RegExp, monitor.instances.RegExpConstructor);
            ecma.DefineTFT(_this, constants.Error, monitor.instances.ErrorConstructor);
            ecma.DefineTFT(_this, constants.EvalError, monitor.instances.EvalErrorConstructor);
            ecma.DefineTFT(_this, constants.RangeError, monitor.instances.RangeErrorConstructor);
            ecma.DefineTFT(_this, constants.ReferenceError, monitor.instances.ReferenceErrorConstructor);
            ecma.DefineTFT(_this, constants.SyntaxError, monitor.instances.SyntaxErrorConstructor);
            ecma.DefineTFT(_this, constants.TypeError, monitor.instances.TypeErrorConstructor);
            ecma.DefineTFT(_this, constants.URIError, monitor.instances.URIErrorConstructor);
            ecma.DefineTFT(_this, constants.Math, monitor.instances.MathObject);
            ecma.DefineTFT(_this, constants.JSON, monitor.instances.JSONObject);
            ecma.DefineTFT(_this, new values_1.Value('write', bot), new function_1.BuiltinFunctionObject(__print, 0, 'write'));
            ecma.DefineTFT(_this, new values_1.Value('print', bot), new function_1.BuiltinFunctionObject(__lprint, 0, 'print'));
            if (monitor.instances.LabelConstructor) {
                ecma.DefineTFT(_this, new values_1.Value('Label', bot), monitor.instances.LabelConstructor);
            }
            if (monitor.instances.ValueConstructor) {
                ecma.DefineTFT(_this, new values_1.Value('Value', bot), monitor.instances.ValueConstructor);
            }
            ecma.DefineFFF(_this, new values_1.Value('upg', bot), new function_1.BuiltinFunctionObject(__dupg, 1, undefined));
            ecma.DefineFFF(_this, new values_1.Value('upgs', bot), new function_1.BuiltinFunctionObject(__dupgs, 1, undefined));
            ecma.DefineFFF(_this, new values_1.Value('upge', bot), new function_1.BuiltinFunctionObject(__dupge, 1, undefined));
            ecma.DefineFFF(_this, new values_1.Value('lbl', bot), new function_1.BuiltinFunctionObject(__upg, 1, undefined));
            ecma.DefineFFF(_this, new values_1.Value('lbls', bot), new function_1.BuiltinFunctionObject(__upgs, 1, undefined));
            ecma.DefineFFF(_this, new values_1.Value('lble', bot), new function_1.BuiltinFunctionObject(__upge, 1, undefined));
            ecma.DefineFFF(_this, new values_1.Value('upgl', bot), new function_1.BuiltinFunctionObject(__upgl, 1, undefined));
            /*
            ecma.DefineTFT(this, new Value('Label',bot) ,__Label);
        
            ecma.DefineFFF(this , new Value('declassify'    , bot) , new BuiltinFunctionObject(__declassify    , 1, undefined));
        
            ecma.DefineFFF(this , new Value('upgs'   , bot) , new BuiltinFunctionObject(__upgs   , 1, undefined));
            ecma.DefineFFF(this , new Value('dupgs'  , bot) , new BuiltinFunctionObject(__dupgs  , 1, undefined));
            ecma.DefineFFF(this , new Value('getPC'  , bot) , new BuiltinFunctionObject(__getPC  , 0, undefined));
            ecma.DefineFFF(this , new Value('setPC'  , bot) , new BuiltinFunctionObject(__setPC  , 1, undefined));
            ecma.DefineFFF(this , new Value('getEXC' , bot) , new BuiltinFunctionObject(__getEXC , 0, undefined));
            ecma.DefineFFF(this , new Value('setEXC' , bot) , new BuiltinFunctionObject(__setEXC , 1, undefined));
            ecma.DefineFFF(this , new Value('getRET' , bot) , new BuiltinFunctionObject(__getRET , 0, undefined));
            ecma.DefineFFF(this , new Value('setRET' , bot) , new BuiltinFunctionObject(__setRET , 1, undefined));
            */
            ecma.DefineTFT(_this, new values_1.Value('unescape', bot), new function_1.BuiltinFunctionObject(__unescape, 1, host.unescape));
            return _this;
        }
        return GlobalObject;
    }(ecma.Ecma));
    /*
    GlobalObject.extensions = [];
    GlobalObject.addExtension = function(ext) {
      GlobalObject.extensions.push(ext);
    };
    */
    GlobalObject.prototype.toString = function () { return '[global object]'; };
    // ------------------------------------------------------------
    // unescape, B2.2
    var __unescape = function (thisArg, args) {
        var str = args[0] ? args[0] : new values_1.Value(undefined, bot);
        str = ToString_1.ToString(str);
        return new values_1.Value(unescape(str.value), str.label);
    };
    // ------------------------------------------------------------
    // 15.1.2.1
    var __eval = function (thisArg, args) {
        var arg0 = args[0];
        if (arg0 === undefined)
            return new values_1.Value(undefined, bot);
        if (typeof arg0.value !== 'string')
            return arg0;
        var prog;
        // raise the pc w.r.t. the program string; parsing may result in an exception
        monitor.context.pushPC(arg0.label);
        try {
            prog = esprima.parse(arg0.value, { loc: true, source: 'eval' });
        }
        catch (e) {
            var msg = e.description + ' in eval:' + e.lineNumber + ':' + e.column;
            monitor.Throw(error.SyntaxErrorObject, msg, arg0.label);
        }
        var evalCtx = function_1.enterEvalCode(prog, __eval);
        monitor.contextStack.push(evalCtx);
        // this is not a value, it is a result!!
        var result = monitor.modules.exec.execute(prog, false);
        // if value is 'empty' (represented by null)
        if (!result.value) {
            result.value = new values_1.Value(undefined, bot);
        }
        result.value.raise(arg0.label);
        // NOTE: parser should guarantee the result type is never return
        if (result.type === 'throw') {
            throw result.value;
        }
        // pop after throw, otherwise internal context thrown away before handler (catch)
        monitor.contextStack.pop();
        monitor.context.popPC();
        return result.value;
    };
    // ------------------------------------------------------------
    // 15.1.2.2
    var __parseInt = function (thisArg, args) {
        var string = args[0] || new values_1.Value(undefined, bot);
        var radix = args[1] || new values_1.Value(undefined, bot);
        string = ToString_1.ToString(string);
        var value = parseInt(string.value, radix.value);
        return new values_1.Value(value, lub(string.label, radix.label));
    };
    // ------------------------------------------------------------
    // 15.1.2.3
    var __parseFloat = function (thisArg, args) {
        var string = args[0] || new values_1.Value(undefined, bot);
        string = ToString_1.ToString(string);
        var value = parseFloat(string.value);
        return new values_1.Value(value, string.label);
    };
    // ------------------------------------------------------------
    // 15.1.2.4
    var __isNaN = function (thisArg, args) {
        var number = args[0] || new values_1.Value(undefined, bot);
        number = ToNumber_1.ToNumber(number);
        var value = isNaN(number.value);
        return new values_1.Value(value, number.label);
    };
    // ------------------------------------------------------------
    // 15.1.2.5
    var __isFinite = function (thisArg, args) {
        var number = args[0] || new values_1.Value(undefined, bot);
        number = ToNumber_1.ToNumber(number);
        var value = isFinite(number.value);
        return new values_1.Value(value, number.label);
    };
    // ------------------------------------------------------------
    // 15.1.3.1
    var __decodeURI = function (thisArg, args) {
        var arg0 = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var enc = ToString_1.ToString(arg0);
        var res = new values_1.Value(decodeURI(enc.value), enc.label);
        return res;
    };
    // ------------------------------------------------------------
    // 15.1.3.2
    var __decodeURIComponent = function (thisArg, args) {
        var arg0 = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var enc = ToString_1.ToString(arg0);
        var res = new values_1.Value(decodeURIComponent(enc.value), enc.label);
        return res;
    };
    // ------------------------------------------------------------
    // 15.1.2.3
    var __encodeURI = function (thisArg, args) {
        var arg0 = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var enc = ToString_1.ToString(arg0);
        var res = new values_1.Value(encodeURI(enc.value), enc.label);
        return res;
    };
    // ------------------------------------------------------------
    // 15.1.3.4
    var __encodeURIComponent = function (thisArg, args) {
        var arg0 = args[0] !== undefined ? args[0] : new values_1.Value(undefined, bot);
        var componentString = ToString_1.ToString(arg0);
        return new values_1.Value(encodeURIComponent(componentString.value), componentString.label);
    };
    // ------------------------------------------------------------
    var __print = function (thisArg, args) {
        var str = '';
        for (var i = 0; i < args.length; i++)
            str += args[i].value;
        monitor.print(str);
        return new values_1.Value(undefined, bot);
    };
    var __lprint = function (thisArg, args) {
        if (monitor.options.get('monitor.testMode')) {
            __print(thisArg, args);
            return new values_1.Value(undefined, bot);
        }
        var str = '';
        for (var i = 0; i < args.length; i++)
            str += args[i];
        if (monitor.options.get('monitor.taintMode')) {
            monitor.print(str);
        }
        else {
            monitor.print('(' + monitor.context.effectivePC + '):' + str);
        }
        return new values_1.Value(undefined, bot);
    };
    // ------------------------------------------------------------
    var __alert = function (thisArg, args) {
        var str = 'alert: ';
        for (var i = 0; i < args.length; i++)
            str += args[i].value;
        monitor.print(str);
        return new values_1.Value(undefined, bot);
    };
    // ------------------------------------------------------------
    var __upgl = function (thisArg, args) {
        var labelName = args[0] ? args[0] : new values_1.Value('default', bot);
        monitor.assert(le(labelName.label, bot));
        var lbl = bot;
        for (var i = 1; i < args.length; i++) {
            monitor.assert(le(args[i].label, bot));
            lbl = lub(lbl, Label.fromString(args[i].value));
        }
        lbl = lbl.equals(bot) ? Label.top : lbl;
        var lblmap = monitor.context.labels.labelmap;
        var name = labelName.value;
        if (!lblmap[name]) {
            lblmap[name] = {
                label: lbl,
                pcmarker: undefined
            };
        }
        lblmap[name].label = lub(lblmap[name].label, lbl);
        if (lblmap[name].pcmarker) {
            monitor.context.pcStack.map(function (l) {
                return lub(l, lbl);
            }, lblmap[name].pcmarker);
        }
        return new values_1.Value(undefined, bot);
    };
    // ------------------------------------------------------------
    var __upg = function (thisArg, args) {
        var arg0 = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var lbl = bot;
        for (var i = 1; i < args.length; i++) {
            monitor.assert(le(args[i].label, bot));
            lbl = lub(lbl, Label.fromString(args[i].value));
        }
        lbl = lbl.equals(bot) ? Label.top : lbl;
        return new values_1.Value(arg0.value, lub(arg0.label, lbl));
    };
    // ------------------------------------------------------------
    var __dupg = function (thisArg, args) {
        var arg0 = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var lbl = bot;
        for (var i = 1; i < args.length; i++) {
            lbl = lub(lbl, args[i].label);
        }
        return new values_1.Value(arg0.value, lub(arg0.label, lbl));
    };
    // ------------------------------------------------------------
    var __upgs = function (thisArg, args) {
        var obj = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var lbl = bot;
        for (var i = 1; i < args.length; i++) {
            monitor.assert(le(args[i].label, bot));
            lbl = lub(lbl, Label.fromString(args[i].value));
        }
        lbl = lbl.equals(bot) ? Label.top : lbl;
        if (obj.value != undefined && obj.value.struct !== undefined) {
            obj.value.struct = lub(obj.value.struct, lbl);
        }
        return obj;
    };
    // ------------------------------------------------------------
    var __dupgs = function (thisArg, args) {
        var arg0 = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var lbl = bot;
        for (var i = 1; i < args.length; i++) {
            lbl = lub(lbl, args[i].label);
        }
        if (arg0.value != undefined && arg0.value.struct !== undefined) {
            arg0.value.struct = lub(arg0.value.struct, lbl);
        }
        return arg0;
    };
    // ------------------------------------------------------------
    var __upge = function (thisArg, args) {
        var obj = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var ix = args[1] ? args[1] : new values_1.Value(undefined, bot);
        if (obj.value === undefined || obj.value === null) {
            return new values_1.Value(undefined, bot);
        }
        ix = ToString_1.ToString(ix);
        var lbl = bot;
        for (var i = 2; i < args.length; i++) {
            monitor.assert(le(args[i].label, bot));
            lbl = lub(lbl, Label.fromString(args[i].value));
        }
        lbl = lbl.equals(bot) ? Label.top : lbl;
        var prop = obj.value.map.get(ix.value);
        if (prop) {
            prop.existence = lub(prop.existence, lbl);
        }
        return new values_1.Value(undefined, bot);
    };
    // ------------------------------------------------------------
    var __dupge = function (thisArg, args) {
        var obj = args[0] ? args[0] : new values_1.Value(undefined, bot);
        var ix = args[1] ? args[1] : new values_1.Value(undefined, bot);
        if (obj.value === undefined || obj.value === null) {
            return new values_1.Value(undefined, bot);
        }
        ix = ToString_1.ToString(ix);
        var lbl = bot;
        for (var i = 1; i < args.length; i++) {
            lbl = lub(lbl, args[i].label);
        }
        var prop = obj.value.map.get(ix.value);
        if (prop) {
            prop.existence = lub(prop.existence, lbl);
        }
        return new values_1.Value(undefined, bot);
    };
    // ------------------------------------------------------------
    var __declassify = function (thisArg, args) {
        var val = new values_1.Value(args[0] ? args[0].value : undefined, bot);
        return val;
    };
    // ------------------------------------------------------------
    // ------------------------------------------------------------
    var module = {};
    module.GlobalObject = GlobalObject;
    module.allocate = allocate;
    return module;
};

},{"./Conversion/ToNumber":31,"./Conversion/ToString":34,"./constants":50,"./ecma":53,"./function":57,"./label":60,"./values":75,"esprima":19}],59:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label = require("./label");
var values_1 = require("./values");
var ecma = require("./ecma");
var constants = require("./constants");
var function_1 = require("./function");
var ObjectObject_1 = require("./Objects/ObjectObject");
var ArrayObject_1 = require("./Objects/ArrayObject");
var ToNumber_1 = require("./Conversion/ToNumber");
var ToInteger_1 = require("./Conversion/ToInteger");
var ToString_1 = require("./Conversion/ToString");
var IsCallable_1 = require("./Utility/IsCallable");
exports.functor = function (monitor) {
    var Label = label.Label;
    var lub = label.lub;
    var glb = label.glb;
    var le = label.le;
    var bot = Label.bot;
    // ------------------------------------------------------------
    function allocate(host) {
        var jsonObject = new JSONObject(host.JSON);
        return { JSONObject: jsonObject };
    }
    // ------------------------------------------------------------
    // The JSON object, 15.12
    var JSONObject = /** @class */ (function (_super) {
        __extends(JSONObject, _super);
        function JSONObject(host) {
            var _this = _super.call(this) || this;
            _this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, bot);
            _this.Class = 'JSON';
            _this.Extensible = true;
            _this.host = host;
            ecma.DefineFFF(_this, constants.prototype, monitor.instances.ObjectPrototype);
            ecma.DefineTFT(_this, constants.parse, new function_1.BuiltinFunctionObject(parse, 2, _this.host.parse));
            ecma.DefineTFT(_this, constants.stringify, new function_1.BuiltinFunctionObject(stringify, 3, _this.host.stringify));
            return _this;
        }
        return JSONObject;
    }(ecma.Ecma));
    // By the standard, there should be no Call or Construct for JSON object,
    // so throw a TypeError (as SpiderMonkey seem to do)
    JSONObject.prototype.Call = function () {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'JSON is not a function', bot);
    };
    JSONObject.prototype.Construct = function () {
        monitor.Throw(monitor.modules.error.TypeErrorObject, 'JSON is not a constructor', bot);
    };
    // ------------------------------------------------------------
    // parse, 15.12.2
    var parse = function (thisArg, args) {
        if (args[0] === undefined) {
            monitor.Throw(monitor.modules.error.SyntaxErrorObject, 'JSON.parse: No string to parse', bot);
        }
        var JText = ToString_1.ToString(args[0]) || new values_1.Value(undefined, bot);
        var reviver = args[1] || new values_1.Value(undefined, bot);
        var unfiltered = parseAndEvaluate(JText);
        // Do we have any junk characters left? If so, a bad string!
        if (unfiltered.finalIndex <= JText.value.length) {
            monitor.Throw(monitor.modules.error.SyntaxErrorObject, 'JSON.parse: String contains bad symbols in the end', bot);
        }
        var isReviverCallable = IsCallable_1.IsCallable(reviver);
        monitor.context.pushPC(isReviverCallable.label);
        if (isReviverCallable.value) {
            var root = new object.ObjectObject();
            root.DefineOwnProperty(new values_1.Value("", bot), { value: unfiltered,
                writable: true,
                enumerable: true,
                configurable: true,
                label: unfiltered.label
            }, false);
            monitor.context.popPC();
            return Walk(root, new values_1.Value("", lub(unfiltered.label, lub(JText.label, reviver.label))), reviver);
        }
        else {
            monitor.context.popPC();
            return unfiltered;
        }
    };
    // Walk, part of 15.12.2
    var Walk = function (holder, name, reviver) {
        var val = holder.Get(name);
        monitor.context.pushPC(val.label);
        if (val.value && typeof val.value === 'object') {
            val = val.value;
            monitor.context.pushPC(val.label);
            if (val.value.Class === 'Array') {
                var I = new values_1.Value(0, bot);
                var len = val.value.Get(constants.length);
                while (I.value < len.value) {
                    var newElement = Walk(val, ToString_1.ToString(I), reviver);
                    if (newElement === undefined) {
                        val.Delete(ToString_1.ToString(I), false);
                    }
                    else {
                        val.DefineOwnProperty(ToString_1.ToString(I), { value: newElement.value,
                            writable: true,
                            enumerable: true,
                            configurable: true,
                            label: val.label
                        }, false);
                    }
                    I.value++;
                }
            }
            else {
                var keys = [];
                var allKeys = Object.keys(val.value.properties);
                for (var i = 0; i < allKeys.length; i++) {
                    var keyVal = val.GetProperty(new values_1.Value(allKeys[i], bot));
                    if (keyVal.value && keyVal.value.enumerable) {
                        keys.push(new values_1.Value(allKeys[i], bot)); //keyVal.label?
                    }
                }
                for (var i = 0; i < keys.length; i++) {
                    var P = ToString_1.ToString(keys[i]);
                    var newElement = Walk(val, P, reviver);
                    if (newElement === undefined) {
                        val.Delete(P, false);
                    }
                    else {
                        val.DefineOwnProperty(P, { value: newElement.value,
                            writable: true,
                            enumerable: true,
                            configurable: true,
                            label: val.label
                        }, false);
                    }
                }
            }
            monitor.context.popPC();
        }
        monitor.context.popPC();
        return reviver.Call(holder, [name, val]);
    };
    // Inspiration from Douglas Crockford, https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js
    // This is used for the 2nd and 3rd step in parse, 15.12.2
    var parseAndEvaluate = function (text) {
        var currentChar = ' ';
        var currentIndex = 0;
        // From 15.12.1.1, JSONEscapeCharacter :: one of " / \ b f n r t
        var escapeCharacters = {
            '"': '"',
            '/': '/',
            '\\': '\\',
            b: '\b',
            f: '\f',
            n: '\n',
            r: '\r',
            t: '\t'
        };
        // These are not allowed to have in a string!
        var invalidStringCharacters = {};
        for (var i = 0x00; i <= 0x1F; i++) {
            var s = String.fromCharCode(i);
            invalidStringCharacters[s] = s;
        }
        var mkError = function (message) {
            monitor.Throw(monitor.modules.error.SyntaxErrorObject, 'JSON.parse: ' + message, bot);
        };
        var nextChar = function (char) {
            if (char && char !== currentChar) {
                mkError('expected ' + char + ' to match ' + currentChar);
            }
            currentChar = text.charAt(currentIndex);
            currentIndex++;
            return currentChar;
        };
        //JSONWhiteSpace :: <TAB> <CR> <LF> <SP>
        var eatWhiteSpace = function () {
            while (currentChar && currentChar <= ' ') {
                nextChar();
            }
        };
        /* JSONValue :
             JSONNullLiteral
             JSONBooleanLiteral
             JSONObject
             JSONArray
             JSONString
             JSONNumber
        */
        var jsonValue = function () {
            eatWhiteSpace();
            switch (currentChar) {
                case '{':
                    // It must be an object
                    return jsonObject();
                case '[':
                    // It must be an array
                    return jsonArray();
                case '"':
                    // It must be a string
                    return jsonString();
                case '-':
                    // It must be a number
                    return jsonNumber();
                case 'n':
                    // It must be a null literal
                    return jsonNull();
                case 't':
                case 'f':
                    // It must be a boolean literal
                    return jsonBool();
                default:
                    if (currentChar >= '0' && currentChar <= '9') {
                        // It must be a number
                        return jsonNumber();
                    }
                    // Otherwise, something has gone wrong!
                    mkError('Cannot parse the structure!');
            }
        };
        var jsonObject = function () {
            var result = new object.ObjectObject();
            if (currentChar === '{') {
                nextChar('{');
                eatWhiteSpace();
                if (currentChar === '}') {
                    // Enter here and we have an "empty" object
                    nextChar('}');
                    return result;
                }
                while (currentChar) {
                    var key = jsonString();
                    eatWhiteSpace();
                    nextChar(':');
                    if (result.hasOwnProperty(key)) {
                        mkError('Bad object, duplicate key ' + key);
                    }
                    result.DefineOwnProperty(new values_1.Value(key, bot), { value: jsonValue(),
                        writable: true,
                        enumerable: true,
                        configurable: true,
                        label: bot
                    }, false);
                    eatWhiteSpace();
                    if (currentChar === '}') {
                        nextChar('}');
                        return result;
                    }
                    nextChar(',');
                    eatWhiteSpace();
                }
            }
            mkError('Malformed object');
        };
        var jsonArray = function () {
            var result = [];
            if (currentChar === '[') {
                nextChar('[');
                eatWhiteSpace();
                if (currentChar === ']') {
                    // Enter here and we have an empty array..
                    nextChar(']');
                    return ArrayObject_1.ArrayObject.fromValueArray(result);
                }
                while (currentChar) {
                    result.push(jsonValue());
                    eatWhiteSpace();
                    if (currentChar === ']') {
                        // Enter here and we are done..
                        nextChar(']');
                        for (var i = 0; i < result.length; i++) {
                            result[i] = new values_1.Value(result[i], bot);
                        }
                        return ArrayObject_1.ArrayObject.fromValueArray(result);
                    }
                    nextChar(','); // If we are not done, we expect a ','
                    eatWhiteSpace();
                }
            }
            mkError('Could not parse the array');
        };
        /*
          JSONString :: " JSONStringCharacters_opt "
          JSONStringCharacters :: JSONStringCharacter JSONStringCharacters_opt
          JSONStringCharacter :: SourceCharacter but not one of " or \ or U+0000 through U+001F \ JSONEscapeSequence
          JSONEscapeSequence :: JSONEscapeCharacter UnicodeEscapeSequence
         */
        var jsonString = function () {
            var result = "";
            if (currentChar === '"') {
                while (nextChar()) {
                    if (currentChar === '"') {
                        nextChar();
                        return result;
                    }
                    // Check if the current character is an invalid string
                    if (invalidStringCharacters[currentChar]) {
                        mkError("Invalid character in string");
                    }
                    if (currentChar === '\\') {
                        nextChar();
                        if (currentChar === 'u') {
                            var hexValue = 0;
                            for (var i = 0; i < 4; i++) {
                                var hex = parseInt(nextChar(), 16);
                                if (!isFinite(hex)) {
                                    break;
                                }
                                hexValue = hexValue * 16 + hex;
                            }
                            result += String.fromCharCode(hexValue);
                        }
                        else if (typeof escapeCharacters[currentChar] === 'string') {
                            result += escapeCharacters[currentChar];
                        }
                        else {
                            break;
                        }
                    }
                    else {
                        result += currentChar;
                    }
                }
            }
            mkError('Bad input string');
        };
        // JSONNumber :: -_opt DecimalIntegerLiteral JSONFraction_opt ExponentPart_opt
        var jsonNumber = function () {
            var result = "", checkOctal = false, checkFloat = false;
            if (currentChar === '-') {
                result += currentChar;
                nextChar('-');
            }
            if (currentChar === '0') {
                checkOctal = true;
            }
            // Get all the numbers
            while (currentChar >= '0' && currentChar <= '9') {
                result += currentChar;
                nextChar();
            }
            if (checkOctal && result.length > 1) {
                mkError("JSON.parse: Numbers cannot start with a 0");
            }
            // Check if it is a float
            if (currentChar === '.') {
                result += currentChar;
                checkFloat = true;
                // Get all the remaining numbers in the float
                while (nextChar() && currentChar >= '0' && currentChar <= '9') {
                    result += currentChar;
                    checkFloat = false;
                }
            }
            if (checkFloat) {
                mkError("JSON.parse: Number with nothing after the decimal");
            }
            if (currentChar === 'e' || currentChar === 'E') {
                result += currentChar;
                nextChar();
                if (currentChar === '-' || currentChar === '+') {
                    result += currentChar;
                    nextChar();
                }
                while (currentChar >= '0' && currentChar <= '9') {
                    result += currentChar;
                    nextChar();
                }
            }
            var num = +result; // Nasty conversion. :)
            if (!isFinite(num)) {
                mkError('Bad number, not finite');
            }
            return num;
        };
        // JSONNullLiteral :: NullLiteral
        var jsonNull = function () {
            nextChar('n');
            nextChar('u');
            nextChar('l');
            nextChar('l');
            return null;
        };
        // JSONBooleanLiteral :: BooleanLiteral
        var jsonBool = function () {
            switch (currentChar) {
                case 't':
                    nextChar('t');
                    nextChar('r');
                    nextChar('u');
                    nextChar('e');
                    return true;
                case 'f':
                    nextChar('f');
                    nextChar('a');
                    nextChar('l');
                    nextChar('s');
                    nextChar('e');
                    return false;
                default:
                    mkError('Could not deduce a boolean');
            }
        };
        if (text.value) {
            var textLabel = text.label;
            text = text.value;
            var res = new values_1.Value(jsonValue(), textLabel);
            eatWhiteSpace(); // Eat all trailing white spaces
            res.finalIndex = currentIndex; // This is needed to know if we have some garbage at the end of the string
            return res;
        }
        else {
            mkError('Bad format on input');
        }
    };
    // ------------------------------------------------------------
    // stringify, 15.12.3
    var stringify = function (thisArg, args) {
        // These are used for cycle detection
        var JA_counter = 0;
        var JO_counter = 0;
        //-------------------------------------------
        var stack = [];
        var indent = "";
        var PropertyList, ReplacerFunction;
        var gap = "";
        var value = args[0] || new values_1.Value(undefined, bot);
        var replacer = args[1] || new values_1.Value(undefined, bot);
        var space = args[2] || new values_1.Value(undefined, bot);
        var retLabel = lub(value.label, lub(replacer.label, space.label));
        monitor.context.pushPC(replacer.label);
        if (typeof replacer.value === 'object' || typeof replacer.value === 'function') {
            if (IsCallable_1.IsCallable(replacer).value) {
                ReplacerFunction = replacer;
            }
            else if (replacer.value && replacer.value.Class === 'Array') {
                PropertyList = [];
                var initialReplacerLength = replacer.value.properties.length;
                for (var i = 0; i < initialReplacerLength; i++) {
                    var item = undefined;
                    var v = replacer.Get(new values_1.Value(i, bot));
                    if (v.value !== undefined) {
                        if (typeof v.value === 'string') {
                            item = v;
                        }
                        else if (typeof v.value === 'number') {
                            item = ToString_1.ToString(v);
                        }
                        else if (typeof v.value === 'object') {
                            if (v.value && (v.value.Class === 'String' || v.value.Class === 'Number')) {
                                item = ToString_1.ToString(v);
                            }
                        }
                        if (item !== undefined) {
                            var itemNotInArray = true;
                            for (var j = 0; j < PropertyList.length; j++) {
                                if (item.value === PropertyList[j].value) {
                                    itemNotInArray = false;
                                    break;
                                }
                            }
                            if (itemNotInArray) {
                                PropertyList.push(item);
                            }
                        }
                    }
                }
            }
        }
        monitor.context.popPC();
        monitor.context.pushPC(space.label);
        if (typeof space.value === 'object') {
            if (space.value.Class === 'Number') {
                space = ToNumber_1.ToNumber(space);
            }
            else if (space.value.Class === 'String') {
                space = ToString_1.ToString(space);
            }
        }
        if (typeof space.value === 'number') {
            var intSpace = ToInteger_1.ToInteger(space);
            if (intSpace.value > 10) {
                space = new values_1.Value(10, space.label);
            }
            else {
                space = intSpace;
            }
            for (var i = 0; i < space.value; i++) {
                gap = gap + " ";
            }
        }
        else if (typeof space.value === 'string') {
            if (space.value.length <= 10) {
                gap = space.value;
            }
            else {
                gap = space.value.substring(0, 10);
            }
        }
        // Leave the last else, gap will be empty string if none of the above has been hit
        monitor.context.popPC(); // Pop space.label from the PC stack
        var wrapper = new ObjectObject_1.ObjectObject();
        wrapper.DefineOwnProperty(new values_1.Value("", bot), { value: value.value,
            writable: true,
            enumerable: true,
            configurable: true,
            label: value.label
        }, false);
        var Str = function (key, holder) {
            var value = holder.Get(key);
            retLabel = lub(retLabel, value.label);
            monitor.context.pushPC(value.label);
            if (value.value && typeof value.value === 'object') {
                var toJSON = value.Get(new values_1.Value("toJSON", bot));
                if (IsCallable_1.IsCallable(toJSON).value) {
                    value = toJSON.Call(value, [key]);
                }
            }
            monitor.context.popPC(); // As it is being pushed again later, is this needed?
            if (ReplacerFunction) {
                monitor.context.pushPC(ReplacerFunction.label);
                if (ReplacerFunction.value) {
                    value = ReplacerFunction.Call(holder, [key, value]);
                }
                monitor.context.popPC();
            }
            monitor.context.pushPC(value.label);
            if (value.value && typeof value.value === 'object') {
                if (value.value.Class === 'Number') {
                    value = ToNumber_1.ToNumber(value);
                }
                else if (value.value.Class === 'String') {
                    value = ToString_1.ToString(value);
                }
                else if (value.value.Class === 'Boolean') {
                    value = new values_1.Value(value.value.PrimitiveValue.valueOf(), retLabel);
                }
            }
            if (value.value === null) {
                monitor.context.popPC();
                return new values_1.Value("null", retLabel);
            }
            if (value.value === true) {
                monitor.context.popPC();
                return new values_1.Value("true", retLabel);
            }
            if (value.value === false) {
                monitor.context.popPC();
                return new values_1.Value("false", retLabel);
            }
            if (typeof value.value === 'string') {
                var res = Quote(value);
                monitor.context.popPC();
                return res;
            }
            if (typeof value.value === 'number') {
                if (isFinite(value.value)) {
                    var res = ToString_1.ToString(value);
                    monitor.context.popPC();
                    return res;
                }
                monitor.context.popPC();
                return new values_1.Value("null", retLabel);
            }
            if (typeof value.value === 'object' && !IsCallable_1.IsCallable(value).value) {
                if (value.value.Class === 'Array') {
                    var res = JA(value);
                    monitor.context.popPC();
                    return res;
                }
                var res = JO(value);
                monitor.context.popPC();
                return res;
            }
            monitor.context.popPC();
            return new values_1.Value(undefined, retLabel);
        };
        var Quote = function (value) {
            var product = "\"";
            for (var i = 0; i < value.value.length; i++) {
                var C = value.value[i];
                var cCodePointValue = C.codePointAt(0);
                var spaceCodePointValue = (" ").codePointAt(0);
                if (C === "\"" || C === "\\") {
                    product += "\\";
                    product += C;
                }
                else if (C === "\b" || C === "\f" || C === "\n" || C === "\r" || C === "\t") {
                    product += "\\";
                    var abbrev;
                    if (C === "\b")
                        abbrev = "b";
                    else if (C === "\f")
                        abbrev = "f";
                    else if (C === "\n")
                        abbrev = "n";
                    else if (C === "\r")
                        abbrev = "r";
                    else
                        abbrev = "t";
                    product += abbrev;
                }
                else if (cCodePointValue < spaceCodePointValue) {
                    product += "\\";
                    product += "u";
                    var hex = cCodePointValue.toString(16);
                    for (var j = hex.length; j < 4; j++) {
                        hex = "0" + hex;
                    }
                    product += hex;
                }
                else {
                    product += C;
                }
            }
            product += "\"";
            return new values_1.Value(product, lub(monitor.context.effectivePC, value.label));
        };
        var JO = function (value) {
            var JO_key = new values_1.Value("JO_property", bot);
            if (!value.Get(JO_key).value) {
                JO_counter++;
                value.DefineOwnProperty(JO_key, { value: new values_1.Value(JO_counter, bot),
                    writable: false,
                    enumerable: false,
                    configurable: false,
                    label: bot
                }, false);
            }
            else {
                checkCycle(JO_key, value);
            }
            stack.push(value);
            var stepback = indent;
            indent = indent + gap;
            if (PropertyList !== undefined) {
                var K = PropertyList;
            }
            else {
                var K = [];
                var allKeys = Object.keys(value.value.properties);
                for (var i = 0; i < allKeys.length; i++) {
                    var keyVal = value.GetProperty(new values_1.Value(allKeys[i], bot));
                    if (keyVal.value && keyVal.value.enumerable) {
                        K.push(new values_1.Value(allKeys[i], retLabel));
                    }
                }
            }
            var partial = [];
            for (var i = 0; i < K.length; i++) {
                var P = K[i];
                var strP = Str(P, value);
                if (strP && strP.value !== undefined) {
                    var member = Quote(P);
                    member.value += ":";
                    if (gap !== "") {
                        member.value += ' ';
                    }
                    member.value += strP.value;
                    partial.push(member);
                }
            }
            var final;
            if (partial.length === 0) {
                final = "{}";
            }
            else {
                var properties = "";
                if (gap === "") {
                    for (var i = 0; i < partial.length - 1; i++) {
                        properties += partial[i].value + ',';
                        retLabel = lub(retLabel, partial[i].label);
                    }
                    properties += partial[partial.length - 1].value;
                    retLabel = lub(retLabel, partial[partial.length - 1].label);
                    final = '{' + properties + '}';
                }
                else {
                    var separator = ",\n" + indent;
                    for (var i = 0; i < partial.length - 1; i++) {
                        properties += partial[i].value + separator;
                        retLabel = lub(retLabel, partial[i].label);
                    }
                    properties += partial[partial.length - 1].value;
                    retLabel = lub(retLabel, partial[partial.length - 1].label);
                    final = '{\n' + indent + properties + '\n' + stepback + '}';
                }
            }
            // Pop and remove JO_property
            var v = stack.pop();
            v.Delete(JO_key);
            indent = stepback;
            return new values_1.Value(final, retLabel);
        };
        var JA = function (value) {
            var JA_key = new values_1.Value("JA_property", bot);
            if (!value.Get(JA_key).value) {
                JA_counter++;
                value.DefineOwnProperty(JA_key, { value: new values_1.Value(JA_counter, bot),
                    writable: false,
                    enumerable: false,
                    configurable: false,
                    label: bot
                }, false);
            }
            else {
                checkCycle(JA_key, value);
            }
            stack.push(value);
            var stepback = indent;
            indent = indent + gap;
            var partial = [];
            var len = value.Get(new values_1.Value('length', bot));
            var index = new values_1.Value(0, bot);
            while (index.value < len.value) {
                var strP = Str(ToString_1.ToString(index), value);
                if (!strP || strP.value === undefined) {
                    partial.push(new values_1.Value("null", retLabel));
                }
                else {
                    partial.push(strP);
                    retLabel = lub(retLabel, strP.label);
                }
                index.value++;
            }
            var final;
            if (partial.length === 0) {
                final = "[]";
            }
            else {
                var properties = "";
                if (gap === "") {
                    for (var i = 0; i < partial.length - 1; i++) {
                        properties += partial[i].value + ',';
                        retLabel = lub(retLabel, partial[i].label);
                    }
                    properties += partial[partial.length - 1].value;
                    retLabel = lub(retLabel, partial[partial.length - 1].label);
                    final = '[' + properties + ']';
                }
                else {
                    var separator = ",\n" + indent;
                    for (var i = 0; i < partial.length - 1; i++) {
                        properties += partial[i].value + separator;
                        retLabel = lub(retLabel, partial[i].label);
                    }
                    properties += partial[partial.length - 1].value;
                    retLabel = lub(retLabel, partial[partial.length - 1].label);
                    final = '[\n' + indent + properties + '\n' + stepback + ']';
                }
            }
            // Pop and remove property of JA_key
            var v = stack.pop();
            v.Delete(JA_key);
            indent = stepback;
            return new values_1.Value(final, retLabel);
        };
        var checkCycle = function (key, value) {
            for (var i = 0; i < stack.length; i++) {
                if (value.Get(key).value === stack[i].Get(key).value) {
                    monitor.Throw(monitor.modules.error.TypeErrorObject, 'JSON.stringify: Cyclic structure', bot);
                }
            }
        };
        return Str(new values_1.Value("", bot), wrapper);
    };
    // ------------------------------------------------------------
    var module = {};
    module.allocate = allocate;
    return module;
};

},{"./Conversion/ToInteger":30,"./Conversion/ToNumber":31,"./Conversion/ToString":34,"./Objects/ArrayObject":38,"./Objects/ObjectObject":42,"./Utility/IsCallable":49,"./constants":50,"./ecma":53,"./function":57,"./label":60,"./values":75}],60:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// -------------------------------------------------------------------------- 
var Top;
(function (Top) {
    Top[Top["Top"] = 0] = "Top";
})(Top || (Top = {}));
;
var Label = /** @class */ (function () {
    function Label(p) {
        var e_1, _a;
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        if (p === Top.Top) {
            this.principals = Top.Top;
            return;
        }
        this.principals = new Set(rest);
        if (typeof p === "string") {
            this.principals.add(p);
            return;
        }
        if (typeof p !== 'undefined') {
            try {
                for (var p_1 = __values(p), p_1_1 = p_1.next(); !p_1_1.done; p_1_1 = p_1.next()) {
                    var x = p_1_1.value;
                    this.principals.add(x);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (p_1_1 && !p_1_1.done && (_a = p_1.return)) _a.call(p_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    }
    // -------------------------------------------------------------------------- 
    Label.fromString = function (l) {
        return new Label(l.split(','));
    };
    // -------------------------------------------------------------------------- 
    Label.fromURL = function (l) {
        var re = new RegExp('http://[^/]*/');
        var res = re.exec(l);
        if (res === null) {
            return new Label(l.split(','));
        }
        else {
            return new Label([res[0]]);
        }
    };
    // -------------------------------------------------------------------------- 
    Label.prototype.lub = function () {
        var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.principals === Top.Top) {
            return this;
        }
        try {
            for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                var l = args_1_1.value;
                if (l.principals === Top.Top) {
                    this.principals = Top.Top;
                    return this;
                }
                try {
                    for (var _f = __values(l.principals), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var p = _g.value;
                        this.principals.add(p);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var bad_principals = ['global.navigator.plugins',
            'global.navigator.maxTouchPoints',
            'global.Intl.DateTimeFormat',
            'global.navigator.hardwareConcurrency',
            'global.navigator.deviceMemory',
            'global.screen.colorDepth',
            'global.navigator.userAgent',
            'global.navigator.appName',
            'global.navigator.language',
            'global.navigator.languages',
            '.toDataURL',
            'getContext.getExtension',
            'global.screen.availWidth',
            'global.screen.availHeight',
            'global.screen.width',
            'global.screen.height'
        ];
        var bad_count = 0;
        var bad_limit = 7;
        try {
            for (var _h = __values(this.principals), _j = _h.next(); !_j.done; _j = _h.next()) {
                var p = _j.value;
                try {
                    for (var bad_principals_1 = __values(bad_principals), bad_principals_1_1 = bad_principals_1.next(); !bad_principals_1_1.done; bad_principals_1_1 = bad_principals_1.next()) {
                        var bp = bad_principals_1_1.value;
                        if (p.includes(bp)) {
                            bad_count += 1;
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (bad_principals_1_1 && !bad_principals_1_1.done && (_d = bad_principals_1.return)) _d.call(bad_principals_1);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (bad_count > bad_limit) {
            var err = "";
            try {
                for (var _k = __values(this.principals), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var p = _l.value;
                    err += p + ", ";
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_e = _k.return)) _e.call(_k);
                }
                finally { if (e_6) throw e_6.error; }
            }
            throw "Bad labels: " + err;
        }
        return this;
    };
    // -------------------------------------------------------------------------- 
    Label.prototype.glb = function () {
        var e_7, _a, e_8, _b;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        try {
            for (var args_2 = __values(args), args_2_1 = args_2.next(); !args_2_1.done; args_2_1 = args_2.next()) {
                var l = args_2_1.value;
                if (l.principals === Top.Top) {
                    continue;
                }
                if (this.principals === Top.Top) {
                    this.principals = new Set(l.principals);
                    continue;
                }
                try {
                    for (var _c = __values(l.principals), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var p = _d.value;
                        this.principals.add(p);
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (args_2_1 && !args_2_1.done && (_a = args_2.return)) _a.call(args_2);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return this;
    };
    // -------------------------------------------------------------------------- 
    Label.prototype.equals = function (l) {
        var e_9, _a, e_10, _b;
        var A = this.principals;
        var B = l.principals;
        if (A === Top.Top || B === Top.Top) {
            return A === B;
        }
        try {
            for (var A_1 = __values(A), A_1_1 = A_1.next(); !A_1_1.done; A_1_1 = A_1.next()) {
                var p = A_1_1.value;
                if (!B.has(p)) {
                    return false;
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (A_1_1 && !A_1_1.done && (_a = A_1.return)) _a.call(A_1);
            }
            finally { if (e_9) throw e_9.error; }
        }
        try {
            for (var B_1 = __values(B), B_1_1 = B_1.next(); !B_1_1.done; B_1_1 = B_1.next()) {
                var p = B_1_1.value;
                if (!B.has(p)) {
                    return false;
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (B_1_1 && !B_1_1.done && (_b = B_1.return)) _b.call(B_1);
            }
            finally { if (e_10) throw e_10.error; }
        }
        return true;
    };
    // -------------------------------------------------------------------------- 
    Label.prototype.le = function (l) {
        var A = this.principals;
        var B = l.principals;
        if (A === Top.Top) {
            return false;
        }
        if (B === Top.Top) {
            return true;
        }
        for (var p in A) {
            if (!B.has(p)) {
                return false;
            }
        }
        return true;
    };
    // -------------------------------------------------------------------------- 
    Label.prototype.toString = function () {
        var str = 'T';
        if (this.principals !== Top.Top) {
            str = Array.from(this.principals).join(', ');
        }
        return "<" + str + ">";
    };
    Label.bot = new Label();
    Label.top = new Label(Top.Top);
    return Label;
}());
exports.Label = Label;
// -------------------------------------------------------------------------- 
exports.top = new Label(Top.Top);
exports.bot = new Label();
// -------------------------------------------------------------------------- 
function le(l1, l2) {
    return (l1.le(l2));
}
exports.le = le;
function lub() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var l = new Label();
    l.lub.apply(l, args);
    return l;
}
exports.lub = lub;
function glb() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var l = new Label(Top.Top);
    l.glb.apply(l, args);
    return l;
}
exports.glb = glb;

},{}],61:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label = require("./label");
var values_1 = require("./values");
var ecma = require("./ecma");
var constants = require("./constants");
var function_1 = require("./function");
var ToNumber_1 = require("./Conversion/ToNumber");
// 15.8
exports.functor = function (monitor) {
    var Ecma = ecma.Ecma;
    var Label = label.Label;
    var lub = label.lub;
    var le = label.le;
    var bot = Label.bot;
    // ------------------------------------------------------------
    function allocate(host) {
        var mathObject = new MathObject(host.Math);
        return { MathObject: mathObject };
    }
    // ------------------------------------------------------------
    // The Math Object, 15.8.2
    var MathObject = /** @class */ (function (_super) {
        __extends(MathObject, _super);
        function MathObject(host) {
            var _this_1 = _super.call(this) || this;
            _this_1.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, bot);
            _this_1.Class = 'Math';
            // not mandated by standard
            _this_1.Extensible = true;
            _this_1.host = host;
            ecma.DefineFFF(_this_1, constants.length, 1);
            ecma.DefineFFF(_this_1, constants.prototype, monitor.instances.ObjectPrototype);
            ecma.DefineFFF(_this_1, constants.E, _this_1.host.E);
            ecma.DefineFFF(_this_1, constants.LN10, _this_1.host.LN10);
            ecma.DefineFFF(_this_1, constants.LN2, _this_1.host.LN2);
            ecma.DefineFFF(_this_1, constants.LOG2E, _this_1.host.LOG2E);
            ecma.DefineFFF(_this_1, constants.LOG10E, _this_1.host.LOG10E);
            ecma.DefineFFF(_this_1, constants.PI, _this_1.host.PI);
            ecma.DefineFFF(_this_1, constants.SQRT1_2, _this_1.host.SQRT1_2);
            ecma.DefineFFF(_this_1, constants.SQRT2, _this_1.host.SQRT2);
            ecma.DefineTFT(_this_1, constants.abs, new function_1.BuiltinFunctionObject(abs, 1, _this_1.host.abs));
            ecma.DefineTFT(_this_1, constants.acos, new function_1.BuiltinFunctionObject(acos, 1, _this_1.host.acos));
            ecma.DefineTFT(_this_1, constants.asin, new function_1.BuiltinFunctionObject(asin, 1, _this_1.host.asin));
            ecma.DefineTFT(_this_1, constants.atan, new function_1.BuiltinFunctionObject(atan, 1, _this_1.host.atan));
            ecma.DefineTFT(_this_1, constants.atan2, new function_1.BuiltinFunctionObject(atan2, 2, _this_1.host.atan2));
            ecma.DefineTFT(_this_1, constants.ceil, new function_1.BuiltinFunctionObject(ceil, 1, _this_1.host.ceil));
            ecma.DefineTFT(_this_1, constants.cos, new function_1.BuiltinFunctionObject(cos, 1, _this_1.host.cos));
            ecma.DefineTFT(_this_1, constants.exp, new function_1.BuiltinFunctionObject(exp, 1, _this_1.host.exp));
            ecma.DefineTFT(_this_1, constants.floor, new function_1.BuiltinFunctionObject(floor, 1, _this_1.host.floor));
            ecma.DefineTFT(_this_1, constants.log, new function_1.BuiltinFunctionObject(log, 1, _this_1.host.log));
            ecma.DefineTFT(_this_1, constants.max, new function_1.BuiltinFunctionObject(max, 2, _this_1.host.max));
            ecma.DefineTFT(_this_1, constants.min, new function_1.BuiltinFunctionObject(min, 2, _this_1.host.min));
            ecma.DefineTFT(_this_1, constants.pow, new function_1.BuiltinFunctionObject(pow, 2, _this_1.host.pow));
            ecma.DefineTFT(_this_1, constants.random, new function_1.BuiltinFunctionObject(random, 0, _this_1.host.random));
            ecma.DefineTFT(_this_1, constants.round, new function_1.BuiltinFunctionObject(round, 1, _this_1.host.round));
            ecma.DefineTFT(_this_1, constants.sin, new function_1.BuiltinFunctionObject(sin, 1, _this_1.host.sin));
            ecma.DefineTFT(_this_1, constants.sqrt, new function_1.BuiltinFunctionObject(sqrt, 1, _this_1.host.sqrt));
            ecma.DefineTFT(_this_1, constants.tan, new function_1.BuiltinFunctionObject(tan, 1, _this_1.host.tan));
            return _this_1;
        }
        return MathObject;
    }(Ecma));
    // ------------------------------------------------------------
    // abs, 15.8.2.1
    var abs = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // acos, 15.8.2.2
    var acos = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // asin, 15.8.2.3
    var asin = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // atan, 15.8.2.4
    var atan = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // atan2, 15.8.2.5
    var atan2 = function (thisArg, args) {
        var _this = thisArg.value;
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        var y = args[1] ? ToNumber_1.ToNumber(args[1]) : new values_1.Value(undefined, bot);
        return new values_1.Value(_this.host(x.value, y.value), lub(x.label, y.label));
    };
    // ------------------------------------------------------------
    // ceil, 15.8.2.6
    var ceil = function (thisArg, args) {
        var _this = thisArg.value;
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(_this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // cos, 15.8.2.7
    var cos = function (thisArg, args) {
        console.log(thisArg);
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // exp, 15.8.2.8
    var exp = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // floor, 15.8.2.9
    var floor = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // log, 15.8.2.10
    var log = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // max, 15.8.2.11
    var max = function (thisArg, args) {
        if (args.length === 0)
            return new values_1.Value(Number.NEGATIVE_INFINITY, bot);
        var myArgs = [];
        var l = bot;
        for (var i = 0; i < args.length; i++) {
            myArgs[i] = args[i].value;
            l = lub(l, args[i].label);
        }
        return new values_1.Value(this.host.apply(null, myArgs), l);
    };
    // ------------------------------------------------------------
    // min, 15.8.2.12
    var min = function (thisArg, args) {
        if (args.length === 0)
            return new values_1.Value(Number.POSITIVE_INFINITY, bot);
        var myArgs = [];
        var l = bot;
        for (var i = 0; i < args.length; i++) {
            myArgs[i] = args[i].value;
            l = lub(l, args[i].label);
        }
        return new values_1.Value(this.host.apply(null, myArgs), l);
    };
    // ------------------------------------------------------------
    // pow, 15.8.2.13
    var pow = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        var y = args[1] ? ToNumber_1.ToNumber(args[1]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value, y.value), lub(x.label, y.label));
    };
    // ------------------------------------------------------------
    // random, 15.8.2.14
    var random = function (thisArg, args) {
        return new values_1.Value(this.host(), bot);
    };
    // ------------------------------------------------------------
    // round, 15.8.2.15
    var round = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // sin, 15.8.2.16
    var sin = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // sqrt, 15.8.2.17
    var sqrt = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    // tan, 15.8.2.18
    var tan = function (thisArg, args) {
        var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new values_1.Value(undefined, bot);
        return new values_1.Value(this.host(x.value), x.label);
    };
    // ------------------------------------------------------------
    var module = {};
    module.allocate = allocate;
    return module;
};

},{"./Conversion/ToNumber":31,"./constants":50,"./ecma":53,"./function":57,"./label":60,"./values":75}],62:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("./label");
var values_1 = require("./values");
var context_1 = require("./context");
var prelude = require("./prelude");
var options_1 = require("./options");
var stack_1 = require("./stack");
var FunctionPrototype_1 = require("./Prototypes/FunctionPrototype");
var FunctionConstructor_1 = require("./Constructors/FunctionConstructor");
var ObjectConstructor_1 = require("./Constructors/ObjectConstructor");
var ObjectPrototype_1 = require("./Prototypes/ObjectPrototype");
var BooleanConstructor_1 = require("./Constructors/BooleanConstructor");
var BooleanPrototype_1 = require("./Prototypes/BooleanPrototype");
var ArrayPrototype_1 = require("./Prototypes/ArrayPrototype");
var ArrayConstructor_1 = require("./Constructors/ArrayConstructor");
var NumberPrototype_1 = require("./Prototypes/NumberPrototype");
var NumberConstructor_1 = require("./Constructors/NumberConstructor");
var imports = {
    error: require('./error'),
    string: require('./string'),
    regexp: require('./regexp'),
    date: require('./date'),
    math: require('./math'),
    json: require('./json'),
    global: require('./global'),
    exec: require('./exec')
};
var bot = label_1.Label.bot;
// --------------------------------------------------------------------------
var JSFlowError = /** @class */ (function (_super) {
    __extends(JSFlowError, _super);
    function JSFlowError(msg) {
        return _super.call(this, msg) || this;
    }
    return JSFlowError;
}(Error));
exports.JSFlowError = JSFlowError;
// --------------------------------------------------------------------------
var SecurityError = /** @class */ (function (_super) {
    __extends(SecurityError, _super);
    function SecurityError(msg) {
        return _super.call(this, msg) || this;
    }
    return SecurityError;
}(JSFlowError));
exports.SecurityError = SecurityError;
// --------------------------------------------------------------------------
var FatalError = /** @class */ (function (_super) {
    __extends(FatalError, _super);
    function FatalError(msg) {
        return _super.call(this, msg) || this;
    }
    return FatalError;
}(JSFlowError));
exports.FatalError = FatalError;
// --------------------------------------------------------------------------
var Instances = /** @class */ (function () {
    function Instances(global) {
        // pre-allocates instances, without setting them up due to circularity
        this.FunctionConstructor = new FunctionConstructor_1.FunctionConstructor(global.Function);
        this.FunctionPrototype = new FunctionPrototype_1.FunctionPrototype(Object.getPrototypeOf(global.Function));
        this.ObjectConstructor = new ObjectConstructor_1.ObjectConstructor(global.Object);
        this.ObjectPrototype = new ObjectPrototype_1.ObjectPrototype(Object.getPrototypeOf(global.Object));
        this.BooleanConstructor = new BooleanConstructor_1.BooleanConstructor(global.Boolean);
        this.BooleanPrototype = new BooleanPrototype_1.BooleanPrototype(Object.getPrototypeOf(global.Boolean));
        this.ArrayConstructor = new ArrayConstructor_1.ArrayConstructor(global.Array);
        this.ArrayPrototype = new ArrayPrototype_1.ArrayPrototype(Object.getPrototypeOf(global.Array));
        this.NumberConstructor = new NumberConstructor_1.NumberConstructor(global.Array);
        this.NumberPrototype = new NumberPrototype_1.NumberPrototype(Object.getPrototypeOf(global.Array));
    }
    Instances.prototype.Setup = function () {
        this.FunctionConstructor.Setup();
        this.FunctionPrototype.Setup();
        this.ObjectConstructor.Setup();
        this.ObjectPrototype.Setup();
        this.BooleanConstructor.Setup();
        this.BooleanPrototype.Setup();
        this.ArrayConstructor.Setup();
        this.ArrayPrototype.Setup();
        this.NumberConstructor.Setup();
        this.NumberPrototype.Setup();
    };
    return Instances;
}());
var MonitorBase = /** @class */ (function () {
    // ---
    // constructor
    function MonitorBase(global, print, log, warn, error) {
        this.contextStack = new stack_1.Stack();
        this.initialized = false;
        this.codebuffer = "";
        global.monitor = this;
        this.print = print ? print : console.log;
        this.log = log ? log : console.log;
        this.warn = warn ? warn : console.log;
        this.error = error ? error : console.log;
        this.modules = {};
        var load = [
            'error',
            'string',
            'regexp',
            'date',
            'math',
            'json',
            'global',
            'exec'
        ];
        this.setup(this.modules, load, imports);
        this.options = new options_1.Options();
        this.options.declare('monitor.taintMode', 'boolean', true, 'taint mode');
        this.options.declare('monitor.testMode', 'boolean', false, 'test mode');
        this.options.declare('monitor.observableMode', 'boolean', false, 'observable mode');
        var context = new context_1.Context(null, null, null);
        context.owner = '<monitor>';
        this.contextStack.push(context);
        this.instances = new Instances(global);
        this.instances.Setup();
        this.debug = { active: false };
    }
    Object.defineProperty(MonitorBase.prototype, "context", {
        // ---
        // accessors
        get: function () {
            return this.contextStack.peek();
        },
        enumerable: true,
        configurable: true
    });
    // ---
    // methods
    MonitorBase.prototype.setup = function (target, load, imports) {
        for (var i = 0, len = load.length; i < len; i++) {
            var name = load[i];
            var module = imports[name];
            if (typeof module.functor === 'function') {
                target[name] = module.functor(this);
            }
            else {
                target[name] = module;
            }
        }
    };
    // ---
    MonitorBase.prototype.initialize = function (global) {
        this.debug.active = false;
        var instanceList = [
            this.modules.error,
            this.modules.string,
            this.modules.regexp,
            this.modules.date,
            this.modules.math,
            this.modules.json
        ];
        for (var i = 0, len = instanceList.length; i < len; i++) {
            var instances = instanceList[i].allocate(global);
            prelude.copy(instances, this.instances);
        }
    };
    // ---
    MonitorBase.prototype.running = function () {
        return this.modules.exec.running();
    };
    ;
    // ---
    MonitorBase.prototype.execute = function (code, filename) {
        //console.log(code);
        this.codebuffer += "\n/* new command at " + (new Date().getTime()) + "*/\n";
        this.codebuffer += code;
        if (!this.initialized) {
            // TODO: throw error
        }
        var result = this.modules.exec.executeGlobalCode(code, filename);
        if (result.type === 'throw') {
            console.log("ERROR THROWN: " + this.codebuffer);
            throw new JSFlowError(result.value);
        }
        return result.value;
    };
    // ---
    MonitorBase.prototype.interactive = function (code, filename) {
        return this.modules.exec.executeGlobalCode(code, filename);
    };
    // ---
    MonitorBase.prototype.resume = function () {
        this.debug.active = false;
        return this.modules.exec.resume();
    };
    // ---
    MonitorBase.prototype.step = function () {
        return this.modules.exec.resume();
    };
    // ---
    MonitorBase.prototype.printWorkList = function () {
        monitor.log('context owner: ' + this.context.owner);
        monitor.log(String(this.context.workList));
    };
    // ---
    MonitorBase.prototype.require = function (name) {
        var path = name.split('/');
        var current = this.modules;
        for (var i = 0, len = path.length; i < len; i++) {
            if (current === undefined) {
                break;
            }
            current = current[path[i]];
        }
        if (!current) {
            this.fatal('Module ' + name + ' not found');
        }
        return current;
    };
    // ---
    // TODO: fix proper printing
    MonitorBase.prototype.fatal = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var exc = new FatalError(args.map(function (x) { return JSON.stringify(x); }).join(' '));
        exc.type = 'Fatal';
        throw exc;
    };
    // ---
    MonitorBase.prototype.stop = function (msg) {
        var exc = new Error(msg);
        exc.type = 'Stop';
        throw exc;
    };
    // ---
    MonitorBase.prototype.Throw = function (exc, msg, lbl) {
        this.assert(label_1.le(this.context.effectivePC, this.context.labels.exc), 'throw: effective pc ' + this.context.effectivePC +
            ' not below exception label ' + this.context.labels.exc);
        this.offendingTrace = this.stackTrace();
        throw new values_1.Value(new exc(new values_1.Value(msg, lbl)), lbl);
    };
    // ---
    MonitorBase.prototype.stackTrace = function () {
        return new StackTrace(this.contextStack.toArray());
    };
    // ---
    MonitorBase.prototype.securityError = function (message) {
        if (this.options.get('monitor.observableMode')) {
            this.warn("[Security violation] " + message);
        }
        else {
            var exc = new SecurityError(message);
            throw exc;
        }
    };
    // ---
    MonitorBase.prototype.assert = function (b, msg) {
        if (!b)
            this.securityError(msg);
    };
    // lifts exceptions that 
    // 1. are not JSFlow internal exceptions (indicated by subclass of JSFlowError)
    // 2. have a a JSFlow modeled counterpart
    // otherwise returns
    MonitorBase.prototype.tryRethrow = function (e, Throw) {
        if (e instanceof JSFlowError) {
            throw e;
        }
        if (e instanceof values_1.Value) {
            throw e;
        }
        if (Throw && this.modules.error.nativeTable[e.name] !== undefined) {
            this.Throw(this.modules.error.nativeTable[e.name], e.stack, bot);
        }
    };
    return MonitorBase;
}());
exports.MonitorBase = MonitorBase;
// --------------------------------------------------------------------------
var Monitor = /** @class */ (function (_super) {
    __extends(Monitor, _super);
    function Monitor(global, print, log, warn, error) {
        var _this = _super.call(this, global, print, log, warn, error) || this;
        _this.initialize(global);
        return _this;
    }
    return Monitor;
}(MonitorBase));
exports.Monitor = Monitor;
Monitor.prototype.initialize = function (global) {
    MonitorBase.prototype.initialize.call(this, global);
    var globalInstance = this.modules.global.allocate(global);
    prelude.copy(globalInstance, this.instances);
    this.modules.exec.initialize();
};
// --------------------------------------------------------------------------- 
var StackTrace = /** @class */ (function () {
    function StackTrace(stack) {
        this.trace = [];
        for (var i = 0, len = stack.length; i < len; i++) {
            var context = stack[i];
            var stmt = context.currentStatement;
            if (stmt === undefined) {
                break;
            }
            var loc = stmt.loc;
            var source = loc.source;
            this.trace.push({ owner: context.owner, source: source, loc: loc.start, stmt: stmt });
        }
    }
    return StackTrace;
}());
StackTrace.prototype.toString = function () {
    if (this.trace.length === 0) {
        return '';
    }
    var result;
    var len = this.trace.length;
    // last entry contains offending command
    var last = this.trace[len - 1];
    result = last.source + ':' + last.loc.line + ':' + last.loc.column + '\n';
    result = result + '    ' + escodegen.generate(last.stmt) + '\n\n';
    for (var i = len - 2; i >= 0; i--) {
        var tr = this.trace[i];
        if (tr.owner) {
            result = result + 'at ' + tr.owner + ' ';
        }
        result = result + '(' + tr.source + ':' + tr.loc.line + ':' + tr.loc.column + ')\n';
    }
    return result;
};

},{"./Constructors/ArrayConstructor":23,"./Constructors/BooleanConstructor":24,"./Constructors/FunctionConstructor":25,"./Constructors/NumberConstructor":26,"./Constructors/ObjectConstructor":27,"./Prototypes/ArrayPrototype":43,"./Prototypes/BooleanPrototype":44,"./Prototypes/FunctionPrototype":45,"./Prototypes/NumberPrototype":46,"./Prototypes/ObjectPrototype":47,"./context":51,"./date":52,"./error":55,"./exec":56,"./global":58,"./json":59,"./label":60,"./math":61,"./options":63,"./prelude":65,"./regexp":66,"./stack":68,"./string":69,"./values":75}],63:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var Option = /** @class */ (function () {
    function Option(type, val, desc) {
        this.type = type;
        this.set(val);
        this.def = this.value;
        this.description = desc;
    }
    Option.prototype.set = function (val) {
        var v = String(val);
        if (this.type === 'string') {
            this.value = v;
        }
        else if (this.type === 'boolean') {
            this.value = v === 'true' || v === '1';
        }
        else if (this.type === 'number') {
            this.value = Number(v);
        }
    };
    Option.prototype.getDefault = function () {
        return this.def;
    };
    Option.prototype.valueOf = function () {
        return this.value;
    };
    Option.prototype.toString = function () {
        return String(this.value);
    };
    return Option;
}());
// -------------------------------------------------------------
// Options
var Options = /** @class */ (function () {
    function Options() {
        this.options = [];
    }
    Options.prototype.declare = function (name, type, def, desc) {
        var description = desc ? desc : name;
        this.options[name] = new Option(type, def, description);
    };
    Options.prototype.has = function (name) {
        return this.options[name] !== undefined;
    };
    Options.prototype.get = function (name) {
        return this.options[name].valueOf();
    };
    Options.prototype.getOption = function (name) {
        return this.options[name];
    };
    Options.prototype.set = function (name, value) {
        this.options[name].set(value);
    };
    Options.prototype.keys = function () {
        var res = [];
        for (var x in this.options) {
            if (this.options.hasOwnProperty(x)) {
                res.push(x);
            }
        }
        return res;
    };
    return Options;
}());
exports.Options = Options;

},{}],64:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var escodegen_1 = require("escodegen");
exports.pretty = escodegen_1.generate;

},{"escodegen":2}],65:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
function inherits(tgt, src) {
    for (var x in src.prototype) {
        if (src.prototype.hasOwnProperty(x) &&
            !tgt.prototype.hasOwnProperty(x)) {
            tgt.prototype[x] = src.prototype[x];
        }
    }
}
exports.inherits = inherits;
function copy(src, tgt) {
    for (var x in src) {
        if (src.hasOwnProperty(x)) {
            tgt[x] = src[x];
        }
    }
}
exports.copy = copy;

},{}],66:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label = require("./label");
var values_1 = require("./values");
var ecma = require("./ecma");
var constants = require("./constants");
var function_1 = require("./function");
var ArrayObject_1 = require("./Objects/ArrayObject");
var HasInstance_1 = require("./HasInstance");
var ToInteger_1 = require("./Conversion/ToInteger");
var ToString_1 = require("./Conversion/ToString");
exports.functor = function (monitor) {
    var Label = label.Label;
    var lub = label.lub;
    var glb = label.glb;
    var le = label.le;
    var bot = Label.bot;
    // ------------------------------------------------------------
    function allocate(host) {
        var regExpConstructor = new RegExpConstructor(host.RegExp);
        var regExpPrototype = regExpConstructor._proto;
        return { RegExpConstructor: regExpConstructor,
            RegExpPrototype: regExpPrototype
        };
    }
    // ------------------------------------------------------------
    // The RegExp Constructor, 15.10.5
    var RegExpConstructor = /** @class */ (function (_super) {
        __extends(RegExpConstructor, _super);
        function RegExpConstructor(host) {
            var _this = _super.call(this) || this;
            _this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, bot);
            _this.Class = 'Function';
            // not mandated by standard
            _this.Extensible = true;
            _this.host = host;
            _this._proto = new RegExpPrototype(_this, host.prototype);
            ecma.DefineFFF(_this, constants.length, 2);
            ecma.DefineFFF(_this, constants.prototype, _this._proto);
            return _this;
        }
        return RegExpConstructor;
    }(ecma.Ecma));
    RegExpConstructor.prototype.HasInstance = HasInstance_1.HasInstance;
    // 15.10.3.1
    RegExpConstructor.prototype.Call = function (thisArg, args) {
        var pattern = args[0] || new values_1.Value(undefined, bot);
        var flags = args[1] || new values_1.Value(undefined, bot);
        if (pattern.value &&
            typeof pattern.value === 'object' &&
            pattern.value.Class === 'RegExp' &&
            flags.value === undefined) {
            return pattern;
        }
        return RegExpConstructor.prototype.Construct(args);
    };
    // 15.10.4.1
    RegExpConstructor.prototype.Construct = function (args) {
        var c = monitor.context;
        var pattern = args[0] || new values_1.Value(undefined, bot);
        var flags = args[1] || new values_1.Value(undefined, bot);
        var P = "";
        var F = "";
        var l = lub(pattern.label, flags.label);
        c.pushPC(l);
        if (pattern.value &&
            typeof pattern.value === 'object' &&
            pattern.value.Class === 'RegExp') {
            if (flags.value === undefined) {
                var rx = pattern.value.PrimitiveValue;
                P = rx.source;
                F = (rx.global ? 'g' : '') + (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '');
            }
            else {
                monitor.Throw(monitor.modules.error.TypeErrorObject, '', bot);
            }
        }
        else {
            var _P = pattern.value === undefined ? new values_1.Value("", l) : ToString_1.ToString(pattern);
            var _F = flags.value === undefined ? new values_1.Value("", l) : ToString_1.ToString(flags);
            l = lub(l, _P.label, _F.label);
            P = _P.value;
            F = _F.value;
        }
        var res = new RegExpObject(new RegExp(P, F), l);
        c.popPC();
        return new values_1.Value(res, bot);
    };
    // ------------------------------------------------------------
    // The RegExp Prototype, 15.10.6
    var RegExpPrototype = /** @class */ (function (_super) {
        __extends(RegExpPrototype, _super);
        function RegExpPrototype(constructor, host) {
            var _this = _super.call(this) || this;
            _this.Class = 'RegExp';
            _this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, bot);
            _this.host = host;
            ecma.DefineFFF(_this, constants.source, '');
            ecma.DefineFFF(_this, constants.global, false);
            ecma.DefineFFF(_this, constants.ignoreCase, false);
            ecma.DefineFFF(_this, constants.multiline, false);
            ecma.DefineTFF(_this, constants.lastIndex, 0);
            ecma.DefineFFF(_this, constants.length, 0);
            ecma.DefineTFT(_this, constants.constructor, constructor);
            ecma.DefineTFT(_this, constants.exec, new function_1.BuiltinFunctionObject(exec, 1, RegExp.prototype.exec));
            ecma.DefineTFT(_this, constants.test, new function_1.BuiltinFunctionObject(test, 1, RegExp.prototype.test));
            ecma.DefineTFT(_this, constants.toString, new function_1.BuiltinFunctionObject(toString, 0, RegExp.prototype.toString));
            return _this;
        }
        return RegExpPrototype;
    }(ecma.Ecma));
    // ------------------------------------------------------------
    // exec, 15.10.6.2
    var exec = function (thisArg, args) {
        var string = args[0] || new values_1.Value(undefined, bot);
        var S = ToString_1.ToString(string);
        var lastIndex = ToInteger_1.ToInteger(thisArg.Get(constants.lastIndex));
        var pre = thisArg.value.PrimitiveValue;
        pre.lastIndex = lastIndex.value;
        var res = pre.exec(S.value);
        var l = lub(thisArg.label, S.label, lastIndex.label);
        if (res === null) {
            return new values_1.Value(null, l);
        }
        thisArg.Put(constants.lastIndex, new values_1.Value(pre.lastIndex, l));
        var array = ArrayObject_1.ArrayObject.fromArray(res, l, l);
        array.DefineOwnProperty(constants.index, { value: res.index,
            writable: true,
            enumerable: true,
            configurable: true,
            label: l
        });
        array.DefineOwnProperty(constants.input, { value: res.input,
            writable: true,
            enumerable: true,
            configurable: true,
            label: l
        });
        return new values_1.Value(array, bot);
    };
    // ------------------------------------------------------------
    // test, 15.10.6.3
    var test = function (thisArg, args) {
        var res = exec(thisArg, args);
        return new values_1.Value(res.value !== null, res.label);
    };
    // ------------------------------------------------------------
    // toString, 15.10.6.3
    var toString = function (thisArg, args) {
        return new values_1.Value(thisArg.value.PrimitiveValue.toString(), thisArg.label);
    };
    // ------------------------------------------------------------
    // RegExp Object, 15.10.4.1
    var RegExpObject = /** @class */ (function (_super) {
        __extends(RegExpObject, _super);
        function RegExpObject(nativeRegExp, l) {
            var _this = _super.call(this) || this;
            _this.Class = 'RegExp';
            _this.PrimitiveValue = nativeRegExp;
            _this.PrimitiveLabel = l;
            _this.Extensible = true;
            _this.Prototype = new values_1.Value(monitor.instances.RegExpPrototype, bot);
            _this.DefineOwnProperty(constants.source, { value: _this.PrimitiveValue.source,
                writable: false,
                enumerable: false,
                configurable: false,
                label: l
            });
            _this.DefineOwnProperty(constants.global, { value: _this.PrimitiveValue.global,
                writable: false,
                enumerable: false,
                configurable: false,
                label: l
            });
            _this.DefineOwnProperty(constants.ignoreCase, { value: _this.PrimitiveValue.ignoreCase,
                writable: false,
                enumerable: false,
                configurable: false,
                label: l
            });
            _this.DefineOwnProperty(constants.multiline, { value: _this.PrimitiveValue.multiline,
                writable: false,
                enumerable: false,
                configurable: false,
                label: l
            });
            _this.DefineOwnProperty(constants.lastIndex, { value: _this.PrimitiveValue.lastIndex,
                writable: true,
                enumerable: false,
                configurable: false,
                label: l
            });
            return _this;
        }
        return RegExpObject;
    }(ecma.Ecma));
    RegExpObject.prototype.toString = function () {
        var v = this.PrimitiveValue.toString();
        return v;
    };
    // ------------------------------------------------------------
    var module = {};
    module.RegExpObject = RegExpObject;
    module.allocate = allocate;
    return module;
};

},{"./Conversion/ToInteger":30,"./Conversion/ToString":34,"./HasInstance":37,"./Objects/ArrayObject":38,"./constants":50,"./ecma":53,"./function":57,"./label":60,"./values":75}],67:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
function Set() {
    this.data = {};
    var toAdd = arguments;
    if (arguments.length === 1) {
        var arg = arguments[0];
        if (arg instanceof Array) {
            toAdd = arg;
        }
    }
    for (var i = 0, len = toAdd.length; i < len; i++) {
        var x = toAdd[i];
        if (x instanceof Set) {
            this.union(x);
        }
        else {
            this.add(x);
        }
    }
}
exports.Set = Set;
// -------------------------------------------------------------------------- 
Set.prototype.iter = function (f) {
    for (var e in this.data) {
        if (this.data.hasOwnProperty(e)) {
            f(e);
        }
    }
};
// -------------------------------------------------------------------------- 
Set.prototype.equals = function (x) {
    return (this.isSubset(x) && x.isSubset(this));
};
// -------------------------------------------------------------------------- 
Set.prototype.add = function (x) {
    this.data[x] = true;
};
// -------------------------------------------------------------------------- 
Set.prototype.union = function (x) {
    for (var e in x.data) {
        if (x.data.hasOwnProperty(e)) {
            this.data[e] = true;
        }
    }
};
// -------------------------------------------------------------------------- 
Set.prototype.del = function (x) {
    delete this.data[x];
};
// -------------------------------------------------------------------------- 
Set.prototype.intersect = function (x) {
    for (var e in this.data) {
        if (this.data.hasOwnProperty(e) && !x.data.hasOwnProperty(e)) {
            this.del(e);
        }
    }
};
// -------------------------------------------------------------------------- 
Set.prototype.isSubset = function (x) {
    for (var e in x.data) {
        if (x.data.hasOwnProperty(e) && !this.data.hasOwnProperty(e)) {
            return false;
        }
    }
    return true;
};
// -------------------------------------------------------------------------- 
Set.prototype.contains = function (x) {
    return this.data.hasOwnProperty(x);
};
// -------------------------------------------------------------------------- 
Set.prototype.toString = function () {
    var acc = [];
    for (var x in this.data) {
        if (this.data.hasOwnProperty(x)) {
            acc.push(x);
        }
    }
    if (acc.length === 0) {
        return '';
    }
    var str = acc[0];
    for (var i = 1, len = acc.length; i < len; i++) {
        str += ',' + acc[i];
    }
    return str;
};

},{}],68:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: make Stack generic
var Stack = /** @class */ (function () {
    function Stack() {
        this.content = [];
    }
    Stack.prototype.push = function (v) {
        this.content.push(v);
    };
    Stack.prototype.pop = function () {
        return this.content.pop();
    };
    Stack.prototype.peek = function () {
        return this.content[this.content.length - 1];
    };
    Stack.prototype.dup = function () {
        this.push(this.peek());
    };
    Stack.prototype.marker = function () {
        return { length: this.content.length };
    };
    Stack.prototype.reset = function (m) {
        this.content.length = m.length;
    };
    Stack.prototype.iter = function (f) {
        for (var i = 0, len = this.content.length; i < len; i++) {
            f(this.content[i]);
        }
    };
    Stack.prototype.map = function (f, m) {
        for (var i = m.length, len = this.content.length; i < len; i++) {
            this.content[i] = f(this.content[i]);
        }
    };
    Stack.prototype.size = function () {
        return this.content.length;
    };
    Stack.prototype.empty = function () {
        return this.content.length === 0;
    };
    Stack.prototype.toArray = function () {
        return this.content.slice(0);
    };
    return Stack;
}());
exports.Stack = Stack;

},{}],69:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var label = require("./label");
var values_1 = require("./values");
var ecma = require("./ecma");
var constants = require("./constants");
var function_1 = require("./function");
var ArrayObject_1 = require("./Objects/ArrayObject");
var HasInstance_1 = require("./HasInstance");
var ToInteger_1 = require("./Conversion/ToInteger");
var ToUInt16_1 = require("./Conversion/ToUInt16");
var ToString_1 = require("./Conversion/ToString");
var CheckObjectCoercible_1 = require("./Utility/CheckObjectCoercible");
exports.functor = function (monitor) {
    var error = monitor.require('error');
    var Ecma = ecma.Ecma;
    var Label = label.Label;
    var lub = label.lub;
    var le = label.le;
    var bot = Label.bot;
    // ------------------------------------------------------------
    function allocate(host) {
        var stringConstructor = new StringConstructor(host.String);
        var stringPrototype = stringConstructor._proto;
        return { StringConstructor: stringConstructor,
            StringPrototype: stringPrototype
        };
    }
    // ------------------------------------------------------------
    // The String Constructor, 15.5.2
    var StringConstructor = /** @class */ (function (_super) {
        __extends(StringConstructor, _super);
        function StringConstructor(host) {
            var _this = _super.call(this) || this;
            _this.Prototype = new values_1.Value(monitor.instances.FunctionPrototype, bot);
            _this.Class = 'Function';
            // not mandated by standard
            _this.Extensible = true;
            _this.host = host;
            _this._proto = new StringPrototype(_this, host.prototype);
            ecma.DefineFFF(_this, constants.length, 1);
            ecma.DefineFFF(_this, constants.prototype, _this._proto);
            ecma.DefineTFT(_this, constants.fromCharCode, new function_1.BuiltinFunctionObject(fromCharCode, 1, _this.host.fromCharCode));
            return _this;
        }
        return StringConstructor;
    }(Ecma));
    StringConstructor.prototype.HasInstance = HasInstance_1.HasInstance;
    // 15.5.1.1 -----------------------------------------------------------------
    StringConstructor.prototype.Call = function (thisArg, args) {
        if (!args[0]) {
            return new values_1.Value('', bot);
        }
        var str = ToString_1.ToString(args[0]);
        return str;
    };
    // 15.5.2.1 ----------------------------------------------------------------- 
    StringConstructor.prototype.Construct = function (args) {
        var value = args[0];
        var str;
        if (value) {
            var x = ToString_1.ToString(value);
            str = new StringObject(x.value, x.label);
        }
        else {
            str = new StringObject('');
        }
        return new values_1.Value(str, bot);
    };
    // --------------------------------------------------------------------------
    // fromCharCode, 15.5.3.2 
    var fromCharCode = function (thisArg, args) {
        var lbl = new Label();
        var _args = [];
        for (var i = 0, len = args.length; i < len; i++) {
            var arg = ToUInt16_1.ToUInt16(args[i]);
            lbl.lub(arg.label);
            _args[i] = arg.value;
        }
        var _String = monitor.instances.StringConstructor.host;
        var v = _String.fromCharCode.apply(_String, _args);
        return new values_1.Value(v, lbl);
    };
    // ------------------------------------------------------------
    // The String Prototype, 15.5.4
    var StringPrototype = /** @class */ (function (_super) {
        __extends(StringPrototype, _super);
        function StringPrototype(constructor) {
            var _this = _super.call(this) || this;
            _this.Class = 'String';
            _this.PrimitiveValue = '';
            _this.PrimitiveLabel = bot;
            _this.Prototype = new values_1.Value(monitor.instances.ObjectPrototype, bot);
            _this.properties = new String('');
            _this.labels.length = {
                value: bot,
                existence: bot
            };
            _this.host = constructor.host.prototype;
            ecma.DefineTFT(_this, constants.constructor, constructor);
            ecma.DefineTFT(_this, constants.toString, new function_1.BuiltinFunctionObject(toString, 0, _this.host.toString));
            ecma.DefineTFT(_this, new values_1.Value('valueOf', bot), new function_1.BuiltinFunctionObject(valueOf, 0, _this.host.valueOf));
            ecma.DefineTFT(_this, constants.charAt, new function_1.BuiltinFunctionObject(charAt, 1, _this.host.charAt));
            ecma.DefineTFT(_this, constants.charCodeAt, new function_1.BuiltinFunctionObject(charCodeAt, 1, _this.host.charCodeAt));
            ecma.DefineTFT(_this, constants.concat, new function_1.BuiltinFunctionObject(concat, 1, _this.host.concat));
            ecma.DefineTFT(_this, constants.indexOf, new function_1.BuiltinFunctionObject(indexOf, 1, _this.host.indexOf));
            ecma.DefineTFT(_this, constants.lastIndexOf, new function_1.BuiltinFunctionObject(lastIndexOf, 1, _this.host.lastIndexOf));
            ecma.DefineTFT(_this, constants.localeCompare, new function_1.BuiltinFunctionObject(localeCompare, 1, _this.host.localeCompare));
            ecma.DefineTFT(_this, constants.match, new function_1.BuiltinFunctionObject(match, 1, _this.host.match));
            ecma.DefineTFT(_this, constants.replace, new function_1.BuiltinFunctionObject(replace, 2, _this.host.replace));
            ecma.DefineTFT(_this, constants.search, new function_1.BuiltinFunctionObject(search, 1, _this.host.search));
            ecma.DefineTFT(_this, constants.slice, new function_1.BuiltinFunctionObject(slice, 2, _this.host.slice));
            ecma.DefineTFT(_this, constants.split, new function_1.BuiltinFunctionObject(split, 2, _this.host.split));
            ecma.DefineTFT(_this, constants.substring, new function_1.BuiltinFunctionObject(substring, 2, _this.host.substring));
            ecma.DefineTFT(_this, constants.toLowerCase, new function_1.BuiltinFunctionObject(toLowerCase, 0, _this.host.toLowerCase));
            ecma.DefineTFT(_this, constants.toLocaleLowerCase, new function_1.BuiltinFunctionObject(toLocaleLowerCase, 0, _this.host.toLocaleLowerCase));
            ecma.DefineTFT(_this, constants.toUpperCase, new function_1.BuiltinFunctionObject(toUpperCase, 0, _this.host.toUpperCase));
            ecma.DefineTFT(_this, constants.toLocaleUpperCase, new function_1.BuiltinFunctionObject(toLocaleUpperCase, 0, _this.host.toLocaleUpperCase));
            ecma.DefineTFT(_this, constants.trim, new function_1.BuiltinFunctionObject(trim, 0, _this.host.trim));
            ecma.DefineTFT(_this, constants.substr, new function_1.BuiltinFunctionObject(substr, 2, _this.host.substr));
            return _this;
        }
        return StringPrototype;
    }(Ecma));
    // ------------------------------------------------------------
    // toString, 15.5.4.2
    var toString = function (thisArg, args) {
        if (typeof thisArg.value === 'string') {
            return thisArg;
        }
        if (typeof thisArg.value !== 'object' || thisArg.value.Class !== 'String') {
            monitor.Throw(error.TypeErrorObject, 'String.prototype.toString is not generic', thisArg.label);
        }
        var result = thisArg.value.PrimitiveValue.toString();
        return new values_1.Value(result, thisArg.value.PrimitiveLabel);
    };
    // ------------------------------------------------------------
    // valueOf, 15.5.4.3
    var valueOf = toString;
    // ------------------------------------------------------------
    // charAt, 15.5.4.4
    var charAt = function (thisArg, args) {
        var pos = args[0] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var position = ToInteger_1.ToInteger(pos);
        var c = S.value.charAt(position.value);
        return new values_1.Value(c, lub(position.label, S.label));
    };
    // ------------------------------------------------------------
    // charCodeAt, 15.5.4.5
    var charCodeAt = function (thisArg, args) {
        var pos = args[0] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var position = ToInteger_1.ToInteger(pos);
        var c = S.value.charCodeAt(position.value);
        return new values_1.Value(c, lub(position.label, thisArg.label));
    };
    // ------------------------------------------------------------
    // concat, 15.5.4.6
    var concat = function (thisArg, args) {
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var lbl = new Label();
        var _args = [];
        for (var i = 0, len = args.length; i < len; i++) {
            var arg = ToString_1.ToString(args[i]);
            lbl.lub(arg.label);
            _args[i] = arg.value;
        }
        var str = S.value.concat.apply(S.value, _args);
        lbl.lub(thisArg.label);
        return new values_1.Value(str, lbl);
    };
    // ------------------------------------------------------------
    // indexOf, 15.5.4.7
    var indexOf = function (thisArg, args) {
        var searchString = args[0] || new values_1.Value(undefined, bot);
        var position = args[1] || new values_1.Value(0, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var searchStr = ToString_1.ToString(searchString);
        var pos = ToInteger_1.ToInteger(position);
        var lbl = lub(S.label, searchStr.label, pos.label);
        var str = S.value.indexOf(searchStr.value, pos.value);
        return new values_1.Value(str, lbl);
    };
    // ------------------------------------------------------------
    // lastIndexOf, 15.5.4.8
    var lastIndexOf = function (thisArg, args) {
        var searchString = args[0] || new values_1.Value(undefined, bot);
        var position = args[1] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var searchStr = ToString_1.ToString(searchString);
        var pos = ToInteger_1.ToInteger(position);
        var lbl = lub(S.label, searchStr.label, pos.label);
        var str = S.value.lastIndexOf(searchStr.value, pos.value);
        return new values_1.Value(str, lbl);
    };
    // ------------------------------------------------------------
    // localeCompare, 15.5.4.9
    var localeCompare = function (thisArg, args) {
        var that = args[0] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        that = ToString_1.ToString(that);
        var lbl = lub(S.label, that.label);
        var result = S.value.localeCompare(that.value);
        return new values_1.Value(result, lbl);
    };
    // ------------------------------------------------------------
    // match, 15.5.4.10
    var match = function (thisArg, args) {
        var regexp = args[0] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var rx = regexp;
        if (rx.value === null || typeof rx.value !== 'object' || rx.value.Class !== 'RegExp') {
            rx = monitor.instances.RegExpConstructor.Construct([regexp]);
        }
        var lbl = lub(S.label, rx.value.PrimitiveLabel);
        monitor.assert(le(rx.label, rx.value.PrimitiveLabel), 'String.prototype.match: label of regular expression object not below regular expression label');
        rx.value.PrimitiveLabel = lbl;
        var primitiveArray = S.value.match(rx.value.PrimitiveValue);
        if (primitiveArray === null) {
            return new values_1.Value(null, lbl);
        }
        var array = ArrayObject_1.ArrayObject.fromArray(primitiveArray, lbl, lbl);
        array.DefineOwnProperty(constants.index, { value: primitiveArray.index,
            writable: true,
            enumerable: true,
            configurable: true,
            label: lbl
        });
        array.DefineOwnProperty(constants.input, { value: primitiveArray.input,
            writable: true,
            enumerable: true,
            configurable: true,
            label: lbl
        });
        return new values_1.Value(array, bot);
    };
    // ------------------------------------------------------------
    // replace, 15.5.4.11
    var replace = function (thisArg, args) {
        var searchValue = args[0] || new values_1.Value(undefined, bot);
        var replaceValue = args[1] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var sV, rV;
        if (typeof searchValue.value === 'object' && searchValue.value.Class === 'RegExp') {
            sV = searchValue.value.PrimitiveValue;
        }
        else {
            searchValue = ToString_1.ToString(searchValue);
            sV = searchValue.value;
        }
        var fL = bot;
        if (typeof replaceValue.value === 'object' && replaceValue.value.Class === 'Function') {
            rV = function () {
                var l = lub(searchValue.label, replaceValue.label);
                var _args = {};
                for (var i = 0; i < arguments.length; i++) {
                    _args[i] = new values_1.Value(arguments[i], l);
                }
                _args.length = arguments.length;
                var res = replaceValue.Call(replaceValue, _args);
                fL = lub(fL, res.label);
                return res.value;
            };
        }
        else {
            replaceValue = ToString_1.ToString(replaceValue);
            rV = replaceValue.value;
        }
        var l = lub(searchValue.label, replaceValue.label);
        var res = S.value.replace(sV, rV);
        return new values_1.Value(res, lub(l, fL));
    };
    // ------------------------------------------------------------
    // search, 15.5.4.12
    var search = function (thisArg, args) {
        var regexp = args[0] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var string = ToString_1.ToString(thisArg);
        var rx = regexp;
        if (rx.value === null || typeof regexp.value !== 'object' || regexp.value.Class !== 'RegExp') {
            rx = monitor.instances.RegExpConstructor.Construct([regexp]);
        }
        var lbl = lub(string.label, rx.value.PrimitiveLabel);
        monitor.assert(le(rx.label, rx.value.PrimitiveLabel), 'String.prototype.match: label of regular expression object not below regular expression label');
        rx.value.PrimitiveLabel = lbl;
        var result = string.value.search(rx.value.PrimitiveValue);
        return new values_1.Value(result, lbl);
    };
    // ------------------------------------------------------------
    // slice, 15.5.4.13
    var slice = function (thisArg, args) {
        var c = monitor.context;
        var start = args[0] || new values_1.Value(undefined, bot);
        var end = args[1] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var len = S.value.length;
        var intStart = ToInteger_1.ToInteger(start);
        c.pushPC(end.label);
        if (end.value === undefined) {
            end = new values_1.Value(len, lub(S.label, end.label));
        }
        else {
            end = ToInteger_1.ToInteger(end);
        }
        c.popPC();
        var str = S.value.slice(start.value, end.value);
        var lbl = lub(S.label, start.label, end.label);
        return new values_1.Value(str, lbl);
    };
    // ------------------------------------------------------------
    // split, 15.5.4.14
    var split = function (thisArg, args) {
        var separator = args[0] || new values_1.Value(undefined, bot);
        var limit = args[1] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var sep;
        var lbl = lub(S.label, separator.label);
        if (separator.value && typeof separator.value === 'object' && separator.value.Class === 'RegExp') {
            sep = separator.value.PrimitiveValue;
            monitor.assert(le(separator.label, separator.value.PrimitiveLabel), 'String.prototype.split: label of regular expression object not below label of regular expression');
            separator.value.PrimitiveLabel = lbl;
        }
        else {
            separator = ToString_1.ToString(separator);
            sep = separator.value;
            lbl.lub(separator.label);
        }
        lbl.lub(limit.label);
        var primitiveArray = S.value.split(sep, limit.value);
        var array = ArrayObject_1.ArrayObject.fromArray(primitiveArray, lbl, lbl);
        return new values_1.Value(array, bot);
    };
    // ------------------------------------------------------------
    // substring, 15.5.4.15
    var substring = function (thisArg, args) {
        var start = args[0] || new values_1.Value(undefined, bot);
        var end = args[1] || new values_1.Value(undefined, bot);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        start = ToInteger_1.ToInteger(start);
        var len = S.value.length;
        if (end.value === undefined) {
            end.value = len;
        }
        else {
            end = ToInteger_1.ToInteger(end);
        }
        var lbl = lub(S.label, start.label, end.label);
        var str = S.value.substring(start.value, end.value);
        return new values_1.Value(str, lbl);
    };
    // ------------------------------------------------------------
    var substr = function (thisArg, args) {
        var start = args[0] || new values_1.Value(undefined, 0);
        var length = args[1] || new values_1.Value(undefined, 0);
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        start = ToInteger_1.ToInteger(start);
        if (length.value === undefined) {
            length.value = len;
        }
        else {
            length = ToInteger_1.ToInteger(length);
        }
        var lbl = lub(S.label, start.label, length.label);
        var str = S.value.substr(start.value, length.value);
        return new values_1.Value(str, lbl);
    };
    // ------------------------------------------------------------
    // toLowerCase, 15.5.4.16
    var toLowerCase = function (thisArg, args) {
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var L = S.value.toLowerCase();
        return new values_1.Value(L, S.label);
    };
    // ------------------------------------------------------------
    // toLocaleLowerCase, 15.5.4.17
    var toLocaleLowerCase = function (thisArg, args) {
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var L = S.value.toLocaleLowerCase();
        return new values_1.Value(L, S.label);
    };
    // ------------------------------------------------------------
    // toUpperCase, 15.5.4.18
    var toUpperCase = function (thisArg, args) {
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var L = S.value.toUpperCase();
        return new values_1.Value(L, S.label);
    };
    // ------------------------------------------------------------
    // toLocaleUpperCase, 15.5.4.19
    var toLocaleUpperCase = function (thisArg, args) {
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var L = S.value.toLocaleUpperCase();
        return new values_1.Value(L, S.label);
    };
    // ------------------------------------------------------------
    // trim, 15.5.4.20
    var trim = function (thisArg, args) {
        CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
        var S = ToString_1.ToString(thisArg);
        var T = S.value.trim();
        return new values_1.Value(T, S.label);
    };
    // ------------------------------------------------------------
    // String Object, 15.5.5
    var StringObject = /** @class */ (function (_super) {
        __extends(StringObject, _super);
        function StringObject(val, lbl) {
            var _this = _super.call(this) || this;
            _this.Class = 'String';
            _this.PrimitiveValue = val;
            lbl = lbl || bot;
            _this.PrimitiveLabel = lbl;
            _this.properties = new String(val);
            for (var i = 0, len = val.length; i < len; i++) {
                _this.labels[i] = {
                    value: lbl,
                    existence: lbl
                };
            }
            _this.labels.length = {
                value: lbl,
                existence: lbl
            };
            _this.Extensible = true;
            _this.Prototype = new values_1.Value(monitor.instances.StringPrototype, bot);
            return _this;
            // length is not modeled in this way, but by GetOwnProperty; however, e.g.,
            // delete will use the properties field for deletion. Thus, we add a fake model.
            //   ecma.DefineFFF(this, constants.length, 0);
        }
        return StringObject;
    }(Ecma));
    // ---
    // TODO: we don't copy other properties on the Strings
    /*
      StringObject.prototype.toNative = function(deep) {
        var v = new String(this.properties);
        return new Value(v, this.PrimitiveLabel);
      };
    */
    // ---
    // ------------------------------------------------------------
    var module = {};
    module.StringObject = StringObject;
    module.allocate = allocate;
    return module;
};

},{"./Conversion/ToInteger":30,"./Conversion/ToString":34,"./Conversion/ToUInt16":35,"./HasInstance":37,"./Objects/ArrayObject":38,"./Utility/CheckObjectCoercible":48,"./constants":50,"./ecma":53,"./function":57,"./label":60,"./values":75}],70:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var monitor_1 = require("../monitor");
var policy_1 = require("../policy");
var prelude = require("../../prelude");
var path = require("path");

var imports = {
    window: require('./window')
};
var ChromeMonitor = /** @class */ (function (_super) {
    __extends(ChromeMonitor, _super);
    function ChromeMonitor(global, print, log, warn, error) {
        var _this = _super.call(this, global, print, log, warn, error) || this;
        // setup dom specific modules
        _this.modules.chrome = {};
        var load = [
            'window'
        ];
        _this.setup(_this.modules.chrome, load, imports);
        _this.initialize(global);
        return _this;
    }
    ChromeMonitor.prototype.initialize = function (global) {
        _super.prototype.initialize.call(this, global);
        var policies = JSON.parse("{\n   \n}");
        this.policy = new policy_1.SecurityPolicy(policies);
        var globalInstance = this.modules.chrome.window.allocate(global);
        prelude.copy(globalInstance, this.instances);
        this.entitymap.set(this.instances.globalObject.host, this.instances.globalObject);
        this.modules.exec.initialize();
        this.initialized = true;
    };
    ;
    return ChromeMonitor;
}(monitor_1.WrapperMonitorBase));
exports.ChromeMonitor = ChromeMonitor;



},{"../../prelude":65,"../monitor":73,"../policy":74,"./window":71,"path":76}],71:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var entity_1 = require("../entity");
var ecma = require("../../ecma");
var values_1 = require("../../values");
exports.functor = function (monitor) {
    var global = monitor.require('global');
    // -------------------------------------------------------------------------- 
    function allocate(host) {
        var wo = new WindowObject(host);
        return { globalObject: wo };
    }
    function has_own_property(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    // -------------------------------------------------------------------------- 
    var WindowObject = /** @class */ (function (_super) {
        __extends(WindowObject, _super);
        function WindowObject(host) {
            var e_1, _a;
            var _this = _super.call(this, host) || this;
            _this.predefined = {};
            try {
                for (var _b = __values(Object.getOwnPropertyNames(_this.properties)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var p = _c.value;
                    _this.predefined[p] = true;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            _this.modelstate = monitor.policy.globalmodelstate;
            monitor.entitymap.set(host, _this);
            return _this;
        }
        // default policy 
        // 1. read through disabled for predefined properties
        // 2. read-through disabled for JSFlow defined properties
        WindowObject.prototype.GetOwnProperty = function (p) {
            if (!has_own_property(this.host, p.value)
                || has_own_property(this.predefined, p.value)) {
                return _super.prototype.GetOwnProperty.call(this, p);
            }
            var propertyLabeler = monitor.policy.global.GetPropertyLabeler(p.value);
            var label = propertyLabeler.Labeler.Label(this.modelstate);
            if (!has_own_property(this.labels, p.value)) {
                this.labels[p.value] = {
                    value: label,
                    existence: p.label
                };
            }
            var jsdesc = Object.getOwnPropertyDescriptor(this.host, p.value);
            if (jsdesc === undefined) {
                return new values_1.Value(undefined, label);
            }
            if (has_own_property(this.properties, p.value)
                && (ecma.IsDataDescriptor(jsdesc) && !jsdesc.writable ||
                    ecma.IsAccessorDescriptor(jsdesc) && !jsdesc.configurable)) {
                // non-writable propert or non-configurable accessor means cannot be updated
                // return what is there           
                return _super.prototype.GetOwnProperty.call(this, p);
            }
            var desc = entity_1.relabelPropertyDescriptor(jsdesc, propertyLabeler.ReadLabeler, this.modelstate);
            Object.defineProperty(this.properties, p.value, desc);
            return _super.prototype.GetOwnProperty.call(this, p);
        };
        // default policy 
        // 1. write through disabled for predefined properties
        // 2. write through disabled for JSFlow defined properties
        WindowObject.prototype.DefineOwnProperty = function (p, desc, Throw) {
            if (has_own_property(this.predefined, p.value)
                || !has_own_property(this.host, p.value)) {
                return _super.prototype.DefineOwnProperty.call(this, p, desc, Throw);
            }
            var propertyLabeler = monitor.policy.global.GetPropertyLabeler(p.value);
            if (!has_own_property(this.labels, p.value)) {
                var label = propertyLabeler.Labeler.Label(this.modelstate);
                this.labels[p.value] = {
                    value: label,
                    existence: p.label
                };
            }
            var jsdesc = entity_1.unlabelPropertyDescriptor(desc, propertyLabeler.WriteUnlabeler, this.modelstate);
            var hostResult = Object.defineProperty(this.host, p.value, jsdesc);
            var result = _super.prototype.DefineOwnProperty.call(this, p, desc, Throw);
            result.value = hostResult;
            return result;
        };
        return WindowObject;
    }(global.GlobalObject));
    var module = {};
    module.WindowObject = WindowObject;
    module.allocate = allocate;
    return module;
};

},{"../../ecma":53,"../../values":75,"../entity":72}],72:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// temporary hack to get types in
var policy_1 = require("./policy");
var ecma_1 = require("../ecma");
var FunctionObject_1 = require("../Objects/FunctionObject");
var label_1 = require("../label");
var values_1 = require("../values");
var bot = label_1.Label.bot;
// --------------------------------------------------------------------------
function has_own_property(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
// --------------------------------------------------------------------------
// --- EntityObject
// --------------------------------------------------------------------------
var EntityObject = /** @class */ (function (_super) {
    __extends(EntityObject, _super);
    function EntityObject(host, labeler, outermodelstate) {
        var _this = _super.call(this) || this;
        if (labeler === undefined) {
            throw new Error('EntityObject: undefined labelmodel');
        }
        _this.modelstate = new policy_1.ModelState(outermodelstate);
        _this.Class = 'Object';
        _this.host = host;
        _this.labeler = labeler;
        return _this;
    }
    Object.defineProperty(EntityObject.prototype, "Prototype", {
        get: function () {
            if (this.labeledprototype === undefined) {
                var prototypeLabeler = this.labeler.PrototypeLabeler;
                var descLabeler = prototypeLabeler.ReadLabeler;
                var value = relabel(Object.getPrototypeOf(this.host), descLabeler.ValueLabeler, this.modelstate);
                // TODO: what about this label - should we keep it?
                var label1 = prototypeLabeler.Labeler.Label(this.modelstate);
                var label2 = descLabeler.Labeler.Label(this.modelstate);
                this.labeledprototype = new values_1.Value(value, label_1.lub(label1, label2));
            }
            return this.labeledprototype;
        },
        enumerable: true,
        configurable: true
    });
    // TODO: This one should be a lot more clever....
    EntityObject.prototype.toString = function () {
        return this.host.toString();
    };
    // ---
    EntityObject.prototype.GetOwnProperty = function (p) {
        if (!has_own_property(this.host, p.value)) {
            return _super.prototype.GetOwnProperty.call(this, p);
        }
        var propertyLabeler = this.labeler.GetPropertyLabeler(p.value);
        var label = propertyLabeler.Labeler.Label(this.modelstate);
        if (!has_own_property(this.labels, p.value)) {
            this.labels[p.value] = {
                value: label,
                existence: p.label
            };
        }
        var jsdesc = Object.getOwnPropertyDescriptor(this.host, p.value);
        if (jsdesc === undefined) {
            return new values_1.Value(undefined, label);
        }
        if (has_own_property(this.properties, p.value)
            && (ecma_1.IsDataDescriptor(jsdesc) && !jsdesc.writable ||
                ecma_1.IsAccessorDescriptor(jsdesc) && !jsdesc.configurable)) {
            // non-writable propert or non-configurable accessor means cannot be updated
            // return what is there           
            return _super.prototype.GetOwnProperty.call(this, p);
        }
        var desc = relabelPropertyDescriptor(jsdesc, propertyLabeler.ReadLabeler, this.modelstate);
        desc.label.lub(label);
        Object.defineProperty(this.properties, p.value, desc);
        return _super.prototype.GetOwnProperty.call(this, p);
    };
    // ---
    EntityObject.prototype.DefineOwnProperty = function (p, desc, Throw) {
        var propertyLabeler = this.labeler.GetPropertyLabeler(p.value);
        if (has_own_property(this.host, p.value)
            && !has_own_property(this.labels, p.value)) {
            var label = propertyLabeler.Labeler.Label(this.modelstate);
            this.labels[p.value] = {
                value: label,
                existence: label_1.lub(p.label, label)
            };
        }
        _super.prototype.DefineOwnProperty.call(this, p, desc, Throw);
        var jsdesc = unlabelPropertyDescriptor(desc, propertyLabeler.WriteUnlabeler, this.modelstate);
        Object.defineProperty(this.host, p.value, jsdesc);
        return new values_1.Value(true, bot);
    };
    // ---
    EntityObject.prototype.getOwnEnumerablePropertyNames = function (label) {
        var e_1, _a;
        var enumerables = _super.prototype.getOwnEnumerablePropertyNames.call(this, label);
        // Need this to ensure we're not pushing properties from this.host that
        // were already present in this.properties.
        var ownPropNames = Object.getOwnPropertyNames(this.properties);
        var hostNames = Object.getOwnPropertyNames(this.host);
        try {
            for (var hostNames_1 = __values(hostNames), hostNames_1_1 = hostNames_1.next(); !hostNames_1_1.done; hostNames_1_1 = hostNames_1.next()) {
                var name = hostNames_1_1.value;
                if (!ownPropNames.includes(name)) {
                    var desc = Object.getOwnPropertyDescriptor(this.host, name);
                    // @ts-ignore desc is not undefined
                    if (desc.enumerable) {
                        enumerables.push(new values_1.Value(name, label));
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (hostNames_1_1 && !hostNames_1_1.done && (_a = hostNames_1.return)) _a.call(hostNames_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return enumerables;
    };
    return EntityObject;
}(ecma_1.Ecma));
exports.EntityObject = EntityObject;
// --------------------------------------------------------------------------
// --- EntityFunction
// --------------------------------------------------------------------------
var EntityFunction = /** @class */ (function (_super) {
    __extends(EntityFunction, _super);
    function EntityFunction(host, labelmodel, outermodelstate) {
        var _this = _super.call(this, host, labelmodel, outermodelstate) || this;
        _this.Class = 'Function';
        return _this;
    }
    // ---
    EntityFunction.prototype.Call = function (thisVal, args) {
        var modelstate = new policy_1.ModelState(this.modelstate);
        monitor.policy.PushModelState(modelstate);
        var argsunlabelmodels = this.labeler.ArgumentsUnlabeler;
        for (var i = 0, j = 0; i < args.length; i++, j++) {
            while (!argsunlabelmodels.GetArgumentUnlabeler(j).ModelFor(args[i])) {
                j++;
            }
            args[i] = unlabelValue(args[i], argsunlabelmodels.GetArgumentUnlabeler(j), modelstate);
        }
        var thisunlabelmodel = this.labeler.SelfUnlabeler;
        var unlabeledThis = unlabelValue(thisVal, thisunlabelmodel, modelstate);
        var result;
        try {
            result = this.host.apply(unlabeledThis, args);
        }
        catch (e) {
            // may rethrow translated excpetion, otherwise we rethrow ourselves
            monitor.tryRethrow(e, true);
            var excmodel = this.labeler.GetExceptionLabelModel(e.name);
            var le = new EntityObject(e, excmodel, this.modelstate);
            var exclabel = this.labeler.GetExceptionLabel(e.name);
            throw new values_1.Value(le, exclabel);
        }
        var returnlabelmodel = this.labeler.ReturnLabeler;
        var returnlabel = returnlabelmodel.Labeler.Label(modelstate);
        var labeledvalue = relabel(result, returnlabelmodel.ValueLabeler, modelstate);
        monitor.policy.PopModelState();
        return new values_1.Value(labeledvalue, returnlabel);
    };
    // ---
    EntityFunction.prototype.Construct = function (args) {
        var modelstate = new policy_1.ModelState(this.modelstate);
        monitor.policy.PushModelState(modelstate);
        var argsunlabelmodels = this.labeler.ArgumentsUnlabeler;
        for (var i = 0, j = 0; i < args.length; i++, j++) {
            while (!argsunlabelmodels.GetArgumentUnlabeler(j).ModelFor(args[i])) {
                j++;
            }
            args[i] = unlabelValue(args[i], argsunlabelmodels.GetArgumentUnlabeler(j), modelstate);
        }
        var stringArgs;
        for (var i = 0; i < args.length; i++) {
            if (stringArgs === undefined) {
                stringArgs = "args[" + i + "]";
            }
            else {
                stringArgs += ", args[" + i + "]";
            }
        }
        var result;
        try {
            result = eval("result = new this.host(" + stringArgs + ");");
        }
        catch (e) {
            monitor.tryRethrow(e, true);
            var excmodel = this.labeler.GetExceptionLabelModel(e.name);
            var le = new EntityObject(e, excmodel, this.modelstate);
            var exclabel = this.labeler.GetExceptionLabel(e.name);
            throw new values_1.Value(le, exclabel);
        }
        var returnlabelmodel = this.labeler.ReturnLabeler;
        var returnlabel = returnlabelmodel.Labeler.Label(modelstate);
        var labeledvalue = relabel(result, returnlabelmodel.ValueLabeler, modelstate);
        monitor.policy.PopModelState();
        return new values_1.Value(labeledvalue, returnlabel);
    };
    return EntityFunction;
}(EntityObject));
exports.EntityFunction = EntityFunction;
// --------------------------------------------------------------------------
// --- relabelPropertyDescriptor :: NativeValue -> EntityObject
// --------------------------------------------------------------------------
function relabelPropertyDescriptor(desc, descriptorLabeler, modelstate) {
    var e_2, _a;
    var jsfdesc = {
        label: descriptorLabeler.Labeler.Label(modelstate)
    };
    var boolProperties = ['configurable', 'enumerable', 'writable'];
    try {
        for (var boolProperties_1 = __values(boolProperties), boolProperties_1_1 = boolProperties_1.next(); !boolProperties_1_1.done; boolProperties_1_1 = boolProperties_1.next()) {
            var key = boolProperties_1_1.value;
            if (desc[key] !== undefined) {
                jsfdesc[key] = desc[key];
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (boolProperties_1_1 && !boolProperties_1_1.done && (_a = boolProperties_1.return)) _a.call(boolProperties_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    if (ecma_1.IsAccessorDescriptor(desc)) {
        if (desc.get) {
            var Get_1 = new EntityFunction(desc.get, descriptorLabeler.GetterLabeler, modelstate);
            jsfdesc.get = function () { return Get_1.Call(new values_1.Value(this, bot), []); };
            // @ts-ignore
            jsfdesc.get.actualFunction = Get_1;
        }
        if (desc.set) {
            var Set_1 = new EntityFunction(desc.set, descriptorLabeler.SetterLabeler, modelstate);
            jsfdesc.set = function (v) { return Set_1.Call(new values_1.Value(this, bot), [v]); };
            // @ts-ignore
            jsfdesc.set.actualFunction = Set_1;
        }
    }
    else if (ecma_1.IsDataDescriptor(desc)) {
        jsfdesc.value = relabel(desc.value, descriptorLabeler.ValueLabeler, modelstate);
    }
    else {
        monitor.Throw(monitor.modules.error.ErrorObject, 'Entity.relabelPropertyDescriptor: got something that is not a descriptor!', bot);
    }
    return jsfdesc;
}
exports.relabelPropertyDescriptor = relabelPropertyDescriptor;
// ---
function MkValue(value, valueLabeler, modelstate) {
    var label = valueLabeler.Labeler.Label(modelstate);
    var labeledvalue = relabel(value, valueLabeler.ValueLabeler, modelstate);
    return new values_1.Value(labeledvalue, label);
}
// --------------------------------------------------------------------------
// --- relabel :: EntityObject -> Policy -> NativeValue -> EntityObject
// --------------------------------------------------------------------------
// We don't want to return a value, since relabel is used in, e.g., descriptors
function relabel(value, labeler, modelstate) {
    if (typeof value === 'string' ||
        typeof value === 'number' ||
        typeof value === 'undefined' ||
        typeof value === 'boolean') {
        return value;
    }
    if (value === null) {
        return null;
    }
    if (monitor.entitymap.has(value)) {
        return monitor.entitymap.get(value);
    }
    var res;
    if (value instanceof Function) {
        res = new EntityFunction(value, labeler, modelstate);
    }
    else {
        res = new EntityObject(value, labeler, modelstate);
    }
    try {
        monitor.entitymap.set(value, res);
    }
    catch (e) {
        monitor.warn('Cannot map ', value.toString());
    }
    return res;
}
exports.relabel = relabel;
// --------------------------------------------------------------------------
// --- unlabelPropertyDescriptor :: EntityObject -> NativeValue
// --------------------------------------------------------------------------
function unlabelPropertyDescriptor(jsflowdesc, unlabelmodel, modelstate) {
    var e_3, _a;
    var boolProperties = ['configurable', 'enumerable', 'writable'];
    var desc = {};
    try {
        for (var boolProperties_2 = __values(boolProperties), boolProperties_2_1 = boolProperties_2.next(); !boolProperties_2_1.done; boolProperties_2_1 = boolProperties_2.next()) {
            var key = boolProperties_2_1.value;
            if (jsflowdesc[key] !== undefined) {
                desc[key] = jsflowdesc[key];
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (boolProperties_2_1 && !boolProperties_2_1.done && (_a = boolProperties_2.return)) _a.call(boolProperties_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
    if (ecma_1.IsAccessorDescriptor(jsflowdesc)) {
        if (jsflowdesc.get) {
            desc.get = unlabel(jsflowdesc.get, unlabelmodel.GetterUnlabeler, modelstate);
        }
        if (jsflowdesc.set) {
            desc.set = unlabel(jsflowdesc.set, unlabelmodel.SetterUnlabeler, modelstate);
        }
    }
    else if (ecma_1.IsDataDescriptor(jsflowdesc)) {
        var valueUnlabeler = desc.value = unlabel(jsflowdesc.value, unlabelmodel.ValueUnlabeler, modelstate);
    }
    else {
        monitor.Throw(monitor.modules.error.ErrorObject, 'Entity.unlabelPropertyDescriptor: got something that is not a descriptor!', bot);
    }
    return desc;
}
exports.unlabelPropertyDescriptor = unlabelPropertyDescriptor;
// --------------------------------------------------------------------------
// --- unlabel :: EntityObject -> Policy -> NativeValue
// --------------------------------------------------------------------------
// TODO: how to handle non-standard interactions (Object.X, Reflect.X, __protot__, instanceof)
function handler(jsflowobject, abstractname) {
    if (abstractname === undefined) {
        monitor.fatal('exec.js, handler, undefined abstract name');
    }
    if (typeof abstractname !== 'string') {
        monitor.fatal('unlabel handler, abstract name is not a string but', abstractname);
    }
    return {
        // ---
        // Object.getPrototypeOf(), Reflect.getPrototypeOf(), __proto__, Object.prototype.isPrototypeOf(), instanceof
        getPrototypeOf: function (target) {
            var modelstate = monitor.policy.CurrentModelState;
            var unlabeler = modelstate.GetModel(abstractname);
            var prototypeUnlabeler = unlabeler.PrototypeUnlabeler;
            var prototype = prototypeUnlabeler.Unlabeler.Unlabel(jsflowobject.Prototype, modelstate);
            var descLabeler = prototypeUnlabeler.ReadUnlabeler;
            var jsprototype = unlabel(prototype, descLabeler.ValueUnlabeler, modelstate);
            return jsprototype;
        },
        // ---
        // Object.setPrototypeOf(), Reflect.setPrototypeOf()
        setPrototypeOf: function (target, prototype) {
            monitor.Throw(monitor.modules.error.ErrorObject, 'Proxy.setPrototypeOf: setPrototypeOf is ES6 standard.', bot);
            return false;
        },
        // ---
        // Object.isExtensible(), Reflect.isExtensible() 
        isExtensible: function (target) {
            var modelstate = monitor.policy.CurrentModelState;
            var unlabeler = modelstate.GetModel(abstractname);
            var targetValue = new values_1.Value(jsflowobject, bot);
            var isExtensible = monitor.instances.ObjectConstructor.properties.isExtensible.Call(jsflowobject, [targetValue]);
            var jsIsExtensible = unlabeler.Unlabeler.Unlabel(isExtensible, modelstate);
            return jsIsExtensible;
        },
        // ---
        // Object.preventExtensions(), Reflect.preventExtensions()
        preventExtensions: function (target) {
            var modelstate = monitor.policy.CurrentModelState;
            var model = modelstate.GetModel(abstractname);
            // TODO: unlabel model here; write context
            var targetValue = new values_1.Value(jsflowobject, bot);
            monitor.instances.ObjectConstructor.properties.preventExtensions.Call(jsflowobject, [targetValue]);
            return true;
        },
        // ---
        // Object.getOwnPropertyDescriptor(), Reflect.getOwnPropertyDescriptor()
        getOwnPropertyDescriptor: function (target, prop) {
            if (typeof prop === 'symbol') {
                monitor.warn("handler.getOwnPropertyDescriptor, forwarding " + prop.toString() + " to prototype");
                return target.__proto__[prop];
            }
            var modelstate = monitor.policy.CurrentModelState;
            var unlabeler = modelstate.GetModel(abstractname);
            var propertyUnlabeler = unlabeler.GetPropertyUnlabeler(prop);
            var labeledResult = jsflowobject.GetOwnProperty(new values_1.Value(prop, bot));
            var result = propertyUnlabeler.Unlabeler.Unlabel(labeledResult, modelstate);
            var jsresult = unlabelPropertyDescriptor(result, propertyUnlabeler.ReadUnlabeler, modelstate);
            return jsresult;
        },
        // ---
        // Object.defineProperty, Reflect.defineProperty()
        defineProperty: function (target, prop, jsdesc) {
            if (typeof prop === 'symbol') {
                throw new TypeError('handler.defineProperty, defining symbol properties not supported ' + prop.toString());
            }
            var modelstate = monitor.policy.CurrentModelState;
            var unlabeler = modelstate.GetModel(abstractname);
            var propertyUnlabeler = unlabeler.GetPropertyUnlabeler(prop);
            // TODO: we should get a write context from the unlabeler, or the propertyUnlabeler
            var contextLabel = bot;
            var desc = relabelPropertyDescriptor(jsdesc, propertyUnlabeler.WriteLabeler, modelstate);
            monitor.context.pushPC(contextLabel);
            var x = jsflowobject.DefineOwnProperty(new values_1.Value(prop, bot), desc, true);
            monitor.context.popPC();
            // TODO: should share model with set
            return true;
        },
        // ---
        // the in operator
        has: function (target, prop) {
            if (typeof prop === 'symbol') {
                // TODO: should never get symbols?
                throw new TypeError('handler.has,  symbol properties not supported ' + prop.toString());
            }
            var modelstate = monitor.policy.CurrentModelState;
            var unlabeler = modelstate.GetModel(abstractname);
            var propertyUnlabeler = unlabeler.GetPropertyUnlabeler(prop);
            // TODO: where should we get the label for the prop? and where should we store the label for the in?
            // must be on the object
            var result = jsflowobject.HasProperty(new values_1.Value(prop, bot));
            return result.value;
        },
        // ---
        //
        get: function (target, prop, receiver) {
            if (typeof prop === 'symbol') {
                monitor.warn("handler.get, forwarding " + prop.toString() + " to prototype");
                return target.__proto__[prop];
            }
            var modelstate = monitor.policy.CurrentModelState;
            var unlabeler = modelstate.GetModel(abstractname);
            var propertyUnlabeler = unlabeler.GetPropertyUnlabeler(prop);
            var descUnlabeler = propertyUnlabeler.ReadUnlabeler;
            var jsfresult = jsflowobject.Get(new values_1.Value(prop, bot));
            var result = descUnlabeler.Unlabeler.Unlabel(jsfresult, modelstate);
            return unlabel(result, descUnlabeler.ValueUnlabeler, modelstate);
        },
        // --
        // 
        set: function (target, prop, value, receiver) {
            if (typeof prop === 'symbol') {
                throw new TypeError('handler.set, setting symbol properties not supported ' + prop.toString());
            }
            var modelstate = monitor.policy.CurrentModelState;
            var unlabeler = modelstate.GetModel(abstractname);
            var propertyUnlabeler = unlabeler.GetPropertyUnlabeler(prop);
            var descLabeler = propertyUnlabeler.WriteLabeler;
            var jsfvalue = relabel(value, descLabeler.ValueLabeler, modelstate);
            var valueLabel = descLabeler.ValueLabeler.Labeler.Label(modelstate);
            // TODO: we should re-add context at some point.
            var contextLabel = bot;
            monitor.context.pushPC(contextLabel);
            jsflowobject.Put(new values_1.Value(prop, bot), new values_1.Value(jsfvalue, valueLabel));
            monitor.context.popPC();
            // NOTE: encodes that set always works.
            return true;
        },
        // --
        // TODO: lacks label model connection
        deleteProperty: function (target, prop) {
            if (typeof prop === 'symbol') {
                throw new TypeError('handler.deleteProperty, deleting symbol properties not supported ' + prop.toString());
            }
            var result = jsflowobject.Delete(new values_1.Value(prop, bot));
            return result.value;
        },
        // --
        // TODO: unfinnished!
        ownKeys: function (target) {
            var keys = monitor.instances.ObjectConstructor.properties.getOwnPropertyNames.Call(jsflowobject, [new values_1.Value(jsflowobject, bot)]);
            return Object.getOwnPropertyNames(target); //unlabel(keys);
        },
        // --
        //
        apply: function (target, thisArg, args) {
            var modelstate = monitor.policy.CurrentModelState;
            if (abstractname[0] === '@' || modelstate === undefined) {
                // event listener model indicated by @ 
                // or execution in the empty model state stack inidicating call initialted from library
                // the assumption is that event listeners are only called
                modelstate = monitor.policy.eventmodelstate;
            }
            // TODO: Cast - should add check!
            var unlabeler = modelstate.GetModel(abstractname);
            var labeledThis = MkValue(thisArg, unlabeler.SelfLabeler, modelstate);
            var labeledArgs = [];
            var argslabelmodels = unlabeler.ArgumentsLabeler;
            for (var i = 0, j = 0; i < args.length; i++, j++) {
                while (!argslabelmodels.GetLabeler(j).ModelFor(args[i])) {
                    j++;
                }
                labeledArgs[i] = MkValue(args[i], argslabelmodels.GetLabeler(j), modelstate);
            }
            var result = jsflowobject.Call(labeledThis, labeledArgs);
            return unlabelValue(result, unlabeler.ReturnUnlabeler, modelstate);
        },
        // ---
        //
        construct: function (target, args, receiver) {
            var modelstate = monitor.policy.CurrentModelState;
            var unlabeler = modelstate.GetModel(abstractname);
            var labeledArgs = [];
            var argslabelmodels = unlabeler.ArgumentsLabeler;
            for (var i = 0, j = 0; i < args.length; i++, j++) {
                while (!argslabelmodels.GetLabeler(j).ModelFor(args[i])) {
                    j++;
                }
                labeledArgs[i] = MkValue(args[i], argslabelmodels.GetLabeler(j), modelstate);
            }
            var result = jsflowobject.Construct(labeledArgs);
            return unlabelValue(result, unlabeler.ReturnUnlabeler, modelstate);
        }
    };
}
// ---
function unlabelValue(labeledValue, valueUnlabeler, modelstate) {
    var value = valueUnlabeler.Unlabeler.Unlabel(labeledValue, modelstate);
    var jsvalue = unlabel(value, valueUnlabeler.AbstractName, modelstate);
    return jsvalue;
}
// ---
// unlabel
// --- ----------------------------------------------------------------------
function unlabel(value, abstractname, modelstate) {
    var e_4, _a;
    if (value === null) {
        return null;
    }
    var valType = typeof value;
    if (valType === 'string' ||
        valType === 'number' ||
        valType === 'boolean' ||
        valType === 'undefined') {
        return value;
    }
    // BiFo, EntityFunction, EntityObject, all Prototypes and Constructors
    if (value.host !== undefined) {
        return value.host;
    }
    // to be callable, the proxied object must be a function
    // thus, we copy the properties to a function
    // those properties are not used, but they must be present.
    // the handler interacts with the original object 
    if (value instanceof FunctionObject_1.FunctionObject) {
        var fun = function () { };
        try {
            for (var _b = __values(Object.getOwnPropertyNames(value.properties)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                // We cannot copy the arguments, since its not writable or configurable on function objects
                if (key !== 'arguments') {
                    // guaranteed to be present
                    var desc = Object.getOwnPropertyDescriptor(value.properties, key);
                    Object.defineProperty(fun, key, desc);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return new Proxy(fun, handler(value, abstractname));
    }
    return new Proxy(value.properties, handler(value, abstractname));
}

},{"../Objects/FunctionObject":40,"../ecma":53,"../label":60,"../values":75,"./policy":74}],73:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var monitor_1 = require("../monitor");
var WrapperMonitorBase = /** @class */ (function (_super) {
    __extends(WrapperMonitorBase, _super);
    function WrapperMonitorBase(global, print, log, warn, error) {
        var _this = _super.call(this, global, print, log, warn, error) || this;
        _this.entitymap = new WeakMap();
        return _this;
    }
    WrapperMonitorBase.prototype.initialize = function (global) {
        _super.prototype.initialize.call(this, global);
        /*
        this.entitymap.set(
          this.instances.ObjectPrototype.host,
          this.instances.ObjectPrototype
        );
        this.entitymap.set(
          this.instances.FunctionPrototype.host,
          this.instances.FunctionPrototype
        );
        this.entitymap.set(
          this.instances.ArrayPrototype.host,
          this.instances.ArrayPrototype
        );
        this.entitymap.set(
          this.instances.StringPrototype.host,
          this.instances.StringPrototype
        );
        this.entitymap.set(
          this.instances.BooleanPrototype.host,
          this.instances.BooleanPrototype
        );
        this.entitymap.set(
          this.instances.NumberPrototype.host,
          this.instances.NumberPrototype
        );
        this.entitymap.set(
          this.instances.DatePrototype.host,
          this.instances.DatePrototype
        );
        this.entitymap.set(
          this.instances.RegExpPrototype.host,
          this.instances.RegExpPrototype
        );
        this.entitymap.set(
          this.instances.ErrorPrototype.host,
          this.instances.ErrorPrototype
        );
        this.entitymap.set(
          this.instances.FunctionPrototype.host,
          this.instances.FunctionPrototype
        );
        */
    };
    return WrapperMonitorBase;
}(monitor_1.MonitorBase));
exports.WrapperMonitorBase = WrapperMonitorBase;

},{"../monitor":62}],74:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("../label");
var bot = label_1.Label.bot;
var full_access_path = true;
// ---
function has_own_property(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
exports.has_own_property = has_own_property;
// ---
var SecurityPolicy = /** @class */ (function () {
    function SecurityPolicy(policy) {
        // model state stack - sometimes jsflow causes unlabeling without calling a labeled  export function
        // e.g., this occurs if checking instanceof on a wrapped jsflow object
        // for now we let those spill into a top-level model-state
        this.labelmodelmap = {};
        this.unlabelmodelmap = {};
        this.modelstatestack = [new ToplevelModelState(null)];
        for (var name in policy.labelmodels) {
            this.labelmodelmap[name] = TranformerFactory.MakeObjectLabeler(policy.labelmodels[name], name);
        }
        for (var name in policy.unlabelmodels) {
            this.unlabelmodelmap[name] = TranformerFactory.MakeObjectUnlabeler(policy.unlabelmodels[name], name);
        }
        this.global = new ObjectLabeler(policy.global, "global");
        this.pathmodelmap = {};
        for (var name in policy.pathmodels) {
            this.pathmodelmap[name] = policy.pathmodels[name];
        }
        // model states
        this.globalmodelstate = new ModelState(null);
        // event model state
        this.eventmodelstate = new ModelState(null);
        for (var name in policy.events) {
            this.eventmodelstate.SetModel(name, TranformerFactory.MakeObjectUnlabeler(policy.events[name], name));
        }
    }
    // --- 
    // model state stack handling
    SecurityPolicy.prototype.PushModelState = function (modelstate) {
        this.modelstatestack.unshift(modelstate);
    };
    SecurityPolicy.prototype.PopModelState = function () {
        if (this.modelstatestack.length === 1) {
            monitor.fatal("Trying to pop toplevel modelstate");
        }
        return this.modelstatestack.shift();
    };
    Object.defineProperty(SecurityPolicy.prototype, "CurrentModelState", {
        get: function () {
            return this.modelstatestack[0];
        },
        enumerable: true,
        configurable: true
    });
    // ---
    // export class name to models
    SecurityPolicy.prototype.GetLabeler = function (name) {
        if (!this.labelmodelmap[name]) {
            monitor.fatal('No label model for ' + name);
        }
        return this.labelmodelmap[name];
    };
    SecurityPolicy.prototype.GetUnlabeler = function (name) {
        if (!this.unlabelmodelmap[name]) {
            monitor.fatal('No unlabel model for ' + name);
        }
        return this.unlabelmodelmap[name];
    };
    return SecurityPolicy;
}());
exports.SecurityPolicy = SecurityPolicy;
// ---
var TranformerFactory = /** @class */ (function () {
    function TranformerFactory() {
    }
    TranformerFactory.MakeObjectLabeler = function (model, path) {
        if (model === undefined) {
            return new UnknownLabeler(path);
        }
        switch (model.kind) {
            case 'ObjectLabelModel': return new ObjectLabeler(model, path);
            case 'FunctionLabelModel': return new FunctionLabeler(model, path);
            case 'ArrayLabelModel': return new ArrayLabeler(model, path);
        }
        if (isNamedLabelModel(model)) {
            return monitor.policy.GetLabeler(model.name);
        }
        return monitor.fatal('Unknown label model type ' + model.kind);
    };
    TranformerFactory.MakeObjectUnlabeler = function (model, path) {
        if (model === undefined) {
            return new UnknownUnlabeler(path);
        }
        switch (model.kind) {
            case 'ObjectUnlabelModel': return new ObjectUnlabeler(model, path);
            case 'FunctionUnlabelModel': return new FunctionUnlabeler(model, path);
            case 'ArrayUnlabelModel': return new ArrayUnlabeler(model, path);
        }
        if (isNamedUnlabelModel(model)) {
            return monitor.policy.GetUnlabeler(model.name);
        }
        return monitor.fatal('Unknown unlabel model type ' + model.kind);
    };
    return TranformerFactory;
}());
exports.TranformerFactory = TranformerFactory;
// --- ----------------------------------------------------------------------
var ModelState = /** @class */ (function () {
    function ModelState(parent) {
        this.labelState = {};
        this.modelState = {};
        this.parent = parent;
    }
    /* expects
     * label description (string, [string])
     * if beginning with @ then label variable
     * else label string
     *
     * returns lub of descriptions
     */
    ModelState.prototype.label = function (labelmodels) {
        var e_1, _a;
        if (labelmodels === undefined || labelmodels === "") {
            return bot;
        }
        if (typeof labelmodels === 'string') {
            labelmodels = [labelmodels];
        }
        var label = new label_1.Label();
        try {
            for (var labelmodels_1 = __values(labelmodels), labelmodels_1_1 = labelmodels_1.next(); !labelmodels_1_1.done; labelmodels_1_1 = labelmodels_1.next()) {
                var labelmodel = labelmodels_1_1.value;
                if (labelmodel[0] === '@') {
                    label.lub(this.get(labelmodel));
                }
                else {
                    label.lub(new label_1.Label(labelmodel));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (labelmodels_1_1 && !labelmodels_1_1.done && (_a = labelmodels_1.return)) _a.call(labelmodels_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return label;
    };
    // ---
    // label var handling
    ModelState.prototype.get = function (labelvar) {
        if (labelvar in this.labelState) {
            return this.labelState[labelvar];
        }
        if (this.parent !== null) {
            return this.parent.get(labelvar);
        }
        return monitor.fatal("ModelState: label variable " + labelvar + " not found");
    };
    ModelState.prototype.set = function (labelvar, label) {
        this.labelState[labelvar] = label;
    };
    // abstract name mapping; should not traverse model state hierarchy
    ModelState.prototype.GetModel = function (abstractname) {
        if (typeof abstractname !== 'string') {
            monitor.fatal('GetModel abstract name is not a string but', abstractname);
        }
        if (!has_own_property(this.labelState, abstractname)) {
            monitor.warn('no unlabel model for', abstractname);
            this.modelState[abstractname] = new UnknownUnlabeler(abstractname);
        }
        return this.modelState[abstractname];
    };
    ModelState.prototype.SetModel = function (abstractname, model) {
        if (typeof abstractname !== 'string') {
            monitor.fatal('SetModel abstract name is not a string but', abstractname);
        }
        this.modelState[abstractname] = model;
    };
    return ModelState;
}());
exports.ModelState = ModelState;
// --- ----------------------------------------------------------------------
var ToplevelModelState = /** @class */ (function (_super) {
    __extends(ToplevelModelState, _super);
    function ToplevelModelState(parent) {
        return _super.call(this, parent) || this;
    }
    ToplevelModelState.prototype.label = function (labelmodels) {
        monitor.warn('ToplevelModelState, out-of-context label of', labelmodels, 'triggered');
        return _super.prototype.label.call(this, labelmodels);
    };
    ToplevelModelState.prototype.get = function (labelvar) {
        monitor.warn('ToplevelModelState, out-of-context get of', labelvar, 'triggered');
        return _super.prototype.get.call(this, labelvar);
    };
    ToplevelModelState.prototype.set = function (labelvar, label) {
        monitor.warn('ToplevelModelState, out-of-context set of', labelvar, 'triggered');
        return _super.prototype.set.call(this, labelvar, label);
    };
    ToplevelModelState.prototype.GetModel = function (abstractname) {
        monitor.warn('ToplevelModelState, out-of-context GetModel of', abstractname, 'triggered');
        return _super.prototype.GetModel.call(this, abstractname);
    };
    ToplevelModelState.prototype.SetModel = function (abstractname, model) {
        monitor.warn('ToplevelModelState, out-of-context SetModel of', abstractname, 'triggered');
        return _super.prototype.SetModel.call(this, abstractname, model);
    };
    return ToplevelModelState;
}(ModelState));
exports.ToplevelModelState = ToplevelModelState;
function isObjectLabelModel(model) {
    return model.kind === 'ObjectLabelModel';
}
exports.isObjectLabelModel = isObjectLabelModel;
function isObjectUnlabelModel(model) {
    return model.kind === 'ObjectUnlabelModel';
}
exports.isObjectUnlabelModel = isObjectUnlabelModel;
function isNamedLabelModel(model) {
    return model.kind === 'NamedLabelModel';
}
exports.isNamedLabelModel = isNamedLabelModel;
function isNamedUnlabelModel(model) {
    return model.kind === 'NamedUnlabelModel';
}
exports.isNamedUnlabelModel = isNamedUnlabelModel;
// --- ----------------------------------------------------------------------
// Labelers
var PrimitiveLabeler = /** @class */ (function () {
    function PrimitiveLabeler(labelmodel) {
        this.labelmodel = labelmodel;
    }
    PrimitiveLabeler.prototype.Label = function (modelstate) {
        return modelstate.label(this.labelmodel);
    };
    PrimitiveLabeler.prototype.Extract = function () {
        return this.labelmodel;
    };
    return PrimitiveLabeler;
}());
exports.PrimitiveLabeler = PrimitiveLabeler;
// --- ----------------------------------------------------------------------
var ValueLabeler = /** @class */ (function () {
    function ValueLabeler(labelmodel, path) {
        if (labelmodel === undefined) {
            monitor.warn('undefined value label model for', path);
        }
        this.labelmodel = labelmodel || { label: undefined, model: undefined };
        this.path = path;
    }
    Object.defineProperty(ValueLabeler.prototype, "Labeler", {
        get: function () {
            if (this.label === undefined) {
                this.label = new PrimitiveLabeler(this.labelmodel.label);
            }
            return this.label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueLabeler.prototype, "ValueLabeler", {
        get: function () {
            if (this.value === undefined) {
                this.value = TranformerFactory.MakeObjectLabeler(this.labelmodel.model, this.path);
            }
            return this.value;
        },
        enumerable: true,
        configurable: true
    });
    return ValueLabeler;
}());
exports.ValueLabeler = ValueLabeler;
// --- ----------------------------------------------------------------------
var ArgumentLabeler = /** @class */ (function (_super) {
    __extends(ArgumentLabeler, _super);
    function ArgumentLabeler(labelmodel, path) {
        var _this = this;
        if (labelmodel === undefined) {
            monitor.warn('undefined argument label model for', path);
        }
        _this = _super.call(this, labelmodel, path) || this;
        // @ts-ignore initialized by super call
        _this.optional = _this.labelmodel.optional;
        return _this;
    }
    ArgumentLabeler.prototype.ModelFor = function (value) {
        if (this.labelmodel.optional === undefined) {
            return true;
        }
        return typeof value === this.labelmodel.optional;
    };
    return ArgumentLabeler;
}(ValueLabeler));
exports.ArgumentLabeler = ArgumentLabeler;
// ---
var ArgumentsLabeler = /** @class */ (function () {
    function ArgumentsLabeler(labelmodel, path) {
        if (labelmodel !== undefined && !(labelmodel instanceof Array)) {
            monitor.fatal('ArgumentsLabelModel, expected undefined or array, for', path, 'but got', labelmodel);
        }
        this.labelmodel = labelmodel || [];
        this.path = path;
        this.argslabelmodels = [];
    }
    ArgumentsLabeler.prototype.GetLabeler = function (i) {
        if (!has_own_property(this.argslabelmodels, i)) {
            this.argslabelmodels[i] = new ArgumentLabeler(this.labelmodel[i], this.path + "[" + i + "]");
        }
        return this.argslabelmodels[i];
    };
    return ArgumentsLabeler;
}());
exports.ArgumentsLabeler = ArgumentsLabeler;
// --- ----------------------------------------------------------------------
var DescriptorLabeler = /** @class */ (function () {
    function DescriptorLabeler(labelmodel, path) {
        this.labelmodel = labelmodel || {};
        this.path = path;
    }
    Object.defineProperty(DescriptorLabeler.prototype, "Labeler", {
        get: function () {
            if (this.label === undefined) {
                this.label = new PrimitiveLabeler(this.labelmodel.label);
            }
            return this.label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescriptorLabeler.prototype, "ValueLabeler", {
        get: function () {
            if (this.value === undefined) {
                this.value = TranformerFactory.MakeObjectLabeler(this.labelmodel.value, this.path);
            }
            return this.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescriptorLabeler.prototype, "GetterLabeler", {
        get: function () {
            if (this.getter === undefined) {
                this.getter = new FunctionLabeler(this.labelmodel.getter, this.path);
            }
            return this.getter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescriptorLabeler.prototype, "SetterLabeler", {
        get: function () {
            if (this.setter === undefined) {
                this.setter = new FunctionLabeler(this.labelmodel.setter, this.path);
            }
            return this.setter;
        },
        enumerable: true,
        configurable: true
    });
    return DescriptorLabeler;
}());
exports.DescriptorLabeler = DescriptorLabeler;
// ---
var DescriptorUnlabeler = /** @class */ (function () {
    function DescriptorUnlabeler(unlabelmodel, path) {
        this.unlabelmodel = unlabelmodel || {};
        this.path = path;
    }
    Object.defineProperty(DescriptorUnlabeler.prototype, "Unlabeler", {
        get: function () {
            if (this.label === undefined) {
                this.label = new PrimitiveUnlabeler(this.unlabelmodel.label);
            }
            return this.label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescriptorUnlabeler.prototype, "ValueUnlabeler", {
        get: function () {
            if (this.value === undefined) {
                this.value = this.unlabelmodel.value || this.path;
            }
            return this.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescriptorUnlabeler.prototype, "GetterUnlabeler", {
        get: function () {
            if (this.getter === undefined) {
                this.getter = this.unlabelmodel.getter || this.path;
            }
            return this.getter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescriptorUnlabeler.prototype, "SetterUnlabeler", {
        get: function () {
            if (this.setter === undefined) {
                this.setter = this.unlabelmodel.setter || this.path;
            }
            return this.setter;
        },
        enumerable: true,
        configurable: true
    });
    return DescriptorUnlabeler;
}());
exports.DescriptorUnlabeler = DescriptorUnlabeler;
// ---
var PropertyLabeler = /** @class */ (function () {
    function PropertyLabeler(labelmodel, path) {
        if (labelmodel === undefined) {
            // selected path based
            // let label = monitor.policy.pathmodelmap[path];
            var label = path.replace(/\.prototype/g, '');
            if (label !== undefined) {
                monitor.warn("autolabeling \"" + path + "\" : \"" + label + "\"");
                labelmodel = { label: label };
            }
            else {
                monitor.warn('undefined property label model for', path);
            }
        }
        this.labelmodel = labelmodel || {};
        this.path = path;
    }
    Object.defineProperty(PropertyLabeler.prototype, "Labeler", {
        get: function () {
            if (this.label === undefined) {
                this.label = new PrimitiveLabeler(this.labelmodel.label);
            }
            return this.label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyLabeler.prototype, "ReadLabeler", {
        get: function () {
            if (this.read === undefined) {
                this.read = new DescriptorLabeler(this.labelmodel.read, this.path);
            }
            return this.read;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyLabeler.prototype, "WriteUnlabeler", {
        get: function () {
            if (this.write === undefined) {
                this.write = new DescriptorUnlabeler(this.labelmodel.write, this.path);
            }
            return this.write;
        },
        enumerable: true,
        configurable: true
    });
    return PropertyLabeler;
}());
exports.PropertyLabeler = PropertyLabeler;
// --- ----------------------------------------------------------------------
var ObjectLabeler = /** @class */ (function () {
    function ObjectLabeler(labelmodel, path) {
        if (labelmodel === undefined) {
            monitor.warn('undefined object label model for', path);
        }
        this.labelmodel = labelmodel || { kind: 'ObjectLabelModel' };
        this.path = path;
        this.properties = {};
    }
    Object.defineProperty(ObjectLabeler.prototype, "PrototypeLabeler", {
        get: function () {
            if (this.prototype === undefined) {
                this.prototype = new PropertyLabeler(this.labelmodel.prototype, this.path + '.prototype');
            }
            return this.prototype;
        },
        enumerable: true,
        configurable: true
    });
    ObjectLabeler.prototype.GetPropertyLabeler = function (propertyname) {
        if (!has_own_property(this.properties, propertyname)) {
            var propertyModel = this.labelmodel.properties && this.labelmodel.properties[propertyname];
            this.properties[propertyname] = new PropertyLabeler(propertyModel, this.path + '.' + propertyname);
        }
        return this.properties[propertyname];
    };
    Object.defineProperty(ObjectLabeler.prototype, "Labeler", {
        get: function () {
            if (this.label === undefined) {
                this.label = new PrimitiveLabeler(this.labelmodel.label);
            }
            return this.label;
        },
        enumerable: true,
        configurable: true
    });
    return ObjectLabeler;
}());
exports.ObjectLabeler = ObjectLabeler;
// --- ----------------------------------------------------------------------
// TODO: effects
var FunctionLabeler = /** @class */ (function (_super) {
    __extends(FunctionLabeler, _super);
    function FunctionLabeler(labelmodel, path) {
        var _this = this;
        if (labelmodel === undefined) {
            monitor.warn('undefined export function label model for', path);
        }
        // @ts-ignore initialized by super call
        _this = _super.call(this, labelmodel, path) || this;
        return _this;
    }
    Object.defineProperty(FunctionLabeler.prototype, "ArgumentsUnlabeler", {
        get: function () {
            if (this.args === undefined) {
                this.args = new ArgumentsUnlabeler(this.labelmodel.args, this.path);
            }
            return this.args;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionLabeler.prototype, "SelfUnlabeler", {
        get: function () {
            if (this.self === undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[Call]');
                this.self = new ValueUnlabeler(this.labelmodel.self, this.path);
            }
            return this.self;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionLabeler.prototype, "ReturnLabeler", {
        get: function () {
            if (this.ret === undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[ReturnValue]');
                this.ret = new ValueLabeler(this.labelmodel.ret, this.path);
            }
            return this.ret;
        },
        enumerable: true,
        configurable: true
    });
    // TODO: Issue #35, https://bitbucket.org/chalmerslbs/jsflow/issues/35/support-for-exceptions
    FunctionLabeler.prototype.GetExceptionLabelModel = function (name) {
        return new UnknownLabeler(name);
    };
    // TODO: Issue #35, https://bitbucket.org/chalmerslbs/jsflow/issues/35/support-for-exceptions
    FunctionLabeler.prototype.GetExceptionLabel = function (name) {
        return bot;
    };
    return FunctionLabeler;
}(ObjectLabeler));
exports.FunctionLabeler = FunctionLabeler;
// --- ----------------------------------------------------------------------
// TODO: arrays should fall back on objects
var ArrayLabeler = /** @class */ (function (_super) {
    __extends(ArrayLabeler, _super);
    function ArrayLabeler(labelmodel, path) {
        var _this = this;
        if (labelmodel === undefined) {
            monitor.warn('undefined array label model for', path);
        }
        // @ts-ignore initialized by super call
        _this = _super.call(this, labelmodel, path) || this;
        return _this;
    }
    ArrayLabeler.prototype.GetPropertyLabelModel = function (propertyname) {
        if (this.element === undefined) {
            // TODO: create the right type
            this.element = new PropertyLabeler(this.labelmodel.element, this.path + '.' + propertyname);
        }
        return this.element;
    };
    return ArrayLabeler;
}(ObjectLabeler));
exports.ArrayLabeler = ArrayLabeler;
// --- ----------------------------------------------------------------------
// Merge between all other models. TODO: Add export function and constructor support.
var UnknownLabeler = /** @class */ (function () {
    function UnknownLabeler(path) {
        this.path = path;
        this.properties = {};
    }
    Object.defineProperty(UnknownLabeler.prototype, "PrototypeLabeler", {
        get: function () {
            if (this.prototype === undefined) {
                this.prototype = new PropertyLabeler(undefined, this.path + '.prototype');
            }
            return this.prototype;
        },
        enumerable: true,
        configurable: true
    });
    UnknownLabeler.prototype.GetPropertyLabeler = function (propertyname) {
        if (!has_own_property(this.properties, propertyname)) {
            this.properties[propertyname] = new PropertyLabeler(undefined, this.path + '.' + propertyname);
        }
        return this.properties[propertyname];
    };
    UnknownLabeler.prototype.GetStructLabel = function (modelstate) {
        return bot;
    };
    // exception support
    // TODO: Issue #35, https://bitbucket.org/chalmerslbs/jsflow/issues/35/support-for-exceptions
    UnknownLabeler.prototype.GetExceptionLabelModel = function (name) {
        return new UnknownLabeler(name);
    };
    // TODO: Issue #35, https://bitbucket.org/chalmerslbs/jsflow/issues/35/support-for-exceptions
    UnknownLabeler.prototype.GetExceptionLabel = function (name) {
        return bot;
    };
    Object.defineProperty(UnknownLabeler.prototype, "ArgumentsUnlabeler", {
        get: function () {
            if (this.args === undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[args]');
                this.args = new ArgumentsUnlabeler(undefined, this.path);
            }
            return this.args;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownLabeler.prototype, "SelfUnlabeler", {
        get: function () {
            if (this.self === undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[this]');
                this.self = new ValueUnlabeler(undefined, this.path);
            }
            return this.self;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownLabeler.prototype, "ReturnLabeler", {
        get: function () {
            if (this.ret === undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[ret]');
                this.ret = new ValueLabeler(undefined, this.path);
            }
            return this.ret;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownLabeler.prototype, "Effects", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownLabeler.prototype, "Labeler", {
        get: function () {
            if (this.label === undefined) {
                this.label = new PrimitiveLabeler(undefined);
            }
            return this.label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownLabeler.prototype, "ReadLabeler", {
        // for reading
        get: function () {
            if (this.read === undefined) {
                this.read = new DescriptorLabeler(undefined, this.path);
            }
            return this.read;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownLabeler.prototype, "WriteUnlabeler", {
        // for writing
        get: function () {
            if (this.write === undefined) {
                this.write = new DescriptorUnlabeler(undefined, this.path);
            }
            return this.write;
        },
        enumerable: true,
        configurable: true
    });
    return UnknownLabeler;
}());
exports.UnknownLabeler = UnknownLabeler;
// --- -----------------------------------------------------------------------------------------------------
// unlabel models
var PrimitiveUnlabeler = /** @class */ (function () {
    function PrimitiveUnlabeler(labelvar) {
        this.variable = labelvar;
        if (labelvar !== undefined && typeof labelvar !== 'string') {
            monitor.fatal('PrimitiveUnlabelModel, expecting label variable, got', labelvar);
        }
    }
    /* expects
     *  Value
     */
    PrimitiveUnlabeler.prototype.Unlabel = function (value, modelstate) {
        if (this.variable != undefined) {
            modelstate.set(this.variable, value.label);
        }
        return value.value;
    };
    return PrimitiveUnlabeler;
}());
exports.PrimitiveUnlabeler = PrimitiveUnlabeler;
// --- -----------------------------------------------------------------------------------------------------
var ValueUnlabeler = /** @class */ (function () {
    function ValueUnlabeler(unlabelmodel, path) {
        if (unlabelmodel === undefined) {
            monitor.warn('undefined value unlabel model for', path);
        }
        this.unlabelmodel = unlabelmodel || {};
        this.path = path;
    }
    Object.defineProperty(ValueUnlabeler.prototype, "Unlabeler", {
        get: function () {
            if (this.unlabeler === undefined) {
                this.unlabeler = new PrimitiveUnlabeler(this.unlabelmodel.label);
            }
            return this.unlabeler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueUnlabeler.prototype, "AbstractName", {
        // undefined or abstract name
        get: function () {
            if (this.abstractname === undefined) {
                this.abstractname = this.unlabelmodel.model || this.path;
            }
            return this.abstractname;
        },
        enumerable: true,
        configurable: true
    });
    return ValueUnlabeler;
}());
exports.ValueUnlabeler = ValueUnlabeler;
// --- -----------------------------------------------------------------------------------------------------
var ArgumentUnlabeler = /** @class */ (function (_super) {
    __extends(ArgumentUnlabeler, _super);
    // ---
    function ArgumentUnlabeler(unlabelmodel, path) {
        var _this = this;
        if (unlabelmodel === undefined) {
            monitor.warn('undefined argument unlabel model for', path);
        }
        _this = _super.call(this, unlabelmodel, path) || this;
        // @ts-ignore initialized by super call
        _this.optional = _this.unlabelmodel.optional;
        return _this;
    }
    // ---
    ArgumentUnlabeler.prototype.ModelFor = function (labeledvalue) {
        if (this.optional === undefined) {
            return true;
        }
        switch (typeof labeledvalue.value) {
            case 'undefined': return this.optional === 'undefined';
            case 'boolean': return this.optional === 'boolean';
            case 'number': return this.optional === 'number';
            case 'string': return this.optional === 'string';
        }
        if (labeledvalue.value === null) {
            this.optional === 'null';
        }
        // labeledvalue.value must a JSFlow object - use the Class property
        switch (labeledvalue.value.Class) {
            case 'Object': return this.optional === 'object';
            case 'Function': return this.optional === 'export function';
        }
        return monitor.fatal("ArgumentUnlabelModel:ModelFor: don't know how to handle", labeledvalue.value);
    };
    return ArgumentUnlabeler;
}(ValueUnlabeler));
exports.ArgumentUnlabeler = ArgumentUnlabeler;
// --- -----------------------------------------------------------------------------------------------------
var ArgumentsUnlabeler = /** @class */ (function () {
    function ArgumentsUnlabeler(unlabelmodel, path) {
        if (unlabelmodel !== undefined && !(unlabelmodel instanceof Array)) {
            monitor.fatal('ArgumentsUnlabelModel, expecting undefined or array, got', unlabelmodel);
        }
        this.unlabelmodel = unlabelmodel || [];
        this.path = path;
        this.args = [];
    }
    ArgumentsUnlabeler.prototype.GetArgumentUnlabeler = function (i) {
        if (!has_own_property(this.args, i)) {
            this.args[i] = new ArgumentUnlabeler(this.unlabelmodel[i], this.path + "[" + i + "]");
        }
        return this.args[i];
    };
    return ArgumentsUnlabeler;
}());
exports.ArgumentsUnlabeler = ArgumentsUnlabeler;
// --- -----------------------------------------------------------------------------------------------------
var PropertyUnlabeler = /** @class */ (function () {
    function PropertyUnlabeler(unlabelmodel, path) {
        if (unlabelmodel === undefined) {
            monitor.warn('undefined property unlabel model for', path);
        }
        this.unlabelmodel = unlabelmodel || {};
        this.name = path;
    }
    Object.defineProperty(PropertyUnlabeler.prototype, "Unlabeler", {
        get: function () {
            if (this.label === undefined) {
                this.label = new PrimitiveUnlabeler(this.unlabelmodel.label);
            }
            return this.label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyUnlabeler.prototype, "ReadUnlabeler", {
        get: function () {
            if (this.read === undefined) {
                this.read = new DescriptorUnlabeler(this.unlabelmodel.read, this.name);
            }
            return this.read;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyUnlabeler.prototype, "WriteLabeler", {
        get: function () {
            if (this.write === undefined) {
                this.write = new DescriptorLabeler(this.unlabelmodel.write, this.name);
            }
            return this.write;
        },
        enumerable: true,
        configurable: true
    });
    return PropertyUnlabeler;
}());
exports.PropertyUnlabeler = PropertyUnlabeler;
// --- -----------------------------------------------------------------------------------------------------
// TODO: handling of struct, isExstensible and other traps
var ObjectUnlabeler = /** @class */ (function () {
    function ObjectUnlabeler(unlabelmodel, path) {
        if (unlabelmodel === undefined) {
            monitor.warn('undefined object unlabel model for', path);
        }
        this.unlabelmodel = unlabelmodel || { kind: 'ObjectUnlabelModel' };
        this.path = path;
        this.properties = {};
    }
    Object.defineProperty(ObjectUnlabeler.prototype, "Unlabeler", {
        get: function () {
            if (this.label === undefined) {
                this.label = new PrimitiveUnlabeler(this.unlabelmodel.label);
            }
            return this.label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ObjectUnlabeler.prototype, "PrototypeUnlabeler", {
        get: function () {
            if (this.prototype === undefined) {
                this.prototype = new PropertyUnlabeler(this.unlabelmodel.prototype, this.path + '.prototype');
            }
            return this.prototype;
        },
        enumerable: true,
        configurable: true
    });
    ObjectUnlabeler.prototype.GetPropertyUnlabeler = function (propertyname) {
        if (!has_own_property(this.properties, propertyname)) {
            var propertyUnlabelModel = this.unlabelmodel.properties && this.unlabelmodel.properties[propertyname];
            this.properties[propertyname] = new PropertyUnlabeler(propertyUnlabelModel, this.path + '.' + propertyname);
        }
        return this.properties[propertyname];
    };
    return ObjectUnlabeler;
}());
exports.ObjectUnlabeler = ObjectUnlabeler;
// --- -----------------------------------------------------------------------------------------------------
var FunctionUnlabeler = /** @class */ (function (_super) {
    __extends(FunctionUnlabeler, _super);
    function FunctionUnlabeler(unlabelmodel, path) {
        var _this = this;
        if (unlabelmodel === undefined) {
            monitor.warn('undefined export function unlabel model for', path);
        }
        // @ts-ignore initialized by super call
        _this = _super.call(this, unlabelmodel, path) || this;
        return _this;
    }
    Object.defineProperty(FunctionUnlabeler.prototype, "ArgumentsLabeler", {
        get: function () {
            if (this.args === undefined) {
                this.args = new ArgumentsLabeler(this.unlabelmodel.args, this.path);
            }
            return this.args;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionUnlabeler.prototype, "SelfLabeler", {
        get: function () {
            if (this.self === undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[Call]');
                this.self = new ValueLabeler(this.unlabelmodel.self, this.path);
            }
            return this.self;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionUnlabeler.prototype, "ReturnUnlabeler", {
        get: function () {
            if (this.ret == undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[ReturnValue]');
                this.ret = new ValueUnlabeler(this.unlabelmodel.ret, this.path);
            }
            return this.ret;
        },
        enumerable: true,
        configurable: true
    });
    return FunctionUnlabeler;
}(ObjectUnlabeler));
exports.FunctionUnlabeler = FunctionUnlabeler;
// ---
// TODO: This array label model does not take into account that arrays are objects.
//    Should inherit ObjectUnlabelModel in the same whay FunctionUnlabelModel does?
// TODO: unlabeling of the struct label
// ---
var ArrayUnlabeler = /** @class */ (function (_super) {
    __extends(ArrayUnlabeler, _super);
    function ArrayUnlabeler(unlabelmodel, path) {
        var _this = this;
        if (unlabelmodel === undefined) {
            monitor.warn('undefined array unlabel model for', path);
        }
        // @ts-ignore initialized by super call
        _this = _super.call(this, unlabelmodel, path) || this;
        return _this;
    }
    ArrayUnlabeler.prototype.GetPropertyUnlabeler = function (propertyname) {
        if (this.element === undefined) {
            this.element = new PropertyUnlabeler(this.unlabelmodel.element, this.path + '.' + propertyname);
        }
        return this.element;
    };
    return ArrayUnlabeler;
}(ObjectUnlabeler));
exports.ArrayUnlabeler = ArrayUnlabeler;
// --- -----------------------------------------------------------------------------------------------------
// TODO: Object | Function | (TODO) Array ...
var UnknownUnlabeler = /** @class */ (function () {
    function UnknownUnlabeler(path) {
        this.path = path;
        this.properties = {};
    }
    Object.defineProperty(UnknownUnlabeler.prototype, "PrototypeUnlabeler", {
        get: function () {
            if (this.prototype === undefined) {
                this.prototype = new PropertyUnlabeler(undefined, this.path + '.prototype');
            }
            return this.prototype;
        },
        enumerable: true,
        configurable: true
    });
    UnknownUnlabeler.prototype.GetPropertyUnlabeler = function (propertyname) {
        if (!has_own_property(this.properties, propertyname)) {
            this.properties[propertyname] = new PropertyUnlabeler(undefined, this.path + '.' + propertyname);
        }
        return this.properties[propertyname];
    };
    Object.defineProperty(UnknownUnlabeler.prototype, "ArgumentsLabeler", {
        get: function () {
            if (this.args === undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[args]');
                this.args = new ArgumentsLabeler(undefined, this.path);
            }
            return this.args;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownUnlabeler.prototype, "SelfLabeler", {
        get: function () {
            if (this.self === undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[self]');
                this.self = new ValueLabeler(undefined, this.path);
            }
            return this.self;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownUnlabeler.prototype, "ReturnUnlabeler", {
        get: function () {
            if (this.ret === undefined) {
                if (full_access_path)
                    monitor.log(this.path + '[ret]');
                this.ret = new ValueUnlabeler(undefined, this.path);
            }
            return this.ret;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownUnlabeler.prototype, "Unlabeler", {
        get: function () {
            if (this.value === undefined) {
                this.value = new PrimitiveUnlabeler(undefined);
            }
            return this.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownUnlabeler.prototype, "ReadUnlabeler", {
        get: function () {
            if (this.read === undefined) {
                this.read = new DescriptorUnlabeler(undefined, this.path);
            }
            return this.read;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnknownUnlabeler.prototype, "WriteLabeler", {
        get: function () {
            if (this.write === undefined) {
                this.write = new DescriptorLabeler(undefined, this.path);
            }
            return this.write;
        },
        enumerable: true,
        configurable: true
    });
    return UnknownUnlabeler;
}());
exports.UnknownUnlabeler = UnknownUnlabeler;

},{"../label":60}],75:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var label_1 = require("./label");
// ------------------------------------------------------------
function InContext(l, f) {
    monitor.context.pushPC(l);
    var res = f();
    monitor.context.popPC();
    if (res instanceof Value) {
        res.raise(l);
    }
    return res;
}
// ------------------------------------------------------------
// Value - labeled values
var Value = /** @class */ (function () {
    function Value(value, label) {
        this.value = value;
        this.label = label;
    }
    // ------------------------------------------------------------
    Value.prototype.raise = function (l) {
        this.label = label_1.lub(this.label, l);
    };
    // ------------------------------------------------------------
    Value.prototype.clone = function () {
        return new Value(this.value, this.label);
    };
    // ------------------------------------------------------------
    Value.prototype.toString = function () {
        if (typeof this.value === 'string') {
            return "'" + this.value + "'_" + this.label;
        }
        else {
            return this.value + "_" + this.label;
        }
    };
    // ------------------------------------------------------------
    // Ecma
    Value.prototype.GetOwnProperty = function (s) {
        var value = this.value;
        return InContext(this.label, function () { return value.GetOwnProperty(s); });
    };
    Value.prototype.GetProperty = function (s) {
        var value = this.value;
        return InContext(this.label, function () { return value.GetProperty(s); });
    };
    Value.prototype.Get = function (s) {
        var value = this.value;
        return InContext(this.label, function () { return value.Get(s); });
    };
    Value.prototype.CanPut = function (p) {
        var value = this.value;
        return InContext(this.label, function () { return value.CanPut(p); });
    };
    Value.prototype.Put = function (s, v, Throw) {
        var value = this.value;
        return InContext(this.label, function () { return value.Put(s, v); });
    };
    Value.prototype.HasProperty = function (s) {
        var value = this.value;
        return InContext(this.label, function () { return value.HasProperty(s); });
    };
    Value.prototype.Delete = function (s, Throw) {
        var value = this.value;
        return InContext(this.label, function () { return value.Delete(s, Throw); });
    };
    Value.prototype.DefaultValue = function (hint) {
        var value = this.value;
        return InContext(this.label, function () { return value.DefaultValue(hint); });
    };
    Value.prototype.DefineOwnProperty = function (s, desc, Throw) {
        var value = this.value;
        return InContext(this.label, function () { return value.DefineOwnProperty(s, desc, Throw); });
    };
    // ---
    // Function
    Value.prototype.HasInstance = function (V) {
        var value = this.value;
        return InContext(this.label, function () { return value.HasInstance(V); });
    };
    Value.prototype.Call = function (thisArg, args) {
        var value = this.value;
        return InContext(this.label, function () { return value.Call(thisArg, args); });
    };
    Value.prototype.Construct = function (args) {
        var value = this.value;
        return InContext(this.label, function () { return value.Construct(args); });
    };
    // ---
    // ObjectEnvironmentRecord, DeclarativeEnvironmentRecord
    Value.prototype.HasBinding = function (p) {
        var value = this.value;
        return InContext(this.label, function () { return value.HasBinding(p); });
    };
    Value.prototype.CreateMutableBinding = function (p, d) {
        var value = this.value;
        return InContext(this.label, function () { return value.CreateMutableBinding(p, d); });
    };
    Value.prototype.GetBindingValue = function (p, s) {
        var value = this.value;
        return InContext(this.label, function () { return value.GetBindingValue(p, s); });
    };
    Value.prototype.SetMutableBinding = function (p, v, s) {
        var value = this.value;
        return InContext(this.label, function () { return value.SetMutableBinding(p, v, s); });
    };
    Value.prototype.DeleteBinding = function (p) {
        var value = this.value;
        return InContext(this.label, function () { return value.DeleteBinding(p); });
    };
    Value.prototype.ImplicitThisValue = function () {
        var value = this.value;
        return InContext(this.label, function () { return value.ImplicitThisValue(); });
    };
    // DeclarativeEnvironmentRecord
    Value.prototype.CreateImmutableBinding = function (p) {
        var value = this.value;
        return InContext(this.label, function () { return value.CreateImmutableBinding(p); });
    };
    Value.prototype.InitializeImmutableBinding = function (p, v) {
        var value = this.value;
        return InContext(this.label, function () { return value.InitializeImmutableBinding(p, v); });
    };
    return Value;
}());
exports.Value = Value;
function isDefinedPrimitiveValue(value) {
    return typeof value.value === 'boolean' || typeof value.value === 'string' || typeof value.value === 'number';
}
exports.isDefinedPrimitiveValue = isDefinedPrimitiveValue;
var Reference = /** @class */ (function () {
    function Reference(base, propertyName) {
        this.base = base;
        this.propertyName = propertyName;
    }
    Reference.prototype.GetBase = function () {
        return this.base;
    };
    Reference.prototype.GetReferencedName = function () {
        return this.propertyName;
    };
    Reference.prototype.HasPrimitiveBase = function () {
        var x = typeof this.base.value;
        return (x === 'boolean' || x === 'string' || x === 'number');
    };
    Reference.prototype.IsPropertyReference = function () {
        return (this.base.value.Class !== undefined || this.HasPrimitiveBase());
    };
    Reference.prototype.IsUnresolvableReference = function () {
        return (this.base.value === undefined);
    };
    Reference.prototype.toString = function () {
        return ('@(' + this.base + ',' + this.propertyName + ')');
    };
    return Reference;
}());
exports.Reference = Reference;

},{"./label":60}],76:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":77}],77:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
